<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FBY展菲个人博客</title>
  
  <subtitle>『公众号：网罗开发』</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fanbaoying.github.io/"/>
  <updated>2018-01-31T06:20:46.000Z</updated>
  <id>https://fanbaoying.github.io/</id>
  
  <author>
    <name>FBY展菲</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WKUIDelegate协议 - 手机网站支付转Native支付</title>
    <link href="https://fanbaoying.github.io/WKUIDelegate%E5%8D%8F%E8%AE%AE-%E6%89%8B%E6%9C%BA%E7%BD%91%E7%AB%99%E6%94%AF%E4%BB%98%E8%BD%ACNative%E6%94%AF%E4%BB%98/"/>
    <id>https://fanbaoying.github.io/WKUIDelegate协议-手机网站支付转Native支付/</id>
    <published>2018-01-31T06:16:07.000Z</published>
    <updated>2018-01-31T06:20:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一：介绍"><a href="#一：介绍" class="headerlink" title="一：介绍"></a>一：介绍</h2><p>为了节约开发成本，很多Native-H5混合App采用手机网站支付的方式去实现支付模块。但手机网站支付的网络依赖比较严重，也通常需要经过更多的验证，这种种原因导致手机网站支付的成功率比Native支付低，对商户的利益造成影响。</p><a id="more"></a><p>官方文档使用的是UIWebViewDelegate协议</p><h2 id="二：新旧版本区别"><a href="#二：新旧版本区别" class="headerlink" title="二：新旧版本区别"></a>二：新旧版本区别</h2><h4 id="1-旧版本"><a href="#1-旧版本" class="headerlink" title="1. 旧版本"></a>1. 旧版本</h4><p>获取到的url order info，从h5链接中获取订单串接口函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (NSString*)fetchOrderInfoFromH5PayUrl:(NSString*)urlStr;</span><br><span class="line">- (void)payUrlOrder:(NSString *)orderStr</span><br><span class="line">         fromScheme:(NSString *)schemeStr</span><br><span class="line">           callback:(CompletionBlock)completionBlock;</span><br></pre></td></tr></table></figure></p><p>上面两个函数自版本15.4.0起已废弃。</p><h4 id="2-新版本"><a href="#2-新版本" class="headerlink" title="2. 新版本"></a>2. 新版本</h4><p>新版本推荐使用下面方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  从h5链接中获取订单串并支付接口（自版本15.4.0起，推荐使用该接口）</span><br><span class="line"> *</span><br><span class="line"> *  @param urlStr     拦截的 url string</span><br><span class="line"> *</span><br><span class="line"> *  @return YES为成功获取订单信息并发起支付流程；NO为无法获取订单信息，输入url是普通url</span><br><span class="line"> */</span><br><span class="line">- (BOOL)payInterceptorWithUrl:(NSString *)urlStr</span><br><span class="line">                   fromScheme:(NSString *)schemeStr</span><br><span class="line">                     callback:(CompletionBlock)completionBlock;</span><br></pre></td></tr></table></figure></p><p>旧版本在官方推荐的UIWebViewDelegate协议中使用，暂时没有遇到问题。</p><p>如果在WKUIDelegate协议中使用fetchOrderInfoFromH5PayUrl函数，获得的获取到的url order info为空，无法调起支付。</p><p>下面我就给大家介绍一下使用WKUIDelegate协议怎么解决手机网站支付转Native支付。</p><h2 id="三：SDK导入流程"><a href="#三：SDK导入流程" class="headerlink" title="三：SDK导入流程"></a>三：SDK导入流程</h2><h4 id="1-下载sdk"><a href="#1-下载sdk" class="headerlink" title="1.下载sdk"></a>1.<a href="https://docs.open.alipay.com/54/104509" target="_blank" rel="noopener">下载sdk</a></h4><p>把iOS包中的压缩文件中以下文件拷贝到项目文件夹下，并导入到项目工程中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AlipaySDK.bundle</span><br><span class="line">AlipaySDK.framework</span><br></pre></td></tr></table></figure></p><h4 id="2-添加依赖"><a href="#2-添加依赖" class="headerlink" title="2.添加依赖"></a>2.添加依赖</h4><p>在Build Phases选项卡的Link Binary With Libraries中，增加以下依赖：</p><p><img src="https://user-gold-cdn.xitu.io/2017/12/13/1604f45ce7a16e86?w=1112&amp;h=538&amp;f=png&amp;s=143033" alt="h5alipay.png"></p><p>注意：</p><p>如果是Xcode 7.0之后的版本，需要添加libc++.tbd、libz.tbd。</p><p>如果是Xcode 7.0之前的版本，需要添加libc++.dylib、libz.dylib。</p><h2 id="四：使用说明："><a href="#四：使用说明：" class="headerlink" title="四：使用说明："></a>四：使用说明：</h2><h4 id="1-头文件引用"><a href="#1-头文件引用" class="headerlink" title="1.头文件引用"></a>1.头文件引用</h4><p>在需要调用AlipaySDK的文件中，增加头文件引用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;AlipaySDK/AlipaySDK.h&gt;</span><br><span class="line"></span><br><span class="line">#define SCREEN_WIDTH [UIScreen mainScreen].bounds.size.width</span><br><span class="line">#define SCREEN_HEIGHT [UIScreen mainScreen].bounds.size.height</span><br><span class="line">@interface ViewController ()&lt;WKNavigationDelegate,WKUIDelegate&gt;</span><br><span class="line"></span><br><span class="line">@property (weak, nonatomic) WKWebView *webView;</span><br><span class="line">//进度条</span><br><span class="line">@property (weak, nonatomic) CALayer *progresslayer;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><p>//初始化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">- (void)stopRunning&#123;</span><br><span class="line"></span><br><span class="line">    WKWebView *webView = [[WKWebView alloc]initWithFrame:CGRectMake(0, 64, SCREEN_WIDTH, SCREEN_HEIGHT-64)];</span><br><span class="line"></span><br><span class="line">    [self.view addSubview:webView];</span><br><span class="line">    self.webView = webView;</span><br><span class="line"></span><br><span class="line">    webView.navigationDelegate = self;</span><br><span class="line">    webView.UIDelegate = self;</span><br><span class="line"></span><br><span class="line">    //添加属性监听</span><br><span class="line">    [webView addObserver:self forKeyPath:@&quot;estimatedProgress&quot; options:NSKeyValueObservingOptionNew context:nil];</span><br><span class="line"></span><br><span class="line">    //进度条</span><br><span class="line">    UIView *progress = [[UIView alloc]initWithFrame:CGRectMake(0, 64, CGRectGetWidth(self.view.frame), 3)];</span><br><span class="line">    progress.backgroundColor = [UIColor clearColor];</span><br><span class="line">    [self.view addSubview:progress];</span><br><span class="line">    CALayer *layer = [CALayer layer];</span><br><span class="line">    layer.frame = CGRectMake(0, 0, 0, 3);</span><br><span class="line">    layer.backgroundColor = [UIColor blueColor].CGColor;</span><br><span class="line">    [progress.layer addSublayer:layer];</span><br><span class="line">    self.progresslayer = layer;</span><br><span class="line">    [webView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:_customLabel.text]]];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-调用接口"><a href="#2-调用接口" class="headerlink" title="2.调用接口"></a>2.调用接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[AlipaySDK defaultService]fetchOrderInfoFromH5PayUrl:url]</span><br></pre></td></tr></table></figure><h4 id="3-实现WKUIDelegate协议，拦截H5的URL"><a href="#3-实现WKUIDelegate协议，拦截H5的URL" class="headerlink" title="3.实现WKUIDelegate协议，拦截H5的URL"></a>3.实现WKUIDelegate协议，拦截H5的URL</h4><p>如果返回的resultCode为9000，接入方可以提示用户支付成功；</p><p>返回结果不是9000的情况，无需做任何处理。如果returnUrl不为空，建议接入方跳转到该returnUrl。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction*)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler &#123;</span><br><span class="line"></span><br><span class="line">    decisionHandler(WKNavigationActionPolicyAllow);//允许跳转</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;%@&quot;,navigationAction.request.URL.absoluteString);</span><br><span class="line"></span><br><span class="line">    if ([navigationAction.request.URL.absoluteString hasPrefix:@&quot;alipay://alipayclient/&quot;]) &#123;</span><br><span class="line">        decisionHandler(WKNavigationActionPolicyCancel);</span><br><span class="line"></span><br><span class="line">        if ([[UIApplication sharedApplication] canOpenURL:navigationAction.request.URL]) &#123;</span><br><span class="line">            [[UIApplication sharedApplication] openURL:navigationAction.request.URL options:@&#123;UIApplicationOpenURLOptionUniversalLinksOnly: @NO&#125; completionHandler:^(BOOL success) &#123;</span><br><span class="line"></span><br><span class="line">                __weak APWebViewController* wself = self;</span><br><span class="line">                BOOL isIntercepted = [[AlipaySDK defaultService] payInterceptorWithUrl:[navigationAction.request.URL absoluteString] fromScheme:@&quot;alisdkdemo&quot; callback:^(NSDictionary *result) &#123;</span><br><span class="line">                    // 处理支付结果</span><br><span class="line">                    NSLog(@&quot;%@&quot;, result);</span><br><span class="line">                    // isProcessUrlPay 代表 支付宝已经处理该URL</span><br><span class="line">                    if ([result[@&quot;isProcessUrlPay&quot;] boolValue]) &#123;</span><br><span class="line">                        // returnUrl 代表 第三方App需要跳转的成功页URL</span><br><span class="line">                        NSString* urlStr = result[@&quot;returnUrl&quot;];</span><br><span class="line">                        [wself loadWithUrlStr:urlStr];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;];</span><br><span class="line"></span><br><span class="line">                if (isIntercepted) &#123;</span><br><span class="line"></span><br><span class="line">                    NSLog(@&quot;URL非支付宝支付URL&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        decisionHandler(WKNavigationActionPolicyAllow);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4-支付结果回调处理"><a href="#4-支付结果回调处理" class="headerlink" title="4.支付结果回调处理"></a>4.支付结果回调处理</h4><p>支付宝客户端返回url处理方法，在AppDelegate.m文件中，增加头文件引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;AlipaySDK/AlipaySDK.h&gt;</span><br></pre></td></tr></table></figure></p><p>在@implementation AppDelegate中增加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    //如果极简开发包不可用，会跳转支付宝钱包进行支付，需要将支付宝钱包的支付结果回传给开发包</span><br><span class="line">    if ([url.host isEqualToString:@&quot;safepay&quot;]) &#123;</span><br><span class="line">        [[AlipaySDK defaultService] processOrderWithPaymentResult:url standbyCallback:^(NSDictionary *resultDic) &#123;</span><br><span class="line">    //【由于在跳转支付宝客户端支付的过程中，商户app在后台很可能被系统kill了，所以pay接口的callback就会失效，请商户对standbyCallback返回的回调结果进行处理,就是在这个方法里面处理跟callback一样的逻辑】</span><br><span class="line">            NSLog(@&quot;result = %@&quot;,resultDic);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    if ([url.host isEqualToString:@&quot;platformapi&quot;])&#123;//支付宝钱包快登授权返回authCode</span><br><span class="line"></span><br><span class="line">        [[AlipaySDK defaultService] processAuthResult:url standbyCallback:^(NSDictionary *resultDic) &#123;</span><br><span class="line">            //【由于在跳转支付宝客户端支付的过程中，商户app在后台很可能被系统kill了，所以pay接口的callback就会失效，请商户对standbyCallback返回的回调结果进行处理,就是在这个方法里面处理跟callback一样的逻辑】</span><br><span class="line">            NSLog(@&quot;result = %@&quot;,resultDic);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="公众号：网罗开发"><a href="#公众号：网罗开发" class="headerlink" title="公众号：网罗开发"></a>公众号：网罗开发</h2><p><img src="http://upload-images.jianshu.io/upload_images/2829694-48307b4d71bc5800.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一：介绍&quot;&gt;&lt;a href=&quot;#一：介绍&quot; class=&quot;headerlink&quot; title=&quot;一：介绍&quot;&gt;&lt;/a&gt;一：介绍&lt;/h2&gt;&lt;p&gt;为了节约开发成本，很多Native-H5混合App采用手机网站支付的方式去实现支付模块。但手机网站支付的网络依赖比较严重，也通常需要经过更多的验证，这种种原因导致手机网站支付的成功率比Native支付低，对商户的利益造成影响。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS文集" scheme="https://fanbaoying.github.io/categories/iOS%E6%96%87%E9%9B%86/"/>
    
    
      <category term="iOS" scheme="https://fanbaoying.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Android 使用广播系统解决app开机自启动问题</title>
    <link href="https://fanbaoying.github.io/Android-%E4%BD%BF%E7%94%A8%E5%B9%BF%E6%92%AD%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%86%B3app%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://fanbaoying.github.io/Android-使用广播系统解决app开机自启动问题/</id>
    <published>2018-01-31T04:01:37.000Z</published>
    <updated>2018-01-31T06:20:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/fanbaoying/PowerBoot" target="_blank" rel="noopener">Demo地址</a>  如果有所帮助记得关注，点Star<br>总结一下使用ACTION_BOOT_COMPLETED的广播，解决app开机自启动的问题<br>1.首先在你的工程上建一个广播接受的类，继承BroadcastReceiver：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package guide.example.com.guidedemo;</span><br><span class="line"></span><br><span class="line">import android.content.BroadcastReceiver;</span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.util.Log;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by fby on 2017/6/26.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class BootReceiver extends BroadcastReceiver &#123;</span><br><span class="line">    static final String action_boot =&quot;android.intent.action.BOOT_COMPLETED&quot;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onReceive (Context context, Intent intent) &#123;</span><br><span class="line"></span><br><span class="line">        Log.i(&quot;charge start&quot;, &quot;启动完成&quot;);</span><br><span class="line"></span><br><span class="line">        if (intent.getAction().equals(action_boot))&#123;</span><br><span class="line"></span><br><span class="line">            Intent mBootIntent = new Intent(context, MainActivity.class);</span><br><span class="line">            // 下面这句话必须加上才能开机自动运行app的界面</span><br><span class="line">            mBootIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">            context.startActivity(mBootIntent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.然后要在AndroidManifest.xml中加入权限和配置相关信息：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>3.在application标签中，配置以下相关信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//BootReceiver是上面建的广播类</span><br><span class="line">        &lt;receiver android:name=&quot;.BootReceiver&quot;&gt;  </span><br><span class="line">            &lt;intent-filter&gt;  </span><br><span class="line">                &lt;!--注册开机广播地址--&gt;  </span><br><span class="line">                &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot;&gt;            </span><br><span class="line">                &lt;/action&gt;  </span><br><span class="line"></span><br><span class="line">                &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;  </span><br><span class="line">            &lt;/intent-filter&gt;  </span><br><span class="line">        &lt;/receiver&gt;</span><br></pre></td></tr></table></figure></p><p>补充说明：<br>1.查看系统中是否安装了类似360管家的软件，为了加快开机速度，默认是关闭掉开机广播的，只需要在设置中打开即可。<br>2.如果监听不到广播，可以尝试同时监听广播和sd卡。<br>3.同时监听广播和sd卡，在application标签中，配置以下相关信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;receiver android:name=&quot;.broadcastReceiver.BootCompletedReceiver&quot;&gt;</span><br><span class="line">        &lt;intent-filter&gt;</span><br><span class="line">            &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;category android:name=&quot;android.intent.category.HOME&quot; /&gt;</span><br><span class="line">        &lt;/intent-filter&gt;</span><br><span class="line">        &lt;intent-filter&gt;</span><br><span class="line">            &lt;action android:name=&quot;android.intent.action.PACKAGE_ADDED&quot; /&gt;</span><br><span class="line">            &lt;action android:name=&quot;android.intent.action.PACKAGE_REMOVED&quot; /&gt;</span><br><span class="line">            &lt;action android:name=&quot;android.intent.action.PACKAGE_REPLACED&quot; /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;data android:scheme=&quot;package&quot; /&gt;</span><br><span class="line">        &lt;/intent-filter&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/receiver&gt;</span><br></pre></td></tr></table></figure></p><h2 id="公众号：网罗开发"><a href="#公众号：网罗开发" class="headerlink" title="公众号：网罗开发"></a>公众号：网罗开发</h2><p><img src="http://upload-images.jianshu.io/upload_images/2829694-48307b4d71bc5800.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/fanbaoying/PowerBoot&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Demo地址&lt;/a&gt;  如果有所帮助记得关注，点Star&lt;br&gt;总结一下使用ACTION_BOOT_COMPLETED的广播，解决app开机自启动的问题&lt;br&gt;1.首先在你的工程上建一个广播接受的类，继承BroadcastReceiver：&lt;/p&gt;
    
    </summary>
    
      <category term="Android文集" scheme="https://fanbaoying.github.io/categories/Android%E6%96%87%E9%9B%86/"/>
    
    
      <category term="Android" scheme="https://fanbaoying.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>码出一个高颜值原生折线图</title>
    <link href="https://fanbaoying.github.io/%E7%A0%81%E5%87%BA%E4%B8%80%E4%B8%AA%E9%AB%98%E9%A2%9C%E5%80%BC%E5%8E%9F%E7%94%9F%E6%8A%98%E7%BA%BF%E5%9B%BE/"/>
    <id>https://fanbaoying.github.io/码出一个高颜值原生折线图/</id>
    <published>2018-01-31T02:34:30.000Z</published>
    <updated>2018-01-31T06:19:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一：介绍"><a href="#一：介绍" class="headerlink" title="一：介绍"></a>一：介绍</h2><p>在项目中遇到数据展示需求时，往往会通过，以列表的形式展示出数据或者以表格的形式展示。但是并不能直观的观察数据的变化，如果通过图表的形式来展示，就可以更快捷的获取到数据变化情况。</p><p>图表展示的方式大致分为折线图、柱状图、饼状图等等，那么如何码出一个高颜值原生折线图呢？<a href="https://github.com/fanbaoying/FBYDataDisplay-iOS" target="_blank" rel="noopener">demo源码</a>已经放在GitHub上，下面来介绍一下如何使用。</p><a id="more"></a><h2 id="二：项目展示"><a href="#二：项目展示" class="headerlink" title="二：项目展示"></a>二：项目展示</h2><p>运行后的展示截图如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-412e7b8951ec0bf5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="三：-实现思路分析"><a href="#三：-实现思路分析" class="headerlink" title="三： 实现思路分析"></a>三： 实现思路分析</h2><p>实现折线图的核心代码是下面四个类：</p><ul><li>FBYLineGraphBaseView</li><li>FBYLineGraphContentView</li><li>FBYLineGraphColorView</li><li>FBYLineGraphView<br>下面针对这四个类实现做一个详细的流程分析。</li></ul><h4 id="1-折线图基础框架实现-FBYLineGraphBaseView类"><a href="#1-折线图基础框架实现-FBYLineGraphBaseView类" class="headerlink" title="1. 折线图基础框架实现(FBYLineGraphBaseView类)"></a>1. 折线图基础框架实现(FBYLineGraphBaseView类)</h4><p>折线图基础框架包括Y轴刻度标签、X轴刻度标签、与x轴平行的网格线的间距、网格线的起始点、x 轴长度、y 轴长度，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line"></span><br><span class="line">@interface FBYLineGraphBaseView : UIView</span><br><span class="line"></span><br><span class="line">//Y轴刻度标签</span><br><span class="line">@property (nonatomic, strong) NSArray *yMarkTitles;</span><br><span class="line"></span><br><span class="line">//X轴刻度标签</span><br><span class="line">@property (nonatomic, strong) NSArray *xMarkTitles;</span><br><span class="line"></span><br><span class="line">// 与x轴平行的网格线的间距</span><br><span class="line">@property (nonatomic, assign) CGFloat xScaleMarkLEN;</span><br><span class="line"></span><br><span class="line">//网格线的起始点</span><br><span class="line">@property (nonatomic, assign) CGPoint startPoint;</span><br><span class="line"></span><br><span class="line">//x 轴长度</span><br><span class="line">@property (nonatomic, assign) CGFloat yAxis_L;</span><br><span class="line"></span><br><span class="line">//y 轴长度</span><br><span class="line">@property (nonatomic, assign) CGFloat xAxis_L;</span><br><span class="line"></span><br><span class="line">//绘图</span><br><span class="line">- (void)mapping;</span><br><span class="line"></span><br><span class="line">//更新做标注数据</span><br><span class="line">- (void)reloadDatas;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h4 id="2-折线图数据内容显示-FBYLineGraphContentView类"><a href="#2-折线图数据内容显示-FBYLineGraphContentView类" class="headerlink" title="2. 折线图数据内容显示(FBYLineGraphContentView类)"></a>2. 折线图数据内容显示(FBYLineGraphContentView类)</h4><p>折线图数据内容显示是继承FBYLineGraphBaseView类进行实现，其中主要包括，X轴最大值、数据内容来实现，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line">#import &quot;FBYLineGraphBaseView.h&quot;</span><br><span class="line">@interface FBYLineGraphContentView : FBYLineGraphBaseView</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) NSArray *valueArray;</span><br><span class="line">@property (nonatomic, assign) CGFloat maxValue;</span><br><span class="line"></span><br><span class="line">//绘图</span><br><span class="line">- (void)mapping;</span><br><span class="line"></span><br><span class="line">//更新折线图数据</span><br><span class="line">- (void)reloadDatas;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><h4 id="3-折线图颜色控制类-FBYLineGraphColorView类"><a href="#3-折线图颜色控制类-FBYLineGraphColorView类" class="headerlink" title="3. 折线图颜色控制类(FBYLineGraphColorView类)"></a>3. 折线图颜色控制类(FBYLineGraphColorView类)</h4><p>折线图颜色控制类主要控制选中远点边框宽度和整体布局颜色，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line"></span><br><span class="line">@interface FBYLineGraphColorView : UIView</span><br><span class="line"></span><br><span class="line">//颜色设置</span><br><span class="line">@property (nonatomic, assign) CGFloat borderWidth;</span><br><span class="line">@property (nonatomic, assign) UIColor *borderColor;</span><br><span class="line"></span><br><span class="line">- (instancetype)initWithCenter:(CGPoint)center radius:(CGFloat)radius;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><h4 id="3-折线图核心代码类-FBYLineGraphView类"><a href="#3-折线图核心代码类-FBYLineGraphView类" class="headerlink" title="3. 折线图核心代码类(FBYLineGraphView类)"></a>3. 折线图核心代码类(FBYLineGraphView类)</h4><p>折线图核心代码类主要给引用类提供配置接口和数据接口，其中包括表名、Y轴刻度标签title、Y轴最大值、X轴刻度标签的长度（单位长度）、设置折线图显示的数据和对应X坐标轴刻度标签，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line"></span><br><span class="line">@interface FBYLineGraphView : UIView</span><br><span class="line"></span><br><span class="line">//表名</span><br><span class="line">@property (nonatomic, strong) NSString *title;</span><br><span class="line"></span><br><span class="line">//Y轴刻度标签title</span><br><span class="line">@property (nonatomic, strong) NSArray *yMarkTitles;</span><br><span class="line"></span><br><span class="line">//Y轴最大值</span><br><span class="line">@property (nonatomic, assign) CGFloat maxValue;</span><br><span class="line"></span><br><span class="line">//X轴刻度标签的长度（单位长度）</span><br><span class="line">@property (nonatomic, assign) CGFloat xScaleMarkLEN;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  设置折线图显示的数据和对应X坐标轴刻度标签</span><br><span class="line"> *</span><br><span class="line"> *  @param xMarkTitlesAndValues 折线图显示的数据和X坐标轴刻度标签</span><br><span class="line"> *  @param titleKey             标签（如:9月1日）</span><br><span class="line"> *  @param valueKey             数据 (如:80)</span><br><span class="line"> */</span><br><span class="line">- (void)setXMarkTitlesAndValues:(NSArray *)xMarkTitlesAndValues titleKey:(NSString *)titleKey valueKey:(NSString *)valueKey;</span><br><span class="line"></span><br><span class="line">- (void)mapping;</span><br><span class="line">- (void)reloadDatas;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h2 id="四：如何在项目中使用"><a href="#四：如何在项目中使用" class="headerlink" title="四：如何在项目中使用"></a>四：如何在项目中使用</h2><h4 id="1-下载源码"><a href="#1-下载源码" class="headerlink" title="1. 下载源码"></a>1. 下载源码</h4><p>在demo中找到FBYLineGraph文件夹，将文件夹拖入自己的项目中。DEMO截图</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-ac73ffe325cbacb7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="B0375CE3-F420-4E36-842F-6491EA0047F9.png"></p><h4 id="2-代码引用"><a href="#2-代码引用" class="headerlink" title="2. 代码引用"></a>2. 代码引用</h4><p>2.1 首先在项目中需要使用的页面引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;FBYLineGraphView.h&quot;</span><br></pre></td></tr></table></figure><p>2.2 初始化折线图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FBYLineGraphView *LineGraphView = [[FBYLineGraphView alloc] initWithFrame:CGRectMake(10, 100, SCREEN_WIDTH - 20, 220)];</span><br></pre></td></tr></table></figure><p>2.3 设置折线图属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LineGraphView.title = @&quot;折线统计图&quot;; // 折线图名称</span><br><span class="line">LineGraphView.maxValue = 100;   // 最大值</span><br><span class="line">LineGraphView.xScaleMarkLEN = 60; // 每格的宽度如果不设置，系统默认平均分配</span><br></pre></td></tr></table></figure><p>2.4 给折线图添加内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LineGraphView.yMarkTitles = @[@&quot;0&quot;,@&quot;20&quot;,@&quot;40&quot;,@&quot;60&quot;,@&quot;80&quot;,@&quot;100&quot;]; // Y轴刻度标签</span><br><span class="line"></span><br><span class="line">[LineGraphView setXMarkTitlesAndValues:@[@&#123;@&quot;item&quot;:@&quot;1月1日&quot;,@&quot;count&quot;:@10&#125;,@&#123;@&quot;item&quot;:@&quot;1月2日&quot;,@&quot;count&quot;:@80&#125;,@&#123;@&quot;item&quot;:@&quot;1月3日&quot;,@&quot;count&quot;:@68&#125;,@&#123;@&quot;item&quot;:@&quot;1月4日&quot;,@&quot;count&quot;:@100&#125;,@&#123;@&quot;item&quot;:@&quot;1月5日&quot;,@&quot;count&quot;:@60&#125;,@&#123;@&quot;item&quot;:@&quot;1月6日&quot;,@&quot;count&quot;:@56&#125;,@&#123;@&quot;item&quot;:@&quot;1月7日&quot;,@&quot;count&quot;:@11&#125;] titleKey:@&quot;item&quot; valueKey:@&quot;count&quot;]; // X轴刻度标签及相应的值</span><br></pre></td></tr></table></figure><p>可以根据自己项目获取的数据进行修改，不过数据格式不要改动。</p><p>2.5 设置完数据和属性，绘制展示折线图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//设置完数据等属性后绘图折线图</span><br><span class="line">[LineGraphView mapping];</span><br><span class="line">[self.view addSubview:LineGraphView];</span><br></pre></td></tr></table></figure><p>设置完上面的，一个高颜值原生折线统计图就可以使用了。<br>如果好用就请点赞关注，会不定期更新更多干货。更多源码可以去GitHub下载。</p><h2 id="公众号：网罗开发"><a href="#公众号：网罗开发" class="headerlink" title="公众号：网罗开发"></a>公众号：网罗开发</h2><p><img src="http://upload-images.jianshu.io/upload_images/2829694-48307b4d71bc5800.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一：介绍&quot;&gt;&lt;a href=&quot;#一：介绍&quot; class=&quot;headerlink&quot; title=&quot;一：介绍&quot;&gt;&lt;/a&gt;一：介绍&lt;/h2&gt;&lt;p&gt;在项目中遇到数据展示需求时，往往会通过，以列表的形式展示出数据或者以表格的形式展示。但是并不能直观的观察数据的变化，如果通过图表的形式来展示，就可以更快捷的获取到数据变化情况。&lt;/p&gt;
&lt;p&gt;图表展示的方式大致分为折线图、柱状图、饼状图等等，那么如何码出一个高颜值原生折线图呢？&lt;a href=&quot;https://github.com/fanbaoying/FBYDataDisplay-iOS&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;demo源码&lt;/a&gt;已经放在GitHub上，下面来介绍一下如何使用。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS文集" scheme="https://fanbaoying.github.io/categories/iOS%E6%96%87%E9%9B%86/"/>
    
    
      <category term="iOS" scheme="https://fanbaoying.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>FMDB | 实现数据的增删改查</title>
    <link href="https://fanbaoying.github.io/FMDB-%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>https://fanbaoying.github.io/FMDB-实现数据的增删改查/</id>
    <published>2018-01-30T06:50:04.000Z</published>
    <updated>2018-01-31T06:20:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一：介绍"><a href="#一：介绍" class="headerlink" title="一：介绍"></a>一：介绍</h2><p><a href="https://github.com/ccgus/fmdb" target="_blank" rel="noopener">FMDB</a>是一个轻量级的数据库，用于将网络资源存储在本地。<br>项目中使用 ARC 还是 MRC，对使用 FMDB 都没有任何影响，FMDB 会在编译项目时自动匹配。<br>FMDB 将 SQLite API 进行了很友好的封装，使用起来非常方便。</p><p>下面是对FMDB的使用总结，分享给大家，另外附一份<a href="https://github.com/fanbaoying/FBYFMDBDemo" target="_blank" rel="noopener">demo</a>供大家参考。</p><a id="more"></a><h2 id="二：FMDB优点"><a href="#二：FMDB优点" class="headerlink" title="二：FMDB优点"></a>二：FMDB优点</h2><ul><li><p>1.使用起来更加面向对象，省去了很多麻烦、冗余的C语言代码</p></li><li><p>2.对比苹果自带的Core Data框架，更加轻量级和灵活</p></li><li><p>3.提供了多线程安全的数据库操作方法，有效地防止数据混乱</p></li></ul><h2 id="三：将FMDB第三方库引入到项目"><a href="#三：将FMDB第三方库引入到项目" class="headerlink" title="三：将FMDB第三方库引入到项目"></a>三：将FMDB第三方库引入到项目</h2><p>下载<a href="https://github.com/ccgus/fmdb" target="_blank" rel="noopener">FMDB</a>库文件，demo中是直接导入项目中，可直接下载demo引用库文件，也可以使用CocoaPods导入。</p><blockquote><p>注意：需要 libsqlite3.dylib 依赖（具体流程 Project-&gt;TARGETS-&gt;Build Phases-&gt;Link Binary With Libraries,然后点击＋号引用该动态库）</p></blockquote><h2 id="四：FMDB主要的核心类"><a href="#四：FMDB主要的核心类" class="headerlink" title="四：FMDB主要的核心类"></a>四：FMDB主要的核心类</h2><h4 id="4-1-FMDatabase"><a href="#4-1-FMDatabase" class="headerlink" title="4.1 FMDatabase"></a>4.1 FMDatabase</h4><p>一个FMDatabase对象就代表一个单独的SQLite数据库，用来执行SQL语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//1.获得数据库文件的路径</span><br><span class="line">NSString *doc=[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];</span><br><span class="line">NSString *fileName=[doc stringByAppendingPathComponent:@&quot;userData.sqlite&quot;];</span><br><span class="line">self.dbPath = fileName;</span><br><span class="line">//2.获得数据库</span><br><span class="line">FMDatabase *db=[FMDatabase databaseWithPath:self.dbPath];</span><br></pre></td></tr></table></figure><h4 id="4-2-FMResultSet"><a href="#4-2-FMResultSet" class="headerlink" title="4.2 FMResultSet"></a>4.2 FMResultSet</h4><p>使用FMResultSet执行查询后的结果集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 1.执行查询语句</span><br><span class="line">FMResultSet *resultSet = [self.db executeQuery:@&quot;SELECT * FROM t_userData&quot;];</span><br><span class="line"></span><br><span class="line">// 2.遍历结果</span><br><span class="line">while ([resultSet next]) &#123;</span><br><span class="line"></span><br><span class="line">    NSString *nameStr = [resultSet stringForColumn:@&quot;userName&quot;];</span><br><span class="line">    [self.nameArr addObject:nameStr];</span><br><span class="line"></span><br><span class="line">    NSString *ageStr = [resultSet stringForColumn:@&quot;userAge&quot;];</span><br><span class="line">    [self.ageArr addObject:ageStr];</span><br><span class="line"></span><br><span class="line">    NSString *idStr = [resultSet stringForColumn:@&quot;id&quot;];</span><br><span class="line">    [self.idArr addObject:idStr];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-FMDatabaseQueue"><a href="#4-3-FMDatabaseQueue" class="headerlink" title="4.3 FMDatabaseQueue"></a>4.3 FMDatabaseQueue</h4><p>FMDatabaseQueue是在多线程下查询和更新数据库用到的类</p><h2 id="五：使用FMDB进行增删改查"><a href="#五：使用FMDB进行增删改查" class="headerlink" title="五：使用FMDB进行增删改查"></a>五：使用FMDB进行增删改查</h2><p>通常对数据库的操作，我们一般称为CURD,即对表进行创建(Create)、更新(Update)、读取(Read)和删除(Delete)操作。</p><h4 id="5-1-数据类型分析"><a href="#5-1-数据类型分析" class="headerlink" title="5.1 数据类型分析"></a>5.1 数据类型分析</h4><p>对数据库中存储的每一个值都有一个类型</p><ul><li>NULL 这个值为空值</li><li>INTEGER 值被标识为整数，依据值的大小可以依次被存储1～8个字节</li><li>REAL 所有值都是浮动的数值</li><li>TEXT 值为文本字符串</li><li>BLOB 值为blob数据</li></ul><h4 id="5-2-FMDB库文件使用"><a href="#5-2-FMDB库文件使用" class="headerlink" title="5.2 FMDB库文件使用"></a>5.2 FMDB库文件使用</h4><p>1.引入头文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;FMDB.h&quot;</span><br></pre></td></tr></table></figure><p>2.定义属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@interface viewController ()</span><br><span class="line">@property(nonatomic,strong)FMDatabase *db;</span><br><span class="line"></span><br><span class="line">@property(strong,nonatomic)NSString * dbPath;</span><br><span class="line"></span><br><span class="line">@property(strong,nonatomic)UITextField *nameTxteField;</span><br><span class="line">@property(strong,nonatomic)UITextField *ageTxteField;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>3.获取数据库文件路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获得数据库文件的路径</span><br><span class="line">NSString *doc=[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];</span><br><span class="line">NSString *fileName=[doc stringByAppendingPathComponent:@&quot;userData.sqlite&quot;];</span><br><span class="line">self.dbPath = fileName;</span><br></pre></td></tr></table></figure><p>4.建表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//2.获得数据库</span><br><span class="line">FMDatabase *db=[FMDatabase databaseWithPath:self.dbPath];</span><br><span class="line">//3.打开数据库</span><br><span class="line">if ([db open]) &#123;</span><br><span class="line">    //4.创表</span><br><span class="line">    BOOL result=[db executeUpdate:@&quot;CREATE TABLE IF NOT EXISTS t_userData (id integer PRIMARY KEY AUTOINCREMENT, userName text NOT NULL, userAge text NOT NULL);&quot;];</span><br><span class="line">    if (result)&#123;</span><br><span class="line">        NSLog(@&quot;创表成功&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        NSLog(@&quot;创表失败&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">self.db=db;</span><br><span class="line"></span><br><span class="line">[self insert];</span><br></pre></td></tr></table></figure><h4 id="5-3-新增数据"><a href="#5-3-新增数据" class="headerlink" title="5.3 新增数据"></a>5.3 新增数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//新增数据</span><br><span class="line">-(void)insert&#123;</span><br><span class="line">    BOOL res = [self.db executeUpdate:@&quot;INSERT INTO t_userData (userName, userAge) VALUES (?, ?);&quot;, _nameTxteField.text, _ageTxteField.text];</span><br><span class="line"></span><br><span class="line">    if (!res) &#123;</span><br><span class="line">        NSLog(@&quot;增加数据失败&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        NSLog(@&quot;增加数据成功&quot;);</span><br><span class="line"></span><br><span class="line">        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@&quot;提示&quot; message:@&quot;新增数据成功&quot; preferredStyle:UIAlertControllerStyleAlert];</span><br><span class="line">        [self presentViewController:alert animated:YES completion:nil];</span><br><span class="line">        [self performSelector:@selector(dismiss:) withObject:alert afterDelay:0.5];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/2829694-16c71ca322a2b65f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="81.png"></p><h4 id="5-4-删除数据"><a href="#5-4-删除数据" class="headerlink" title="5.4 删除数据"></a>5.4 删除数据</h4><p>删除数据分为删除一条数据和删除整表数据</p><ol><li>删除一条数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 删除一条数据</span><br><span class="line">- (void)deleteData:(NSInteger)userid&#123;</span><br><span class="line">    //1.获得数据库文件的路径</span><br><span class="line">    NSString *doc=[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];</span><br><span class="line">    NSString *fileName=[doc stringByAppendingPathComponent:@&quot;userData.sqlite&quot;];</span><br><span class="line"></span><br><span class="line">    //2.获得数据库</span><br><span class="line">    FMDatabase *db = [FMDatabase databaseWithPath:fileName];</span><br><span class="line">    if ([db open]) &#123;</span><br><span class="line"></span><br><span class="line">        NSString *str = [NSString stringWithFormat:@&quot;DELETE FROM t_userData WHERE id = %ld&quot;,userid];</span><br><span class="line">        BOOL res = [db executeUpdate:str];</span><br><span class="line">        if (!res) &#123;</span><br><span class="line">            NSLog(@&quot;数据删除失败&quot;);</span><br><span class="line">            [self lookData];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            NSLog(@&quot;数据删除成功&quot;);</span><br><span class="line">            [self lookData];</span><br><span class="line">        &#125;</span><br><span class="line">        [db close];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.删除整表数据</p><p>删除整表数据只需要将删除一条数据的语句更换为如下语句即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSString *str = @&quot;DELETE FROM t_userData&quot;;</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/2829694-69882fd7bdce9017.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="84.png"></p><h4 id="5-5-修改数据"><a href="#5-5-修改数据" class="headerlink" title="5.5 修改数据"></a>5.5 修改数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 更新数据</span><br><span class="line">- (void)updateData &#123;</span><br><span class="line">    //获得数据库文件的路径</span><br><span class="line">    NSString *doc=[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];</span><br><span class="line">    NSString *fileName=[doc stringByAppendingPathComponent:@&quot;userData.sqlite&quot;];</span><br><span class="line">    self.dbPath = fileName;</span><br><span class="line"></span><br><span class="line">    FMDatabase *db = [FMDatabase databaseWithPath:self.dbPath];</span><br><span class="line">    if ([db open]) &#123;</span><br><span class="line">        NSString *sql = @&quot;UPDATE t_userData SET userName = ? , userAge = ? WHERE id = ?&quot;;</span><br><span class="line">        BOOL res = [db executeUpdate:sql,_nameTxteField.text,_ageTxteField.text,_userId];</span><br><span class="line">        if (!res) &#123;</span><br><span class="line">            NSLog(@&quot;数据修改失败&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            NSLog(@&quot;数据修改成功&quot;);</span><br><span class="line"></span><br><span class="line">            UIAlertController *alert = [UIAlertController alertControllerWithTitle:@&quot;提示&quot; message:@&quot;数据修改成功&quot; preferredStyle:UIAlertControllerStyleAlert];</span><br><span class="line">            [self presentViewController:alert animated:YES completion:nil];</span><br><span class="line">            [self performSelector:@selector(dismiss:) withObject:alert afterDelay:1.0];</span><br><span class="line">        &#125;</span><br><span class="line">        [db close];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/2829694-a7fb5e676e437a20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="82.png"></p><h4 id="5-6-查询数据"><a href="#5-6-查询数据" class="headerlink" title="5.6 查询数据"></a>5.6 查询数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//查询数据</span><br><span class="line">- (void)lookData &#123;</span><br><span class="line"></span><br><span class="line">    //1.获得数据库文件的路径</span><br><span class="line">    NSString *doc=[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];</span><br><span class="line">    NSString *fileName=[doc stringByAppendingPathComponent:@&quot;userData.sqlite&quot;];</span><br><span class="line"></span><br><span class="line">    //2.获得数据库</span><br><span class="line">    FMDatabase *db=[FMDatabase databaseWithPath:fileName];</span><br><span class="line"></span><br><span class="line">    //3.打开数据库</span><br><span class="line">    if ([db open]) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    self.db=db;</span><br><span class="line"></span><br><span class="line">    // 1.执行查询语句</span><br><span class="line">    FMResultSet *resultSet = [self.db executeQuery:@&quot;SELECT * FROM t_userData&quot;];</span><br><span class="line"></span><br><span class="line">    // 2.遍历结果</span><br><span class="line">    while ([resultSet next]) &#123;</span><br><span class="line"></span><br><span class="line">        NSString *nameStr = [resultSet stringForColumn:@&quot;userName&quot;];</span><br><span class="line">        [self.nameArr addObject:nameStr];</span><br><span class="line">        NSString *ageStr = [resultSet stringForColumn:@&quot;userAge&quot;];</span><br><span class="line">        [self.ageArr addObject:ageStr];</span><br><span class="line">        NSString *idStr = [resultSet stringForColumn:@&quot;id&quot;];</span><br><span class="line">        [self.idArr addObject:idStr];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [self.myTableView reloadData];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/2829694-7120f1885f2c7aa8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="83.png"></p><blockquote><p>希望可以帮助大家，如有问题可加QQ技术交流群: 668562416</p><p>如果哪里有什么不对或者不足的地方，还望读者多多提意见或建议</p><p>如需转载请联系我，经过授权方可转载，谢谢</p></blockquote><h2 id="公众号：网罗开发"><a href="#公众号：网罗开发" class="headerlink" title="公众号：网罗开发"></a>公众号：网罗开发</h2><p><img src="http://upload-images.jianshu.io/upload_images/2829694-48307b4d71bc5800.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一：介绍&quot;&gt;&lt;a href=&quot;#一：介绍&quot; class=&quot;headerlink&quot; title=&quot;一：介绍&quot;&gt;&lt;/a&gt;一：介绍&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ccgus/fmdb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FMDB&lt;/a&gt;是一个轻量级的数据库，用于将网络资源存储在本地。&lt;br&gt;项目中使用 ARC 还是 MRC，对使用 FMDB 都没有任何影响，FMDB 会在编译项目时自动匹配。&lt;br&gt;FMDB 将 SQLite API 进行了很友好的封装，使用起来非常方便。&lt;/p&gt;
&lt;p&gt;下面是对FMDB的使用总结，分享给大家，另外附一份&lt;a href=&quot;https://github.com/fanbaoying/FBYFMDBDemo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;demo&lt;/a&gt;供大家参考。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS文集" scheme="https://fanbaoying.github.io/categories/iOS%E6%96%87%E9%9B%86/"/>
    
    
      <category term="iOS" scheme="https://fanbaoying.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Android 支付宝支付开发流程</title>
    <link href="https://fanbaoying.github.io/Android-%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
    <id>https://fanbaoying.github.io/Android-支付宝支付开发流程/</id>
    <published>2018-01-26T09:03:46.000Z</published>
    <updated>2018-01-31T06:20:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一：介绍"><a href="#一：介绍" class="headerlink" title="一：介绍"></a>一：介绍</h2><p>项目中要用到支付功能，需要支付宝支付、微信支付、银联支付，所以打算总结一下，方便以后的查阅，也方便大家， 用到的地方避免再次被坑。<br>今天我们就主要介绍一下支付宝支付，其他支付也给出了对应的连接。</p><p>在做支付之前，在网上也查寻了资料，大多都说，支付接入坑太多，微信坑最多，银联文档太复杂。<br>其实如果接入的多的话，那些套路都可以绕着走。<br>网上的经验什么的大都是比较老的，比较新的能用到的文章不多（但是好文章还是有的，对我帮助也很大），下面给大家详细介绍一下，帮助大家绕开坑。</p><a id="more"></a><h2 id="二：交互流程"><a href="#二：交互流程" class="headerlink" title="二：交互流程"></a>二：交互流程</h2><p>建议先把开发文档仔仔细细看一遍，一定要看，刚开始的时候没有老老实实地看完，结果遇到很多的坑，浪费的挺多的时间的，所以建议一定要好好看看，特别是<a href="https://doc.open.alipay.com/doc2/detail?spm=0.0.0.0.w6njr9&amp;treeId=59&amp;articleId=103658&amp;docType=1" target="_blank" rel="noopener">交互流程</a>这一部分。</p><h3 id="2-1-功能流程"><a href="#2-1-功能流程" class="headerlink" title="2.1 功能流程"></a>2.1 功能流程</h3><p><img src="http://upload-images.jianshu.io/upload_images/2829694-2289d8431d73ccc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="功能流程图"></p><p>1.第4步：调用支付接口：此消息就是本接口所描述的开发包提供的支付对象PayTask，将商户签名后的订单信息传进pay方法唤起支付宝收银台，订单格式具体参见“<a href="https://doc.open.alipay.com/doc2/detail?treeId=59&amp;articleId=103663&amp;docType=1" target="_blank" rel="noopener">请求参数说明</a>”。<br>2.第5步：支付请求：手机支付宝支付开发包将会按照商户客户端提供的请求参数发送支付请求。<br>3.第8步：接口返回支付结果：商户客户端在第4步中调用的支付接口，会返回最终的支付结果（即同步通知），参见“<a href="https://doc.open.alipay.com/doc2/detail?treeId=59&amp;articleId=103665&amp;docType=1" target="_blank" rel="noopener">同步通知参数说明</a>”。<br>4.第12步：异步发送支付通知：手机支付宝支付服务器端发送异步通知消息给商户服务器端（备注：第12步一定发生在第6步之后，但不一定晚于7~11步），参见“<a href="https://doc.open.alipay.com/doc2/detail?treeId=59&amp;articleId=103666&amp;docType=1" target="_blank" rel="noopener">服务器异步通知参数说明</a>”。</p><h3 id="2-2-数据交互"><a href="#2-2-数据交互" class="headerlink" title="2.2 数据交互"></a>2.2 数据交互</h3><p><img src="http://upload-images.jianshu.io/upload_images/2829694-d9530794cede63a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据交互图"></p><p>支付宝支付的功能流程相比较微信支付来说简单的很，如上面两张图展示的，我们的App（也就是商户客户端）所做的大概只有三个步骤：</p><blockquote><p>生成订单<br>调用支付宝接口，发送订单<br>返回订单支付结果并处理</p></blockquote><h2 id="三：下载支付宝SDK"><a href="#三：下载支付宝SDK" class="headerlink" title="三：下载支付宝SDK"></a>三：下载支付宝SDK</h2><p>支付宝业务众多，真想找到想要的支付sdk还是要费一番功夫的，这里给出了<a href="https://docs.open.alipay.com/54/104509" target="_blank" rel="noopener">最新的sdk地址</a>（注意的是下载出来的SDK包里面并没有传说中的开发文档，需要其他地方找或者看网页上的）。</p><p>想要接入支付宝移动支付功能，必须在<a href="https://b.alipay.com/order/productDetail.htm?productId=2015110218010538" target="_blank" rel="noopener">支付宝商家服务平台</a>进行申请与审核。移动支付功能需要企业或者个体工商户进行申请，审核通过之后方可使用。<br>如何与支付宝签约并审核请参考官方文档：<a href="https://doc.open.alipay.com/doc2/detail.htm?spm=a219a.7629140.0.0.vCcVse&amp;treeId=58&amp;articleId=103541&amp;docType=1" target="_blank" rel="noopener">移动支付-接入指南</a>，里面详细介绍了产品签约与审核流程。并且详细介绍了申请成功之后如何查看或生成必要的一些配置参数。</p><h2 id="四：导入开发SDK"><a href="#四：导入开发SDK" class="headerlink" title="四：导入开发SDK"></a>四：导入开发SDK</h2><h3 id="4-1-如果项目开发使用的Eclipse软件，导入步骤如下："><a href="#4-1-如果项目开发使用的Eclipse软件，导入步骤如下：" class="headerlink" title="4.1 如果项目开发使用的Eclipse软件，导入步骤如下："></a>4.1 如果项目开发使用的Eclipse软件，导入步骤如下：</h3><p>1.将alipaySDK-20150602.jar包放入商户应用工程的libs目录下，如下图。</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-476f6522c171e913.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="101.png"></p><p>2.进入商户应用工程的Java Build Path，将libs目录下的alipaySDK-20150602.jar导入，如下图。</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-ccfa9544fe4b220c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="102.png"></p><p>3.选中Order and Export，勾选alipaySDK-20150602.jar，如下图。</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-0c910c91d821c5b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="103.png"></p><h3 id="4-2-如果项目开发使用的Android-Studio软件，导入步骤如下："><a href="#4-2-如果项目开发使用的Android-Studio软件，导入步骤如下：" class="headerlink" title="4.2 如果项目开发使用的Android Studio软件，导入步骤如下："></a>4.2 如果项目开发使用的Android Studio软件，导入步骤如下：</h3><p>1.将支付宝SDK拷贝到项目libs文件夹下，如果没有libs文件夹，就新建一个。</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-4988e8029e6d45d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="201.png"></p><p>2.如果sdk使用过程中，提示找不到文件。<br>进行如下操作，选中sdk文件，右击选择Reveal in Finder</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-6fa0ae70ea65bc53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="202.png"></p><h2 id="五：修改AndroidManifest-xml配置"><a href="#五：修改AndroidManifest-xml配置" class="headerlink" title="五：修改AndroidManifest.xml配置"></a>五：修改AndroidManifest.xml配置</h2><p>1.在商户应用工程的AndroidManifest.xml文件里面添加声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">            android:name=&quot;com.alipay.sdk.app.H5PayActivity&quot;</span><br><span class="line">            android:configChanges=&quot;orientation|keyboardHidden|navigation&quot;</span><br><span class="line">            android:exported=&quot;false&quot;</span><br><span class="line">            android:screenOrientation=&quot;behind&quot; &gt;</span><br><span class="line">&lt;/activity&gt;</span><br><span class="line">&lt;activity</span><br><span class="line">            android:name=&quot;com.alipay.sdk.auth.AuthActivity&quot;</span><br><span class="line">            android:configChanges=&quot;orientation|keyboardHidden|navigation&quot;</span><br><span class="line">            android:exported=&quot;false&quot;</span><br><span class="line">            android:screenOrientation=&quot;behind&quot; &gt;</span><br><span class="line"> &lt;/activity&gt;</span><br></pre></td></tr></table></figure><p>和权限声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;</span><br></pre></td></tr></table></figure><h2 id="六：添加混淆规则"><a href="#六：添加混淆规则" class="headerlink" title="六：添加混淆规则"></a>六：添加混淆规则</h2><p>在商户应用工程的proguard-project.txt里添加以下相关规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-libraryjars libs/alipaySDK-20150602.jar</span><br><span class="line"></span><br><span class="line">-keep class com.alipay.android.app.IAlixPay&#123;*;&#125;</span><br><span class="line">-keep class com.alipay.android.app.IAlixPay$Stub&#123;*;&#125;</span><br><span class="line">-keep class com.alipay.android.app.IRemoteServiceCallback&#123;*;&#125;</span><br><span class="line">-keep class com.alipay.android.app.IRemoteServiceCallback$Stub&#123;*;&#125;</span><br><span class="line">-keep class com.alipay.sdk.app.PayTask&#123; public *;&#125;</span><br><span class="line">-keep class com.alipay.sdk.app.AuthTask&#123; public *;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第一行中的alipaySDK-20150602.jar，其中20150602是此版本发布的日期，注意将其修改为你导入的Jar的相应的文件名。</p></blockquote><p>到这里，支付宝支付的前期配置已经完成，下面需要完成支付代码编写。</p><h2 id="七：支付接口调用"><a href="#七：支付接口调用" class="headerlink" title="七：支付接口调用"></a>七：支付接口调用</h2><ol><li>在点击支付按钮的点击事件中，我提供的是从后端获取订单字符串，然后调用支付宝接口，调起支付。</li><li>需要在新线程中调用支付接口。代码如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//    支付按钮</span><br><span class="line">    public void onClick(View view) &#123;</span><br><span class="line">        //起一个线程</span><br><span class="line">        Runnable payRunnable = new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                String data = null;</span><br><span class="line">                PayBean payBean = new PayBean();</span><br><span class="line">                payBean.setOrderTime(&quot;&quot;);</span><br><span class="line">                String json = new Gson().toJson(payBean);</span><br><span class="line">                //json为获取后端结果时需要提供给后端订单信息，例如：时间、金额、订单属性等</span><br><span class="line">                Log.i(&quot;charge request&quot;, json);</span><br><span class="line">                try &#123;</span><br><span class="line">                    //data为后端返回数据，其中包括订单字符串</span><br><span class="line">                    data = postJson(CHARGE_URL, json);</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                // Json解析data</span><br><span class="line">                ChargeBean charge = new Gson().fromJson(data, ChargeBean.class);</span><br><span class="line">                //获取调起支付所需要的字符串credential</span><br><span class="line">                String credential = (String) charge.getResult().getCredential();</span><br><span class="line">                // 调起支付界面</span><br><span class="line">                PayTask alipay = new PayTask(ThirdActivity.this);</span><br><span class="line">                Map&lt;String, String&gt; result = alipay.payV2(credential, true);</span><br><span class="line">                //在mHandler中处理支付宝返回结果</span><br><span class="line">                Message msg = new Message();</span><br><span class="line">                msg.what = SDK_PAY_FLAG;</span><br><span class="line">                msg.obj = result;</span><br><span class="line">                mHandler.sendMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        // 必须异步调用</span><br><span class="line">        Thread payThread = new Thread(payRunnable);</span><br><span class="line">        payThread.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li>在mHandler中处理支付结果</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">private Handler mHandler = new Handler() &#123;</span><br><span class="line"></span><br><span class="line">        public void handleMessage(Message msg) &#123;</span><br><span class="line">            if (msg.what == SDK_PAY_FLAG) &#123;</span><br><span class="line"></span><br><span class="line">                Toast.makeText(ThirdActivity.this, (String) msg.obj,</span><br><span class="line">                        Toast.LENGTH_LONG).show();</span><br><span class="line"></span><br><span class="line">                PayResult payResult = new PayResult((Map&lt;String, String&gt;) msg.obj);</span><br><span class="line">                /**</span><br><span class="line">                 对于支付结果，请商户依赖服务端的异步通知结果。同步通知结果，仅作为支付结束的通知。</span><br><span class="line">                 */</span><br><span class="line">                String resultInfo = payResult.getResult();// 同步返回需要验证的信息</span><br><span class="line">                String resultStatus = payResult.getResultStatus();</span><br><span class="line">                // 判断resultStatus 为“9000”则代表支付成功，具体状态码代表含义可参考接口文档</span><br><span class="line">                if (resultStatus.equals(&quot;9000&quot;)) &#123;</span><br><span class="line">                    Toast.makeText(ThirdActivity.this, &quot;支付成功&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;else if (resultStatus.equals(&quot;4000&quot;))&#123;</span><br><span class="line"></span><br><span class="line">                    // 4000为支付失败，包括用户主动取消支付，或者系统返回的错误</span><br><span class="line">                    Toast.makeText(ThirdActivity.this, &quot;支付失败&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line"></span><br><span class="line">                &#125;else if (resultStatus.equals(&quot;6001&quot;))&#123;</span><br><span class="line"></span><br><span class="line">                    // 6001为取消支付，或者系统返回的错误</span><br><span class="line">                    Toast.makeText(ThirdActivity.this, &quot;取消支付&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line"></span><br><span class="line">                &#125;else if (resultStatus.equals(&quot;8000&quot;)) &#123;</span><br><span class="line">                    // &quot;8000&quot;代表支付结果因为支付渠道原因或者系统原因还在等待支付结果确认，最终交易是否成功以服务端异步通知为准（小概率状态）</span><br><span class="line">                    Toast.makeText(ThirdActivity.this, &quot;支付结果确认中&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;else &#123;</span><br><span class="line">                    // 其他为系统返回的错误</span><br><span class="line">                    Toast.makeText(ThirdActivity.this, &quot;支付错误&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>以下四种为常用结果判断</p><blockquote><p>9000为支付成功<br>4000为支付失败<br>6001为取消支付<br>8000为支付结果确认中</p></blockquote><h2 id="调起支付页面截图"><a href="#调起支付页面截图" class="headerlink" title="调起支付页面截图"></a>调起支付页面截图</h2><p><img src="https://user-gold-cdn.xitu.io/2017/12/14/16052ed43dfc66f3?w=540&amp;h=960&amp;f=jpeg&amp;s=28061" alt="301.jpg"></p><h2 id="公众号：网罗开发"><a href="#公众号：网罗开发" class="headerlink" title="公众号：网罗开发"></a>公众号：网罗开发</h2><p><img src="http://upload-images.jianshu.io/upload_images/2829694-48307b4d71bc5800.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一：介绍&quot;&gt;&lt;a href=&quot;#一：介绍&quot; class=&quot;headerlink&quot; title=&quot;一：介绍&quot;&gt;&lt;/a&gt;一：介绍&lt;/h2&gt;&lt;p&gt;项目中要用到支付功能，需要支付宝支付、微信支付、银联支付，所以打算总结一下，方便以后的查阅，也方便大家， 用到的地方避免再次被坑。&lt;br&gt;今天我们就主要介绍一下支付宝支付，其他支付也给出了对应的连接。&lt;/p&gt;
&lt;p&gt;在做支付之前，在网上也查寻了资料，大多都说，支付接入坑太多，微信坑最多，银联文档太复杂。&lt;br&gt;其实如果接入的多的话，那些套路都可以绕着走。&lt;br&gt;网上的经验什么的大都是比较老的，比较新的能用到的文章不多（但是好文章还是有的，对我帮助也很大），下面给大家详细介绍一下，帮助大家绕开坑。&lt;/p&gt;
    
    </summary>
    
      <category term="Android文集" scheme="https://fanbaoying.github.io/categories/Android%E6%96%87%E9%9B%86/"/>
    
    
      <category term="Android" scheme="https://fanbaoying.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>快速高效 | iOS身份证识别</title>
    <link href="https://fanbaoying.github.io/%E5%BF%AB%E9%80%9F%E9%AB%98%E6%95%88-iOS%E8%BA%AB%E4%BB%BD%E8%AF%81%E8%AF%86%E5%88%AB/"/>
    <id>https://fanbaoying.github.io/快速高效-iOS身份证识别/</id>
    <published>2018-01-25T09:40:58.000Z</published>
    <updated>2018-01-31T06:19:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一：简介"><a href="#一：简介" class="headerlink" title="一：简介"></a>一：简介</h2><p>快捷支付涉及到方方面面，同时安全问题既是用户所关心的，也是制作者不容忽视的重要部分。<br>比如涉及到支付和金钱的app，商户端app等等，都需要进行实名认证，实名认证可以通过银行卡认证和身份证认证。<br>通常办法是通过上传照片，并且手动输入基本信息进行认证，这种方法不仅操作复杂，而且容易出错。<br>网上很多资源，识别率低，速度慢，用户体验很差。今天我就和大家介绍一下我使用的方法，可以快速、高效的识别中国身份证信息。</p><a id="more"></a><h2 id="二：原理"><a href="#二：原理" class="headerlink" title="二：原理"></a>二：原理</h2><p>经实践发现，只要身份证号码处于摄像头预览图层中时，即不用完全对准身份证也可以读取到身份证号码，但此时截取到的身份证图像并不完整。</p><p>为获取到比较完整的身份证图像，经多次实践发现，当身份证人像大约位于拍摄框中的右上区域时，此时可获取到比较完整的身份证图像。</p><p>因此，在拍摄框中右上区域加了一个人像区域提示框，并将该区域设为扫描人脸的区域，只有该区域扫描到身份证上的人脸时（确保用户的确将身份证人像对准了拍摄框中的人像框），才执行读取身份证信息的操作。</p><h2 id="三：项目展示"><a href="#三：项目展示" class="headerlink" title="三：项目展示"></a>三：项目展示</h2><p>扫描身份证页面<br><img src="http://upload-images.jianshu.io/upload_images/2829694-a7b75f0e38644d03.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="扫描身份证页面"></p><p>信息展示页面</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-a58987dfb8a196b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="信息展示页面"></p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-d928d98355e25059.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5AB7A14B-0121-4AE8-A6C5-F5A6668287D7.png"></p><h2 id="四：Demo接入流程"><a href="#四：Demo接入流程" class="headerlink" title="四：Demo接入流程"></a>四：Demo接入流程</h2><h4 id="1-首先把demo下载下来"><a href="#1-首先把demo下载下来" class="headerlink" title="1.首先把demo下载下来"></a>1.首先把<a href="https://github.com/fanbaoying/FBYIDCardRecognition-iOS" target="_blank" rel="noopener">demo</a>下载下来</h4><p><img src="http://upload-images.jianshu.io/upload_images/2829694-093ec5c36f491a5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="demo截图"></p><h4 id="2-打开项目将下面的文件拷贝到自己的工程中："><a href="#2-打开项目将下面的文件拷贝到自己的工程中：" class="headerlink" title="2.打开项目将下面的文件拷贝到自己的工程中："></a>2.打开项目将下面的文件拷贝到自己的工程中：</h4><ul><li>libexidcard</li><li>FBYTool</li><li>FBYCategory</li><li>FBYModel</li><li>FBYView</li><li>FBYBase</li></ul><h4 id="3-添加配置"><a href="#3-添加配置" class="headerlink" title="3.添加配置"></a>3.添加配置</h4><p>在你的项目的Info.plist文件中，添加权限描述（Key   Value）<br>Privacy - Camera Usage Description 是否允许访问相机<br>Privacy - Photo Library Usage Description 是否允许访问相册<br>如下图：<br><img src="http://upload-images.jianshu.io/upload_images/2829694-d80f70244fb93afe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="plist"></p><h4 id="4-项目设置"><a href="#4-项目设置" class="headerlink" title="4. 项目设置"></a>4. 项目设置</h4><p>根据项目截图设置即可</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-a60f239981f12bbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目设置"></p><h4 id="5-项目引用"><a href="#5-项目引用" class="headerlink" title="5. 项目引用"></a>5. 项目引用</h4><p>在项目中需要使用的页面，增加引用代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;IDCardCaptureViewController.h&quot;</span><br></pre></td></tr></table></figure></p><p>在点击扫描身份证的点击事件中，跳转页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IDCardCaptureViewController *idcvc = [[IDCardCaptureViewController alloc]init];</span><br><span class="line"></span><br><span class="line">[self.navigationController pushViewController:idcvc animated:YES];</span><br></pre></td></tr></table></figure></p><p>到此项目就接入完成！！！</p><h2 id="公众号：网罗开发"><a href="#公众号：网罗开发" class="headerlink" title="公众号：网罗开发"></a>公众号：网罗开发</h2><p><img src="http://upload-images.jianshu.io/upload_images/2829694-48307b4d71bc5800.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一：简介&quot;&gt;&lt;a href=&quot;#一：简介&quot; class=&quot;headerlink&quot; title=&quot;一：简介&quot;&gt;&lt;/a&gt;一：简介&lt;/h2&gt;&lt;p&gt;快捷支付涉及到方方面面，同时安全问题既是用户所关心的，也是制作者不容忽视的重要部分。&lt;br&gt;比如涉及到支付和金钱的app，商户端app等等，都需要进行实名认证，实名认证可以通过银行卡认证和身份证认证。&lt;br&gt;通常办法是通过上传照片，并且手动输入基本信息进行认证，这种方法不仅操作复杂，而且容易出错。&lt;br&gt;网上很多资源，识别率低，速度慢，用户体验很差。今天我就和大家介绍一下我使用的方法，可以快速、高效的识别中国身份证信息。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS文集" scheme="https://fanbaoying.github.io/categories/iOS%E6%96%87%E9%9B%86/"/>
    
    
      <category term="iOS" scheme="https://fanbaoying.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Java连接MySQL数据库详细分析</title>
    <link href="https://fanbaoying.github.io/Java%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/"/>
    <id>https://fanbaoying.github.io/Java连接MySQL数据库详细分析/</id>
    <published>2018-01-25T09:35:35.000Z</published>
    <updated>2018-01-31T06:20:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一：工具"><a href="#一：工具" class="headerlink" title="一：工具"></a>一：工具</h2><p>eclipse<br>MySQL5.7<br>MySQL连接驱动：mysql-connector-java-5.1.44-bin.jar<a href="https://dev.mysql.com/downloads/connector/j/" target="_blank" rel="noopener">下载地址</a></p><a id="more"></a><h2 id="二：加载驱动"><a href="#二：加载驱动" class="headerlink" title="二：加载驱动"></a>二：加载驱动</h2><p>2.1 在工程目录中创建lib文件夹，将下载好的JDBC放到该文件夹下，如下图所示：</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-9409579868aa2f80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="项目文件截图"><br>2.2  右键工程名，选最后一个Properties，在java build path中的Libraries分页中选择Add JARs…，选择刚才添加的JDBC，如下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-a6f23953ad48761b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="配置截图"></p><p>2.3 数据包准备<br><a href="http://www.jianshu.com/p/07a9826898c0" target="_blank" rel="noopener">安装mysql</a><br>在数据库studb中创建如下数据表t_stu:</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-f88510125881f35e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="表结构"></p><p>2.4 添加数据，表内容如图：</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-6205331e45992d55.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="表内容"></p><p>2.5 连接数据库并读取数据</p><blockquote><p>数据库名称：studb<br>数据包名称：t_stu<br>端口号：3306<br>用户名：root<br>密码：12345</p></blockquote><p>2.6 具体代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">package com.agree.sqldemo;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line"></span><br><span class="line">public class main &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//声明Connection对象</span><br><span class="line">Connection con;</span><br><span class="line">//驱动程序名</span><br><span class="line">String driver = &quot;com.mysql.jdbc.Driver&quot;;</span><br><span class="line">//URL指向要访问的数据库名studb</span><br><span class="line">String url = &quot;jdbc:mysql://localhost:3306/studb&quot;;</span><br><span class="line">//MySQL配置时的用户名</span><br><span class="line">String user = &quot;root&quot;;</span><br><span class="line">//MySQL配置时的密码</span><br><span class="line">String password = &quot;12345&quot;;</span><br><span class="line"></span><br><span class="line">//遍历查询结果集</span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">//加载驱动程序</span><br><span class="line">Class.forName(driver);</span><br><span class="line">//1.getConnection()方法，连接MySQL数据库！！</span><br><span class="line">con = DriverManager.getConnection(url,user,password);</span><br><span class="line"></span><br><span class="line">if(!con.isClosed())</span><br><span class="line">System.out.println(&quot;Succeeded connecting to the Database!&quot;);</span><br><span class="line">//2.创建statement类对象，用来执行SQL语句！！</span><br><span class="line">Statement statement = con.createStatement();</span><br><span class="line">//要执行的SQL语句</span><br><span class="line">String sql = &quot;select * from t_stu&quot;;</span><br><span class="line"></span><br><span class="line">//3.ResultSet类，用来存放获取的结果集！！</span><br><span class="line">ResultSet rs = statement.executeQuery(sql);</span><br><span class="line">System.out.println(&quot;-----------------&quot;);</span><br><span class="line">System.out.println(&quot;执行结果如下所示:&quot;);</span><br><span class="line">System.out.println(&quot;-----------------&quot;);</span><br><span class="line">System.out.println(&quot;姓名&quot; + &quot;\t&quot; + &quot;地址&quot;);</span><br><span class="line">System.out.println(&quot;-----------------&quot;);  </span><br><span class="line"></span><br><span class="line">String address = null;</span><br><span class="line"></span><br><span class="line">String name = null;</span><br><span class="line"></span><br><span class="line">while(rs.next())&#123;</span><br><span class="line">//获取sname这列数据</span><br><span class="line">name = rs.getString(&quot;sname&quot;);</span><br><span class="line">//获取address这列数据</span><br><span class="line">address = rs.getString(&quot;address&quot;);</span><br><span class="line">//输出结果</span><br><span class="line">System.out.println(name + &quot;\t&quot; + address);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">rs.close();</span><br><span class="line">con.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;catch(ClassNotFoundException e) &#123;</span><br><span class="line">//数据库驱动类异常处理</span><br><span class="line">System.out.println(&quot;Sorry,can`t find the Driver!&quot;);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;catch(SQLException e) &#123;</span><br><span class="line">//数据库连接失败异常处理</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;catch (Exception e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;finally&#123;</span><br><span class="line">System.out.println(&quot;数据库数据成功获取！！&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.7 运行结果如下图所示<br><img src="http://upload-images.jianshu.io/upload_images/2829694-3cb9446725830fe9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行结果"></p><h2 id="公众号：网罗开发"><a href="#公众号：网罗开发" class="headerlink" title="公众号：网罗开发"></a>公众号：网罗开发</h2><p><img src="http://upload-images.jianshu.io/upload_images/2829694-48307b4d71bc5800.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一：工具&quot;&gt;&lt;a href=&quot;#一：工具&quot; class=&quot;headerlink&quot; title=&quot;一：工具&quot;&gt;&lt;/a&gt;一：工具&lt;/h2&gt;&lt;p&gt;eclipse&lt;br&gt;MySQL5.7&lt;br&gt;MySQL连接驱动：mysql-connector-java-5.1.44-bin.jar&lt;a href=&quot;https://dev.mysql.com/downloads/connector/j/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java文集" scheme="https://fanbaoying.github.io/categories/Java%E6%96%87%E9%9B%86/"/>
    
    
      <category term="Java" scheme="https://fanbaoying.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>快速高效 | Android身份证识别</title>
    <link href="https://fanbaoying.github.io/%E5%BF%AB%E9%80%9F%E9%AB%98%E6%95%88-Android%E8%BA%AB%E4%BB%BD%E8%AF%81%E8%AF%86%E5%88%AB/"/>
    <id>https://fanbaoying.github.io/快速高效-Android身份证识别/</id>
    <published>2018-01-25T09:20:44.000Z</published>
    <updated>2018-01-31T06:20:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一：简介"><a href="#一：简介" class="headerlink" title="一：简介"></a>一：简介</h2><p>快捷支付涉及到方方面面，同时安全问题既是用户所关心的，也是制作者不容忽视的重要部分。<br>比如涉及到支付和金钱的app，商户端app等等，都需要进行实名认证，实名认证可以通过银行卡认证和身份证认证。<br>通常办法是通过上传照片，并且手动输入基本信息进行认证，这种方法不仅操作复杂，而且容易出错。<br>网上很多资源，识别率低，速度慢，用户体验很差。今天我就和大家介绍一下我使用的方法，可以快速、高效的识别中国身份证信息。</p><a id="more"></a><h2 id="二：原理"><a href="#二：原理" class="headerlink" title="二：原理"></a>二：原理</h2><p>在拍摄框中右上区域加了一个人像区域提示框，并将该区域设为扫描人脸的区域，只有该区域扫描到身份证上的人脸时（确保用户的确将身份证人像对准了拍摄框中的人像框），才执行读取身份证信息的操作。</p><h2 id="三：项目展示"><a href="#三：项目展示" class="headerlink" title="三：项目展示"></a>三：项目展示</h2><p>扫描身份证面截图</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-20b78f45be90b3de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="头像面扫描"></p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-8cd81ffdb6f4daac.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="国徽面扫描"></p><p>信息展示页面</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-5dc5685f6c54a9df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="头像页信息"></p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-856239c3727e49d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="国徽页信息"></p><h2 id="四：-使用流程介绍"><a href="#四：-使用流程介绍" class="headerlink" title="四： 使用流程介绍"></a>四： 使用流程介绍</h2><h4 id="4-1-身份验证"><a href="#4-1-身份验证" class="headerlink" title="4.1 身份验证"></a>4.1 身份验证</h4><p>由于使用的是百度云的图像文字识别sdk，首先需要去百度云<a href="https://console.bce.baidu.com/ai/?_=1515636851708&amp;fromai=1#/ai/ocr/app/list" target="_blank" rel="noopener">管理控制台</a>获得API Key / Secret Key。</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-d962a45ac612e492.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="管理控制台"></p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-97842b3398dd0700.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="管理控制台"></p><h4 id="4-2-下载demo"><a href="#4-2-下载demo" class="headerlink" title="4.2 下载demo"></a>4.2 下载demo</h4><p><a href="https://github.com/fanbaoying/FBYIDCardRecognition-Android" target="_blank" rel="noopener">GitHub 源码链接</a></p><ol><li>将下载的demo中libs目录下的ocr-sdk.jar文件拷贝到工程libs目录中，并加入工程依赖</li><li>将libs目录下armeabi，arm64-v8a，armeabi-v7a，x86文件夹按需添加到android studio工程src/main/jniLibs目录中， eclipse用户默认为libs目录。</li><li>在Android studio中以模块方式导入下载包中的identify文件夹,模块方式导入流程如下：<br>首先要在顶层工程目录下的settings.gradle文件中include模块名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include &apos;:app&apos;,&apos;:identify&apos;</span><br></pre></td></tr></table></figure></li></ol><p>然后直接复制粘贴identify文件导入到项目的文件夹中！！！然后Build&gt;Rebuild Project，重新构建项目。</p><h4 id="4-3-权限配置"><a href="#4-3-权限配置" class="headerlink" title="4.3 权限配置"></a>4.3 权限配置</h4><ol><li><p>在工程AndroidManifest.xml文件中添加如下权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.CAMERA&quot;/&gt;</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;/&gt;</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>在Proguard配置文件中增加, 防止release发布时打包报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-keep class com.baidu.ocr.sdk.**&#123;*;&#125;</span><br><span class="line">-dontwarn com.baidu.ocr.**</span><br></pre></td></tr></table></figure></li></ol><h4 id="4-4-核心函数介绍"><a href="#4-4-核心函数介绍" class="headerlink" title="4.4 核心函数介绍"></a>4.4 核心函数介绍</h4><ol><li><p>初始化函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">OCR.getInstance().initAccessTokenWithAkSk(new OnResultListener&lt;AccessToken&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onResult(AccessToken result) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onError(OCRError error) &#123;</span><br><span class="line">                error.printStackTrace();</span><br><span class="line">                Log.d(&quot;onError&quot;, &quot;msg: &quot; + error.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, getApplicationContext(), &quot;你注册的appkey&quot;, &quot;你注册的sk&quot;);</span><br></pre></td></tr></table></figure></li><li><p>身份证拍照</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent(MainActivity.this, CameraActivity.class);</span><br><span class="line">intent.putExtra(CameraActivity.KEY_OUTPUT_FILE_PATH,</span><br><span class="line">    FileUtil.getSaveFile(getApplication()).getAbsolutePath());</span><br><span class="line">intent.putExtra(CameraActivity.KEY_CONTENT_TYPE, CameraActivity.CONTENT_TYPE_ID_CARD_FRONT);</span><br><span class="line">startActivityForResult(intent, REQUEST_CODE_CAMERA);</span><br></pre></td></tr></table></figure><ol><li><p>图像回调</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</span><br><span class="line">    super.onActivityResult(requestCode, resultCode, data);</span><br><span class="line"></span><br><span class="line">    if (requestCode == REQUEST_CODE_CAMERA &amp;&amp; resultCode == Activity.RESULT_OK) &#123;</span><br><span class="line">        if (data != null) &#123;</span><br><span class="line">            String contentType = data.getStringExtra(CameraActivity.KEY_CONTENT_TYPE);</span><br><span class="line">            String filePath = FileUtil.getSaveFile(getApplicationContext()).getAbsolutePath();</span><br><span class="line">            if (!TextUtils.isEmpty(contentType)) &#123;</span><br><span class="line">                if (CameraActivity.CONTENT_TYPE_ID_CARD_FRONT.equals(contentType)) &#123;</span><br><span class="line">                    recIDCard(IDCardParams.ID_CARD_SIDE_FRONT, filePath);</span><br><span class="line">                &#125; else if (CameraActivity.CONTENT_TYPE_ID_CARD_BACK.equals(contentType)) &#123;</span><br><span class="line">                    recIDCard(IDCardParams.ID_CARD_SIDE_BACK, filePath);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数据解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private void recIDCard(String idCardSide, String filePath) &#123;</span><br><span class="line">    IDCardParams param = new IDCardParams();</span><br><span class="line">    param.setImageFile(new File(filePath));</span><br><span class="line">    param.setIdCardSide(idCardSide);</span><br><span class="line">    param.setDetectDirection(true);</span><br><span class="line">    OCR.getInstance().recognizeIDCard(param, new OnResultListener&lt;IDCardResult&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onResult(IDCardResult result) &#123;</span><br><span class="line">            if (result != null) &#123;</span><br><span class="line">                Log.d(&quot;onResult&quot;, &quot;result: &quot; + result.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onError(OCRError error) &#123;</span><br><span class="line">            Log.d(&quot;onError&quot;, &quot;error: &quot; + error.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>到此身份证识别接入就结束了！！！</p><p>相同方式均可实现银行卡识别、驾驶证识别、行驶证识别、车牌识别、营业执照识别等等，如有需要demo可联系我。</p><h2 id="公众号：网罗开发"><a href="#公众号：网罗开发" class="headerlink" title="公众号：网罗开发"></a>公众号：网罗开发</h2><p><img src="http://upload-images.jianshu.io/upload_images/2829694-48307b4d71bc5800.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一：简介&quot;&gt;&lt;a href=&quot;#一：简介&quot; class=&quot;headerlink&quot; title=&quot;一：简介&quot;&gt;&lt;/a&gt;一：简介&lt;/h2&gt;&lt;p&gt;快捷支付涉及到方方面面，同时安全问题既是用户所关心的，也是制作者不容忽视的重要部分。&lt;br&gt;比如涉及到支付和金钱的app，商户端app等等，都需要进行实名认证，实名认证可以通过银行卡认证和身份证认证。&lt;br&gt;通常办法是通过上传照片，并且手动输入基本信息进行认证，这种方法不仅操作复杂，而且容易出错。&lt;br&gt;网上很多资源，识别率低，速度慢，用户体验很差。今天我就和大家介绍一下我使用的方法，可以快速、高效的识别中国身份证信息。&lt;/p&gt;
    
    </summary>
    
      <category term="Android文集" scheme="https://fanbaoying.github.io/categories/Android%E6%96%87%E9%9B%86/"/>
    
    
      <category term="Android" scheme="https://fanbaoying.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>快速高效 | iOS银行卡识别</title>
    <link href="https://fanbaoying.github.io/%E5%BF%AB%E9%80%9F%E9%AB%98%E6%95%88-iOS%E9%93%B6%E8%A1%8C%E5%8D%A1%E8%AF%86%E5%88%AB/"/>
    <id>https://fanbaoying.github.io/快速高效-iOS银行卡识别/</id>
    <published>2018-01-23T07:26:01.000Z</published>
    <updated>2018-01-31T06:19:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一：简介"><a href="#一：简介" class="headerlink" title="一：简介"></a>一：简介</h2><p>快捷支付涉及到方方面面，同时安全问题既是用户所关心的，也是制作者不容忽视的重要部分。<br>比如涉及到支付和金钱的app，商户端app等等，都需要进行实名认证，实名认证可以通过银行卡认证和身份证认证。<br>今天我就和大家介绍一下银行卡识别功能，这个方法是通过图像识别，可以快速、高效的识别银行卡信息。</p><a id="more"></a><h2 id="二：原理"><a href="#二：原理" class="headerlink" title="二：原理"></a>二：原理</h2><p>经实践发现，只要银行卡处于摄像头预览图层中并且银行卡号与识别线重合，即不用完全对准银行卡也可以读取到银行卡号。</p><p>与身份证识别不同的是，银行卡识别主要识别银行卡号，因此获取到的图像主要是银行卡号位置。</p><p>在获取到银行卡号之后，通过信息对比获取到银行卡的开户行。在银行卡信息页面可以展示出银行卡识别截图、银行卡开户行、银行卡号。</p><h2 id="三：项目展示"><a href="#三：项目展示" class="headerlink" title="三：项目展示"></a>三：项目展示</h2><h4 id="1-扫描银行卡页面"><a href="#1-扫描银行卡页面" class="headerlink" title="1.扫描银行卡页面"></a>1.扫描银行卡页面</h4><p><img src="http://upload-images.jianshu.io/upload_images/2829694-a9f000cce5adba7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="扫描银行卡页面"></p><h4 id="2-信息展示页面"><a href="#2-信息展示页面" class="headerlink" title="2.信息展示页面"></a>2.信息展示页面</h4><p><img src="http://upload-images.jianshu.io/upload_images/2829694-474fd5e415a22318.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="信息展示页面"></p><h2 id="四：Demo接入流程"><a href="#四：Demo接入流程" class="headerlink" title="四：Demo接入流程"></a>四：Demo接入流程</h2><h4 id="1-导入ReactiveCocoa框架"><a href="#1-导入ReactiveCocoa框架" class="headerlink" title="1.导入ReactiveCocoa框架"></a>1.导入ReactiveCocoa框架</h4><p>使用ReactiveCocoa对银行卡识别出的信息回调。</p><p>添加ReactiveCocoa框架最简单的方法就是用CocoaPods导入。</p><p>如果你从没用过CocoaPods，可以参考<a href="">CocoaPods | iOS详细使用说明</a>这篇教程吧。请至少看完教程中初始化的步骤，这样你才能安装框架。</p><p>如果不想用CocoaPods，你仍然可以使用ReactiveCocoa，具体查看Github文档中引入ReactiveCocoa的步骤描述。</p><p>这里简单介绍CocoaPods导入：<br>键盘输入 i，进入编辑模式，输入下面代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">platform :ios, &apos;8.0&apos;</span><br><span class="line">use_frameworks!</span><br><span class="line"></span><br><span class="line">def pods</span><br><span class="line">pod &apos;ReactiveCocoa&apos;, &apos;2.3.1&apos;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">target &apos;项目名称&apos; do</span><br><span class="line">pods</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><p>下载框架即可。</p><h4 id="2-添加配置"><a href="#2-添加配置" class="headerlink" title="2.添加配置"></a>2.添加配置</h4><p>在你的项目的Info.plist文件中，添加权限描述（Key   Value）<br>Privacy - Camera Usage Description 是否允许访问相机<br>Privacy - Photo Library Usage Description 是否允许访问相册<br>如下图：<br><img src="https://user-gold-cdn.xitu.io/2018/1/2/160b57cc1a6b2c9d?w=1136&amp;h=804&amp;f=png&amp;s=173122" alt="plist"></p><h4 id="3-项目设置"><a href="#3-项目设置" class="headerlink" title="3. 项目设置"></a>3. 项目设置</h4><ol><li><p>选择项目名字，选择Build Settings，搜索enable bitcode 设置为NO。</p></li><li><p>xcode8上边编译可能会遇到arm64错误， 选择项目名字，选择Build Settings，搜索Enable Testability 设置为NO。</p></li></ol><h4 id="4-首先把demo下载下来-demo链接在文章末尾"><a href="#4-首先把demo下载下来-demo链接在文章末尾" class="headerlink" title="4.首先把demo下载下来(demo链接在文章末尾)"></a>4.首先把demo下载下来(demo链接在文章末尾)</h4><p><img src="http://upload-images.jianshu.io/upload_images/2829694-090011dc648dcd91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="demo截图"></p><h4 id="5-打开项目将下面的文件拷贝到自己的工程中："><a href="#5-打开项目将下面的文件拷贝到自己的工程中：" class="headerlink" title="5.打开项目将下面的文件拷贝到自己的工程中："></a>5.打开项目将下面的文件拷贝到自己的工程中：</h4><ul><li>bank_card</li><li>BankData</li></ul><h4 id="6-项目引用"><a href="#6-项目引用" class="headerlink" title="6. 项目引用"></a>6. 项目引用</h4><p>在项目中需要使用的页面，增加引用代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;FBYBankCardViewController.h&quot;</span><br></pre></td></tr></table></figure></p><p>在点击扫描身份证的点击事件中，跳转页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FBYBankCardViewController *bcvc = [[FBYBankCardViewController alloc]init];</span><br><span class="line"></span><br><span class="line">[self.navigationController pushViewController:bcvc animated:YES];</span><br></pre></td></tr></table></figure></p><p>到此项目就接入完成！！！</p><h2 id="公众号：网罗开发"><a href="#公众号：网罗开发" class="headerlink" title="公众号：网罗开发"></a>公众号：网罗开发</h2><p><img src="http://upload-images.jianshu.io/upload_images/2829694-48307b4d71bc5800.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一：简介&quot;&gt;&lt;a href=&quot;#一：简介&quot; class=&quot;headerlink&quot; title=&quot;一：简介&quot;&gt;&lt;/a&gt;一：简介&lt;/h2&gt;&lt;p&gt;快捷支付涉及到方方面面，同时安全问题既是用户所关心的，也是制作者不容忽视的重要部分。&lt;br&gt;比如涉及到支付和金钱的app，商户端app等等，都需要进行实名认证，实名认证可以通过银行卡认证和身份证认证。&lt;br&gt;今天我就和大家介绍一下银行卡识别功能，这个方法是通过图像识别，可以快速、高效的识别银行卡信息。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS文集" scheme="https://fanbaoying.github.io/categories/iOS%E6%96%87%E9%9B%86/"/>
    
    
      <category term="Objective-C" scheme="https://fanbaoying.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>使用Git命令-上传项目到GitHub</title>
    <link href="https://fanbaoying.github.io/%E4%BD%BF%E7%94%A8Git%E5%91%BD%E4%BB%A4-%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub/"/>
    <id>https://fanbaoying.github.io/使用Git命令-上传项目到GitHub/</id>
    <published>2018-01-22T09:07:48.000Z</published>
    <updated>2018-01-31T06:20:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一：-账号连接github-创建ssh"><a href="#一：-账号连接github-创建ssh" class="headerlink" title="一： 账号连接github - 创建ssh"></a>一： 账号连接github - 创建ssh</h2><p>由于本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以要在本地生成一个私钥和一个密钥</p><h4 id="1-终端-显示隐藏文件"><a href="#1-终端-显示隐藏文件" class="headerlink" title="1. 终端 显示隐藏文件"></a>1. 终端 显示隐藏文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool true</span><br></pre></td></tr></table></figure><h4 id="2-查看-ssh文件"><a href="#2-查看-ssh文件" class="headerlink" title="2. 查看.ssh文件"></a>2. 查看.ssh文件</h4><p>点击桌面顶部菜单 前往&gt;个人 看看自己电脑上有没有个 .ssh 的隐藏文件，有的话个人建议删除，新建个。</p><a id="more"></a><h4 id="3-终端新建个-ssh文件"><a href="#3-终端新建个-ssh文件" class="headerlink" title="3. 终端新建个 .ssh文件"></a>3. 终端新建个 .ssh文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir .ssh</span><br></pre></td></tr></table></figure><h4 id="4-进入到刚才新建的-ssh文件目录下"><a href="#4-进入到刚才新建的-ssh文件目录下" class="headerlink" title="4. 进入到刚才新建的.ssh文件目录下"></a>4. 进入到刚才新建的.ssh文件目录下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd .ssh</span><br></pre></td></tr></table></figure><h4 id="5-随意输入个邮箱就行"><a href="#5-随意输入个邮箱就行" class="headerlink" title="5. 随意输入个邮箱就行"></a>5. 随意输入个邮箱就行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-Keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><h4 id="6-查看是否存在-id-rsa-私钥-id-rsa-pub-公钥"><a href="#6-查看是否存在-id-rsa-私钥-id-rsa-pub-公钥" class="headerlink" title="6. 查看是否存在 id_rsa(私钥)  id_rsa.pub(公钥)"></a>6. 查看是否存在 id_rsa(私钥)  id_rsa.pub(公钥)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -la</span><br></pre></td></tr></table></figure><h4 id="7-拷贝公钥"><a href="#7-拷贝公钥" class="headerlink" title="7. 拷贝公钥"></a>7. 拷贝公钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pbcopy &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h4 id="8-粘贴公钥"><a href="#8-粘贴公钥" class="headerlink" title="8. 粘贴公钥"></a>8. 粘贴公钥</h4><p>登陆github，选择Account Settings–&gt;SSH Keys 添加ssh</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-fed0ebf40f7aec14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加"></p><p>终端执行如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><p>新添加到github上的秘钥左边的点一开始是灰色的，终端执行这个命令后，刷新网页会看到灰色点变成了绿色,说明已经添加成功。</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-27bebddf18562211.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加成功"></p><h2 id="二：-创建项目"><a href="#二：-创建项目" class="headerlink" title="二： 创建项目"></a>二： 创建项目</h2><h4 id="1-检测你的帐号跟github是否连上"><a href="#1-检测你的帐号跟github是否连上" class="headerlink" title="1. 检测你的帐号跟github是否连上"></a>1. 检测你的帐号跟github是否连上</h4><p>输入下面命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><p>如果出现下图提示，说明已经连上了</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-ee061dcca7bd7adf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令截图"></p><h4 id="2-开始创建项目"><a href="#2-开始创建项目" class="headerlink" title="2. 开始创建项目"></a>2. 开始创建项目</h4><p>在git创建个人项目</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-c0143e21c801b7a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建项目"></p><h4 id="3-创建项目设置"><a href="#3-创建项目设置" class="headerlink" title="3. 创建项目设置"></a>3. 创建项目设置</h4><p><img src="http://upload-images.jianshu.io/upload_images/2829694-d6f40c7a7cd0bee4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置"></p><h4 id="4-创建成功"><a href="#4-创建成功" class="headerlink" title="4. 创建成功"></a>4. 创建成功</h4><p><img src="http://upload-images.jianshu.io/upload_images/2829694-e0bff6978f5980b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="成功"></p><h2 id="三：-上传项目"><a href="#三：-上传项目" class="headerlink" title="三： 上传项目"></a>三： 上传项目</h2><p>整体操作命令如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">touch README.md //新建一个记录提交操作的文档</span><br><span class="line">git init //初始化本地仓库</span><br><span class="line">git add README.md //添加</span><br><span class="line">git add *  //加入所有项目</span><br><span class="line">git status //检查状态 如果都是绿的 证明成功</span><br><span class="line">git commit -m &quot;first commit&quot;//提交到要地仓库，并写一些注释</span><br><span class="line">git remote add origin git@github.com:youname/Test.git //连接远程仓库并建了一个名叫：origin的别名</span><br><span class="line">git push -u origin master //将本地仓库的东西提交到地址是origin的地址，master分支下</span><br></pre></td></tr></table></figure></p><p>下面做详细分析</p><h4 id="1-在上传项目目录下操作"><a href="#1-在上传项目目录下操作" class="headerlink" title="1. 在上传项目目录下操作"></a>1. 在上传项目目录下操作</h4><p>cd 到需要上传的项目下</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-5165ed03b8adc55d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目路径"></p><h4 id="2-新建一个记录提交操作的文档"><a href="#2-新建一个记录提交操作的文档" class="headerlink" title="2. 新建一个记录提交操作的文档"></a>2. 新建一个记录提交操作的文档</h4><p><img src="http://upload-images.jianshu.io/upload_images/2829694-d049965315083558.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建文档"></p><h4 id="3-初始化本地仓库"><a href="#3-初始化本地仓库" class="headerlink" title="3. 初始化本地仓库"></a>3. 初始化本地仓库</h4><p>初始化本地仓库，并且提交所有项目</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-37f34ce277366907.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="初始化"></p><h4 id="4-上传项目到GitHub"><a href="#4-上传项目到GitHub" class="headerlink" title="4. 上传项目到GitHub"></a>4. 上传项目到GitHub</h4><p>上传之前做备注<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;手机时钟动画第一次更新&quot;</span><br></pre></td></tr></table></figure></p><p>上传到指定库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:fanbaoying/PhoneTime.git</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-408125778f27c9ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="上传"></p><h4 id="5-上传成功"><a href="#5-上传成功" class="headerlink" title="5. 上传成功"></a>5. 上传成功</h4><p><img src="http://upload-images.jianshu.io/upload_images/2829694-940ee8629390ef98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="上传成功"></p><h2 id="四：错误问题解决"><a href="#四：错误问题解决" class="headerlink" title="四：错误问题解决"></a>四：错误问题解决</h2><h4 id="错误提示一"><a href="#错误提示一" class="headerlink" title="错误提示一"></a>错误提示一</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: remote origin already exists.</span><br></pre></td></tr></table></figure><p>解决办法如下：<br>先输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure></p><p>再输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:djqiang/gitdemo.git</span><br></pre></td></tr></table></figure></p><p>就不会报错了</p><h4 id="错误提示二"><a href="#错误提示二" class="headerlink" title="错误提示二"></a>错误提示二</h4><p>如果输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><p>出现错误提示：Permission denied (publickey).因为新生成的key不能加入ssh就会导致连接不上github。<br>解决办法如下：<br>1、先输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-agent</span><br></pre></td></tr></table></figure></p><p>再输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_key</span><br></pre></td></tr></table></figure></p><p>这样就可以了。</p><p>2、如果还是不行的话输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_key</span><br></pre></td></tr></table></figure></p><p>命令后出现报错Could not open a connection to your authentication agent.解决方法是key用Git Gui的ssh工具生成，这样生成的时候key就直接保存在ssh中了，不需要再ssh-add命令加入了，其它的user，token等配置都用命令行来做。</p><p>3、最好检查一下在你复制id_rsa.pub文件的内容时有没有产生多余的空格或空行，有些编辑器会帮你添加这些的。</p><h4 id="错误提示三"><a href="#错误提示三" class="headerlink" title="错误提示三"></a>错误提示三</h4><p>如果输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure></p><p> 报错的话error: Could not remove config section ‘remote.origin’. 我们需要修改gitconfig文件的内容</p><p>找到一个名为gitconfig的文件，打开它把里面的[remote “origin”]那一行删掉。</p><h4 id="错误提示四"><a href="#错误提示四" class="headerlink" title="错误提示四"></a>错误提示四</h4><p>如果输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p><p>提示出错信息：error:failed to push som refs to …….<br>解决办法如下：<br>先输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></p><p>先把远程服务器github上面的文件拉下来<br>再输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p><p>如果出现报错 fatal: Couldn’t find remote ref master或者fatal: ‘origin’ does not appear to be a git repository以及fatal: Could not read from remote repository.<br>则需要重新输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origingit@github.com:djqiang/gitdemo.git</span><br></pre></td></tr></table></figure></p><p>问题就可以解决</p><h4 id="错误提示五"><a href="#错误提示五" class="headerlink" title="错误提示五"></a>错误提示五</h4><p>对GitHub已有项目进行更新的时候，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>如果遇到下面错误</p><p><img src="http://upload-images.jianshu.io/upload_images/2829694-454a3320f132fdcb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="111.jpg"></p><p>出现错误的主要原因是github中的README.md文件不在本地代码目录中。</p><p>可以通过如下命令进行代码合并：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure></p><p>然后在运行下面语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></p><p>就成功了。</p><h2 id="公众号：网罗开发"><a href="#公众号：网罗开发" class="headerlink" title="公众号：网罗开发"></a>公众号：网罗开发</h2><p><img src="http://upload-images.jianshu.io/upload_images/2829694-48307b4d71bc5800.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一：-账号连接github-创建ssh&quot;&gt;&lt;a href=&quot;#一：-账号连接github-创建ssh&quot; class=&quot;headerlink&quot; title=&quot;一： 账号连接github - 创建ssh&quot;&gt;&lt;/a&gt;一： 账号连接github - 创建ssh&lt;/h2&gt;&lt;p&gt;由于本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以要在本地生成一个私钥和一个密钥&lt;/p&gt;
&lt;h4 id=&quot;1-终端-显示隐藏文件&quot;&gt;&lt;a href=&quot;#1-终端-显示隐藏文件&quot; class=&quot;headerlink&quot; title=&quot;1. 终端 显示隐藏文件&quot;&gt;&lt;/a&gt;1. 终端 显示隐藏文件&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defaults write com.apple.finder AppleShowAllFiles -bool true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-查看-ssh文件&quot;&gt;&lt;a href=&quot;#2-查看-ssh文件&quot; class=&quot;headerlink&quot; title=&quot;2. 查看.ssh文件&quot;&gt;&lt;/a&gt;2. 查看.ssh文件&lt;/h4&gt;&lt;p&gt;点击桌面顶部菜单 前往&amp;gt;个人 看看自己电脑上有没有个 .ssh 的隐藏文件，有的话个人建议删除，新建个。&lt;/p&gt;
    
    </summary>
    
      <category term="终端" scheme="https://fanbaoying.github.io/categories/%E7%BB%88%E7%AB%AF/"/>
    
    
      <category term="git" scheme="https://fanbaoying.github.io/tags/git/"/>
    
  </entry>
  
</feed>
