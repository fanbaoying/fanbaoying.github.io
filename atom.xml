<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Swift社区</title>
  
  <subtitle>做最好的 Swift 社区</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fanbaoying.github.io/"/>
  <updated>2022-09-26T03:59:21.089Z</updated>
  <id>https://fanbaoying.github.io/</id>
  
  <author>
    <name>Swift社区</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Swift 周报 第十四期</title>
    <link href="https://fanbaoying.github.io/Swift-%E5%91%A8%E6%8A%A5-%E7%AC%AC%E5%8D%81%E5%9B%9B%E6%9C%9F/"/>
    <id>https://fanbaoying.github.io/Swift-周报-第十四期/</id>
    <published>2022-09-26T03:56:55.000Z</published>
    <updated>2022-09-26T03:59:21.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本期是 Swift 编辑组自主整理周报的第五期</strong>，每个模块已初步成型。各位读者如果有好的提议，欢迎在文末留言。</p><p>欢迎投稿或推荐内容。目前计划每两周周一发布，欢迎志同道合的朋友一起加入周报整理。</p><p>小时候幸福很简单，长大后简单很幸福。<strong>Swift社区</strong>有你未领取的小幸福，等你简简单单来开启！👊👊👊</p><blockquote><p><strong>周报精选</strong></p><p>新闻和社区：iPhone灵动岛无法适配大部分应用</p><p>提案：Swift 5.8 实现的提案</p><p>Swift 论坛：<code>conformance</code> 关键字</p><p>推荐博文：SwiftUI 新功能 Layout 协议</p><p><strong>话题讨论：</strong> 大厂养老，你会选择谁</p></blockquote><a id="more"></a><h2 id="新闻和社区"><a href="#新闻和社区" class="headerlink" title="新闻和社区"></a>新闻和社区</h2><h3 id="iPhone-灵动岛无法适配大部分应用"><a href="#iPhone-灵动岛无法适配大部分应用" class="headerlink" title="iPhone 灵动岛无法适配大部分应用"></a>iPhone 灵动岛无法适配大部分应用</h3><p>近日，有海外程序员小哥哥曝光了灵动岛的开发代码，并配文称原本想安装完 Xcode 14.1 Beta 版（iOS 开发程序）去了解下 iPhone 14 Pro 的灵动岛 API 接口情况，但没想到，苹果并未开放 API，也就是说第三方开发人员很难自行适配灵动岛这个系统级的交互功能。如果想要适配灵动岛恐怕只能向苹果官方申请开放 API 接口。这也是为什么很多 App 至今都没能适配灵动岛的情况出现。（新浪数码）</p><p><img src="https://images.xiaozhuanlan.com/photo/2022/f12e107a5e43e5852d5a2c820448799a.gif" alt=""></p><h3 id="App-和-App-内购买项目即将实行价格和税率调整"><a href="#App-和-App-内购买项目即将实行价格和税率调整" class="headerlink" title="App 和 App 内购买项目即将实行价格和税率调整"></a>App 和 App 内购买项目即将实行价格和税率调整</h3><p>最早于 2022 年 10 月 5 日起，下列地区 App Store 上的 App 及 App 内购买项目 (自动续期订阅除外) 价格将有所提高：智利、埃及、日本、马来西亚、巴基斯坦、波兰、韩国、瑞典、越南和所有使用欧元货币的地区。在越南，相关的价格提升反映了要求 Apple 代扣代缴适用税款的新规定，其中适用税款包括 5% 的增值税 (VAT) 和 5% 的企业所得税 (CIT)。</p><p>您的收益将随之进行调整，并会根据不含税的价格来进行计算。《付费 App 协议》的附录 B 将会更新，表明 Apple 在越南征收和汇付适用税款。</p><p>以上调整生效后，在“我的 App”中“价格与销售范围”部分会随即更新。您可以随时在 App Store Connect 中更改您的 App 和 App 内购买项目的价格 (包括自动续期订阅)。如果您有提供订阅项目，您可以选择为现有订阅者保留当前价格。</p><h3 id="苹果确认-iOS16-存漏洞影响新机激活"><a href="#苹果确认-iOS16-存漏洞影响新机激活" class="headerlink" title="苹果确认 iOS16 存漏洞影响新机激活"></a>苹果确认 iOS16 存漏洞影响新机激活</h3><p>据 MacRumors 看到的一份备忘录，苹果称，“iOS 16 有一个已知的问题，可能会影响到使用开放的 Wi-Fi 网络的设备激活”。为了解决这个问题，苹果表示，用户应该在初始化 iOS 时，在提示连接到 Wi-Fi 网络时选择“用 iTunes 连接到 Mac 或 PC”，然后返回到之前的屏幕，使用 Wi-Fi 再次尝试，直到激活成功。</p><h3 id="使用-iOS-16-1-Beta-版和-Xcode-14-1-Beta-版，开发实时活动功能"><a href="#使用-iOS-16-1-Beta-版和-Xcode-14-1-Beta-版，开发实时活动功能" class="headerlink" title="使用 iOS 16.1 Beta 版和 Xcode 14.1 Beta 版，开发实时活动功能"></a>使用 iOS 16.1 Beta 版和 Xcode 14.1 Beta 版，开发实时活动功能</h3><p>新的 ActivityKit 框架现已在 iOS 16.1 Beta 版和 Xcode 14.1 Beta 版中推出，探索如何通过这一框架为您的 App 构建实时活动。借由实时更新，实时活动能帮助用户跟踪您的 App 内容。App 的实时活动会显示在锁定屏幕和灵动岛中 — “灵动岛”作为一项全新设计，可以让用户直观、愉悦地体验 iPhone 14 Pro 和 iPhone 14 Pro Max。</p><p>实时活动功能和 ActivityKit 将包含在今年晚些时候推出的 iOS 16.1 中。当 iOS 16.1 发布候选版本可用时，您即可将配置了实时活动功能的 App 提交至 App Store。</p><h2 id="提案"><a href="#提案" class="headerlink" title="提案"></a>提案</h2><h3 id="Swift-5-8-实现的提案"><a href="#Swift-5-8-实现的提案" class="headerlink" title="Swift 5.8 实现的提案"></a>Swift 5.8 实现的提案</h3><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0372-document-sorting-as-stable.md" title="SE-0372" target="_blank" rel="noopener">SE-0372</a> <strong>更新稳定排序文档</strong> 该提案已在 十三期周报 正在审查的提案模块做了详细介绍。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0369-add-customdebugdescription-conformance-to-anykeypath.md" title="SE-0369" target="_blank" rel="noopener">SE-0369</a> <strong>同步 CustomDebugString 协议到 AnyKeyPath</strong> </p><p>此提案主要目的是将 <code>CustomDebugStringConvertible</code> 的协议添加到 <code>AnyKeyPath</code>。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0367-conditional-attributes.md" title="SE-0367" target="_blank" rel="noopener">SE-0367</a> <strong>优化新属性的条件编译</strong> 。该提案已在 十二期周报 已通过的提案模块做了详细介绍。</p><h2 id="Swift论坛"><a href="#Swift论坛" class="headerlink" title="Swift论坛"></a>Swift论坛</h2><p>1) Swift 5.7 发布! 🥳 新增功能详见：<a href="https://www.swift.org/blog/swift-5.7-released/" title="Swift Evolution" target="_blank" rel="noopener">Swift Evolution</a> </p><p>2) <a href="https://forums.swift.org/t/initiative-swift-platform-work-group/60340" title="Swift Platform Work Group" target="_blank" rel="noopener">Swift Platform Work Group</a></p><p>Swift community 工作组将努力提高 Swift 的平台可用性</p><p>工作组内容包括：</p><ul><li>拓展 Swift 可用的目标平台</li><li>拓展 Swift 可用的主机平台</li><li>提高 Swift 现有平台上的 Toolchain</li><li>让 Swift 编译器可以在现有的平台上工作比如 Linux 和 Windows</li><li>努力打造更好的跨平台 Swift 生态系统</li></ul><p>工作组不涉及的内容有：</p><ul><li>涉及 Apple 已经支持的平台</li><li>涉及低资源和裸机平台</li></ul><p>3) 提议<a href="https://forums.swift.org/t/pre-pitch-explicit-protocol-fulfilment-with-the-conformance-keyword/60246" title="使用 conformance 关键字的让协议符合要求" target="_blank" rel="noopener">使用 conformance 关键字的让协议符合要求</a></p><p><code>conformance</code> 关键字的意思是：<strong>此声明由程序员定义并满足协议要求</strong>。<code>conformance</code> 不是 protocol 必须有的关键字。 但是，当 conformance 存在时，除非声明确实符合协议要求，否则程序格式错误。</p><p>栗子🌰：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Program</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HelloWorld</span>: <span class="title">Program</span> </span>&#123;</span><br><span class="line">    <span class="comment">// OK</span></span><br><span class="line">    conformance <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123; ... &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// error: function crash() does not fulfill any requirement of the protocol 'Program'.</span></span><br><span class="line">    conformance <span class="function"><span class="keyword">func</span> <span class="title">crash</span><span class="params">()</span></span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4) 提议<a href="https://forums.swift.org/t/pitch-clock-sleep-for/60376" title="clock.sleep(for:)" target="_blank" rel="noopener">clock.sleep(for:)</a></p><p>5) 框架<a href="https://forums.swift.org/t/html-framework-for-swift/60241" title="用于web和swift server交互的框架" target="_blank" rel="noopener">用于web和swift server交互的框架</a></p><ul><li><a href="https://github.com/vapor/leaf" target="_blank" rel="noopener">vapor/leaf 8</a></li><li><a href="https://github.com/vapor-community/HTMLKit" target="_blank" rel="noopener">vapor-community/HTMLKit 9</a></li><li><a href="https://github.com/JohnSundell/Plot" target="_blank" rel="noopener">Plot 13</a></li></ul><p>6) 讨论<a href="https://forums.swift.org/t/call-an-async-function-in-an-initializer/60396" title="在init方法中使用async function" target="_blank" rel="noopener">在init方法中使用async function</a></p><p>7）讨论<a href="https://forums.swift.org/t/asyncsequence-stream-version-of-passthroughsubject-or-currentvaluesubject/60395" title="PassthroughSubject 和 CurrentValueSubject" target="_blank" rel="noopener">PassthroughSubject 和 CurrentValueSubject</a></p><h2 id="推荐博文"><a href="#推荐博文" class="headerlink" title="推荐博文"></a>推荐博文</h2><p><a href="https://swiftui-lab.com/layout-protocol-part-1/" title="SwiftUI Layout 协议——第 1 部分" target="_blank" rel="noopener">SwiftUI Layout 协议——第 1 部分</a></p><p><strong>摘要：</strong> 今年 SwiftUI 新增比较实用的功能当属 Layout 协议。本篇文章主要介绍 Layout 协议的基础知识和常用功能使用。</p><p><a href="https://swiftui-lab.com/layout-protocol-part-2/" title="SwiftUI Layout 协议——第 2 部分" target="_blank" rel="noopener">SwiftUI Layout 协议——第 2 部分</a></p><p><strong>摘要：</strong> 本篇文章是 SwiftUI Layout 协议的第二部分介绍，主要讲述 Layout 协议的高级布局包含自定义动画、递归布局等功能。</p><p><a href="https://mp.weixin.qq.com/s/C739cypR-npGt7F8NLtQgQ" target="_blank" rel="noopener">SwiftUI 之 HStack 和 VStack 的切换</a></p><p><strong>摘要：</strong> 本文介绍了当涉及到水平和垂直的变体时( HStack 和 VStack )，我们需要如何在这两者之间动态的切换。</p><p><a href="https://mp.weixin.qq.com/s/QOB5alijsV5Gg8pi4lg03g" target="_blank" rel="noopener">App Store 已上架项目打开瞬闪问题</a></p><p><strong>摘要：</strong> 用户反馈 iPhone11 iOS14.7 下载安装 App Store 已上架项目后，点击图标，App 闪一下就回到了桌面。</p><p><a href="https://mp.weixin.qq.com/s/8fPJbPNA7kIZhnv3I8m4tg" target="_blank" rel="noopener">实现模块化应用的本地化</a></p><p><strong>摘要：</strong> 本文详细的介绍了本地化上线的过程，建议收藏，以后新开项目作为参考。</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p><strong>Swift社区</strong>是由 Swift 爱好者共同维护的公益组织，我们会分享以 <strong>Swift实战</strong>、<strong>SwiftUl</strong>、<strong>Swift基础</strong>为核心的技术内容，也整理收集优秀的学习资料。</p><p>特别感谢 Swift社区 编辑部的每一位编辑，感谢大家的辛苦付出，为 Swift社区 提供优质内容，为 Swift 语言的发展贡献自己的力量。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本期是 Swift 编辑组自主整理周报的第五期&lt;/strong&gt;，每个模块已初步成型。各位读者如果有好的提议，欢迎在文末留言。&lt;/p&gt;
&lt;p&gt;欢迎投稿或推荐内容。目前计划每两周周一发布，欢迎志同道合的朋友一起加入周报整理。&lt;/p&gt;
&lt;p&gt;小时候幸福很简单，长大后简单很幸福。&lt;strong&gt;Swift社区&lt;/strong&gt;有你未领取的小幸福，等你简简单单来开启！👊👊👊&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;周报精选&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新闻和社区：iPhone灵动岛无法适配大部分应用&lt;/p&gt;
&lt;p&gt;提案：Swift 5.8 实现的提案&lt;/p&gt;
&lt;p&gt;Swift 论坛：&lt;code&gt;conformance&lt;/code&gt; 关键字&lt;/p&gt;
&lt;p&gt;推荐博文：SwiftUI 新功能 Layout 协议&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;话题讨论：&lt;/strong&gt; 大厂养老，你会选择谁&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Swift 周报" scheme="https://fanbaoying.github.io/categories/Swift-%E5%91%A8%E6%8A%A5/"/>
    
    
      <category term="Swift" scheme="https://fanbaoying.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>实现模块化应用的本地化</title>
    <link href="https://fanbaoying.github.io/%E5%AE%9E%E7%8E%B0%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BA%94%E7%94%A8%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%8C%96/"/>
    <id>https://fanbaoying.github.io/实现模块化应用的本地化/</id>
    <published>2022-09-26T03:56:33.000Z</published>
    <updated>2022-09-26T03:59:50.417Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我已经有一段时间没有从头开始一个需要支持多种语言的新项目了。当然不是从头开始，而是在代码库中通过使用 Swift 包将代码分成不同模块。</p><p>我想提醒自己记住许多在本地化实行中的过程，所以我认为最好写一篇文章，以便下次开始同类型项目时可以参考。</p><a id="more"></a><h2 id="开始吧！"><a href="#开始吧！" class="headerlink" title="开始吧！"></a>开始吧！</h2><p>让我们看看代码库的一个简化版本。它包含一个 Xcode 项目，一个单独的 app target（即将运行的那个）和一个名为 <code>Features</code> 的 Swift 包。后者将包含 app 中所有页面的代码，每一页将被定义为自己的产品：</p><p><strong>Package.swift</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift-tools-version: 5.6</span></span><br><span class="line"><span class="keyword">import</span> PackageDescription</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> package = <span class="type">Package</span>(</span><br><span class="line">    name: <span class="string">"Features"</span>,</span><br><span class="line">    products: [</span><br><span class="line">        .library(</span><br><span class="line">            name: <span class="string">"Home"</span>,</span><br><span class="line">            targets: [<span class="string">"Home"</span>]),</span><br><span class="line">        .library(</span><br><span class="line">            name: <span class="string">"Detail"</span>,</span><br><span class="line">            targets: [<span class="string">"Detail"</span>]</span><br><span class="line">        )</span><br><span class="line">    ],</span><br><span class="line">    dependencies: [</span><br><span class="line">    ],</span><br><span class="line">    targets: [</span><br><span class="line">        .target(</span><br><span class="line">            name: <span class="string">"Home"</span></span><br><span class="line">        ),</span><br><span class="line">        .target(</span><br><span class="line">            name: <span class="string">"Detail"</span></span><br><span class="line">        )</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这个 app target 将会作为 app 的组合层，其唯一的目的是导入每个功能，实例化它们并协调导航。所有的 UI ，演示和业务逻辑将留在各自的 “模块” 中（<code>Features Swift Package</code> 中的一个 target）。这将允许每个功能独立开发并完全的与其他功能隔离。</p><p>为了简单起见，这个例子里仅有两个功能：主页和详情，他们代表 app 中仅有的两个页面。</p><p>主页有一个按钮允许用户导航到详情页面，还有一个标签展示用户当前所在区域的语言代码。详情页只展示一个标签，和主页标签展示的信息一致：</p><p><img src="https://www.polpiella.dev/assets/posts/modularised-app-localisation/detail-home-en.png" alt="Images of both screens with english selected as the language"></p><h2 id="添加字符串！"><a href="#添加字符串！" class="headerlink" title="添加字符串！"></a>添加字符串！</h2><p>看起来不错，但是现在展示的信息是用英文通过硬编码编写的字符串。app 需要内容被翻译成另外两种语言：加泰罗尼亚语和西班牙语。</p><p>虽然有多种实现方式，我更倾向每个功能（或页面）只包含它所需要的本地化字符串，这样可以增加功能的可移植性和可重用性。</p><p>这可以在 Swift 包中完成，通过将所有必需的 <code>.lproj</code> 文件和所有需要本地化的内容（当前例子中只有 <code>Localizable.strings</code> 文件）放在目标文件夹下 - 我的习惯是放在父 <code>Resources/</code> 文件夹下，并将这些资源定义为 <code>Package.swift</code> 的特定 target。</p><p>添加文件之后构建该功能将导致编译器抛出如下错误：</p><p><img src="https://www.polpiella.dev/assets/posts/modularised-app-localisation/default-localisation-error.png" alt="Error thrown by Xcode when no default localisation is set"></p><p>这是因为 <code>defaultLocalization</code> 必须由 <code>Package.swift</code> 提供。所有功能的 target 来自一个包，所以只能有一个 <code>defaultLocalization</code> 。以下是 <code>Package.swift</code> 添加本地化内容之后的样子：</p><p><strong>Package.swift</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift-tools-version: 5.6</span></span><br><span class="line"><span class="keyword">import</span> PackageDescription</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> package = <span class="type">Package</span>(</span><br><span class="line">    name: <span class="string">"Features"</span>,</span><br><span class="line">    defaultLocalization: <span class="string">"en"</span>,</span><br><span class="line">    platforms: [.iOS(.v15)],</span><br><span class="line">    products: [</span><br><span class="line">        .library(</span><br><span class="line">            name: <span class="string">"Home"</span>,</span><br><span class="line">            targets: [<span class="string">"Home"</span>]),</span><br><span class="line">        .library(</span><br><span class="line">            name: <span class="string">"Detail"</span>,</span><br><span class="line">            targets: [<span class="string">"Detail"</span>]</span><br><span class="line">        )</span><br><span class="line">    ],</span><br><span class="line">    dependencies: [</span><br><span class="line">    ],</span><br><span class="line">    targets: [</span><br><span class="line">        .target(</span><br><span class="line">            name: <span class="string">"Home"</span>,</span><br><span class="line">            dependencies: [],</span><br><span class="line">            resources: [.process(<span class="string">"Resources/"</span>)]</span><br><span class="line">        ),</span><br><span class="line">        .target(</span><br><span class="line">            name: <span class="string">"Detail"</span>,</span><br><span class="line">            resources: [.process(<span class="string">"Resources/"</span>)]</span><br><span class="line">        )</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果没有为默认的本地化代码提供本地化的内容，编译器会显示警告。这对于确保你不会发布包含基本本地化内容的软件包版本非常有帮助。</p><p><img src="https://www.polpiella.dev/assets/posts/modularised-app-localisation/missing-default-localisation.png" alt="Xcode warning shown when default localisation is missing."></p></blockquote><h2 id="支持本地化"><a href="#支持本地化" class="headerlink" title="支持本地化"></a>支持本地化</h2><p>可能与你的想法正好相反，把设备系统语言设置为加泰罗尼亚语或西班牙语并且运行 app 内容仍然用英文展示。原因是 Swift 包需要额外的信息去决定使用哪些本地化的内容，就目前来看，如果包里有目标内容，它们将只使用目标的基本本地化，否则使用包的默认本地化。</p><p>现在有两种方式我们可以实现本地化：使新的本地化在 app target 中可用或启用混合本地化。</p><h3 id="在-app-target-中添加新的本地化内容"><a href="#在-app-target-中添加新的本地化内容" class="headerlink" title="在 app target 中添加新的本地化内容"></a>在 app target 中添加新的本地化内容</h3><p>在 <code>Features</code>  Swift 包中启用新的本地化的一种方式是将它们添加到导入功能的 Xcode 项目中。这可以通过进入 Xcode 项目，在项目设置中的 “Info” 一栏，添加本地化支持：</p><p><img src="https://images.xiaozhuanlan.com/photo/2022/dfb90c005ba10bc3797eddaf4032e348.gif" alt=""></p><blockquote><p>需要注意的是，本地化需要至少一个文件（例如一个空的 <code>Localizable.strings</code> 文件）。在本例中，因为 app target 是用 UIKit 构建的，并且在添加新的本地化时选择了启动 storyboard 进行本地化（如上视频所示），所以已经有一个本地化文件。</p></blockquote><p>现在这将允许包从主包中获取支持的本地化，并选择相应的要使用的资源。</p><p>值得注意的是，如果设备有被 app 支持但是包不支持的语言，则后者将会回退到 <code>Package.swift</code> 中提供的 <code>defaultLocalization</code> .</p><p>同样的，如果 app 不支持该语言，同样会回退到相同的值。这也是为什么将 <code>defaultLocalization</code> 设置为与主目标基础语言相同，以确保所有页面上的一致性是非常重要的。这也是我更倾向于所有功能分组在一个 Swift 包之下的原因，这样所有页面上的 <code>defaultLocalization</code> 就有了单一真正的来源。</p><h3 id="允许混合本地化"><a href="#允许混合本地化" class="headerlink" title="允许混合本地化"></a>允许混合本地化</h3><p>虽然采用 app target 的本地化是首选方法，因为他确保了所有页面的一致性，并且只允许少数受支持的地方使用，但还有另一种方法允许包内容被本地化，而不必在主项目之外。</p><p>可以通过将 app 的 <code>Info.plist</code> 文件中的 <code>CFBundleAllowMixedLocalizations</code> 值设置为 <code>YES</code> 来实现。</p><p>这个设置将会告诉 app target 在不同的 target 或功能使用不同本地化是可以的，当添加新的本地化资源时， app 本地化会自动工作。</p><p><img src="https://www.polpiella.dev/assets/posts/modularised-app-localisation/enable-mixed-localizations.png" alt="Enabling mixed localisations in the app target"></p><p>使用这种方法需要注意以下几点：</p><p>1.不再需要将本地化添加到 app target，添加带有本地化内容的 <code>lproj</code> 到包资源就可以了。当用户修改区域时，如果你的资源包存在该语言包或默认提供 <code>Package.swift</code> ，软件包也会展示该区域的语言内容。</p><p>2.支持多少个区域就会有多少个本地化资源。这意味着没有一个单一的真实来源来确定整个 app 支持哪些本地化。这可能会导致一些问题，例如，某个功能有本地化资源内容，而该内容的本地化资源还未被应用。在本例中，除了删除资源，没有办法隐藏它。</p><video autoplay loop><br>  <source src="https://www.polpiella.dev/assets/posts/modularised-app-localisation/mixed-localisations.mp4" type="video/mp4"><br></video><p>第二点如上面的视频中所示，当用户把设备语言设置为法语。混合来源导致了不一致，因为主屏幕没有 <code>fr.lproj</code> –因此它又回到了默认本地化资源，英语。另一方面，在详情页面，有可用的本地化内容，这是正确翻译字符串的原因，正是这个原因，我喜欢将 app target 作为所有支持本地化的真实来源。</p><h2 id="额外提示-自动化"><a href="#额外提示-自动化" class="headerlink" title="额外提示 - 自动化"></a>额外提示 - 自动化</h2><p>我一直鼓励尽可能地自动化检索特定包的本地化字符串的流程。如果你的 app 有很多页面，希望使添加本地化字符串的过程尽可能简单和简便。</p><p>我一直在使用的一款工具 <a href="https://github.com/SwiftGen/SwiftGen" target="_blank" rel="noopener">SwiftGen</a>，它可以为各种资源生成 Swift 接口，例如 <code>Localizable.strings</code> 文件。</p><p>创建一个利用这个可执行文件的构建工具插件，可以使支持新本地化过程变得容易一点，并在各功能之间保持一致。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我已经有一段时间没有从头开始一个需要支持多种语言的新项目了。当然不是从头开始，而是在代码库中通过使用 Swift 包将代码分成不同模块。&lt;/p&gt;
&lt;p&gt;我想提醒自己记住许多在本地化实行中的过程，所以我认为最好写一篇文章，以便下次开始同类型项目时可以参考。&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://fanbaoying.github.io/categories/Swift/"/>
    
    
      <category term="iOS" scheme="https://fanbaoying.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI 之 HStack 和 VStack 的切换</title>
    <link href="https://fanbaoying.github.io/SwiftUI-%E4%B9%8B-HStack-%E5%92%8C-VStack-%E7%9A%84%E5%88%87%E6%8D%A2/"/>
    <id>https://fanbaoying.github.io/SwiftUI-之-HStack-和-VStack-的切换/</id>
    <published>2022-09-26T03:56:25.000Z</published>
    <updated>2022-09-26T03:58:04.704Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>SwiftUI</code> 的各种堆栈是许多框架中最基本的布局工具，能够让我们定义组视图，这些组视图可以按照水平、垂直或覆盖视图对齐。</p><p>当涉及到水平和垂直的变体时( <code>HStack</code> 和 <code>VStack</code> )，我们需要在这两者之间动态的切换。举个例子，假如我们正在构建一个 <code>app</code> 其中包含 <code>LoginActionsView</code> ，一个让用户登录时在列表中选择操作的类：</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LoginActionsView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Login"</span>) &#123; ... &#125;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Reset password"</span>) &#123; ... &#125;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Create account"</span>) &#123; ... &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .buttonStyle(<span class="type">ActionButtonStyle</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ActionButtonStyle</span>: <span class="title">ButtonStyle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeBody</span><span class="params">(configuration: Configuration)</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        configuration.label</span><br><span class="line">            .fixedSize()</span><br><span class="line">            .frame(maxWidth: .infinity)</span><br><span class="line">            .padding()</span><br><span class="line">            .foregroundColor(.white)</span><br><span class="line">            .background(<span class="type">Color</span>.blue)</span><br><span class="line">            .cornerRadius(<span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上代码中，我们用到了 <code>fixedSize</code> 防止按钮文本被截断，这仅是在我们确信给定的内容视图不会比视图本身更大的情况。想了解更多信息，可以查看我的文章 -  <a href="https://www.swiftbysundell.com/articles/swiftui-layout-system-guide-part-3/#fixed-dimensions" target="_blank" rel="noopener">SwiftUI 布局系统第三章</a></p></blockquote><p>目前，我们的按钮是垂直排列的，并且填满了水平线上的可用空间（你可以用以上示例代码预览按钮的样子），虽然这在竖向的 iPhone 上看起来很好，但假设我们现在想要在横向模式下让 <code>UI</code> 横向排列。</p><h2 id="GeometryReader-能实现吗？"><a href="#GeometryReader-能实现吗？" class="headerlink" title="GeometryReader 能实现吗？"></a>GeometryReader 能实现吗？</h2><p>一种方式是用 <code>GeometryReader</code> 测量当前可用空间，并根据宽度是否大于其高度，可以选择使用 <code>HStack</code> 或  <code>VStack</code> 来渲染内容。</p><p>虽然可以在 <code>LoginActionsView</code> 中放入该逻辑，但我们希望以后能复用代码，因此需要重新创建一个专门的视图，作为一个独立的组件来实现动态堆栈的切换逻辑。</p><p>为了使代码可用性更高，我们不会硬编码让两个堆栈变体使用对齐或间距什么的。相反，让我们像 <code>SwiftUI</code> 一样，对这些属性参数化，同时设定框架所使用的默认值 — 就像这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DynamicStack</span>&lt;<span class="title">Content</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> horizontalAlignment = <span class="type">HorizontalAlignment</span>.center</span><br><span class="line"><span class="keyword">var</span> verticalAlignment = <span class="type">VerticalAlignment</span>.center</span><br><span class="line"><span class="keyword">var</span> spacing: <span class="type">CGFloat</span>?</span><br><span class="line">    @<span class="type">ViewBuilder</span> <span class="keyword">var</span> content: () -&gt; <span class="type">Content</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">GeometryReader</span> &#123; proxy <span class="keyword">in</span></span><br><span class="line">            <span class="type">Group</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> proxy.size.width &gt; proxy.size.height &#123;</span><br><span class="line">                    <span class="type">HStack</span>(</span><br><span class="line">                        alignment: verticalAlignment,</span><br><span class="line">                        spacing: spacing,</span><br><span class="line">                        content: content</span><br><span class="line">                    )</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">VStack</span>(</span><br><span class="line">                        alignment: horizontalAlignment,</span><br><span class="line">                        spacing: spacing,</span><br><span class="line">                        content: content</span><br><span class="line">                    )</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们使新的 <code>DynamicStack</code> 使用了与 <code>HStack</code>  和 <code>VStack</code> 相同的 <code>API</code> ，现在可以在 <code>LoginActionsView</code> 中直接将以前的 <code>VStack</code> 换成新的自定义的实例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LoginActionsView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">DynamicStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Login"</span>) &#123; ... &#125;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Reset password"</span>) &#123; ... &#125;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Create account"</span>) &#123; ... &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .buttonStyle(<span class="type">ActionButtonStyle</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优秀！然而，就像上面的代码展示的那样，使用 <code>GeometeryReader</code> 来展示动态切换有一个相当明显的缺点，在几何图形阅读器中总是会填充水平和垂直方向的所有可用空间（以便测量实际空间）。在我们的例子中，<code>LoginActionsView</code> 不再只是水平方向的排列，它现在也能移动到屏幕的顶部。</p><p>虽然我们也有很多方法能解决这些问题（例如使用类似在<a href="https://swiftbysundell.com/questions/syncing-the-width-or-height-of-two-swiftui-views/" target="_blank" rel="noopener">这篇 Q&amp;A </a>中用来使多个视图具有相同宽度和高度的技术），但真正的问题是当我们要动态的确定方向时，测量可用空间是否是一个好的方法。</p><h2 id="一个使用尺寸类的例子"><a href="#一个使用尺寸类的例子" class="headerlink" title="一个使用尺寸类的例子"></a>一个使用尺寸类的例子</h2><p>相反，让我们使用 <code>Apple</code> 的尺寸类系统来决定 <code>DynamicStack</code> 应该在底层使用 <code>HStack</code> 还是 <code>VStack</code> 。这样做的好处不仅仅是在引入 <code>GeometeryReader</code> 之前保留同样紧凑的布局，并且会使 <code>DynamicStack</code> 在开始的时候以一种和系统组件类似的方式在所有设备和方向上构建。</p><p>为了观察当前水平方向的尺寸，我们需要用到 <a href="https://swiftbysundell.com/articles/swiftui-state-management-guide/#observing-and-modifying-the-environment" target="_blank" rel="noopener">SwiftUI 环境系统</a>  —  通过在 <code>DynamicStack</code> 中声明 <code>@Environment</code> - 标记属性（带有  <code>horizontalSizeClass</code> <a href="https://swiftbysundell.com/articles/the-power-of-key-paths-in-swift/" target="_blank" rel="noopener">关键路径</a>），将会使我们在视图内容中切换到当前 <code>sizeClass</code> 的值：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DynamicStack</span>&lt;<span class="title">Content</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    @<span class="type">Environment</span>(\.horizontalSizeClass) <span class="keyword">private</span> <span class="keyword">var</span> sizeClass</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> sizeClass &#123;</span><br><span class="line">        <span class="keyword">case</span> .regular:</span><br><span class="line">            hStack</span><br><span class="line">        <span class="keyword">case</span> .compact, .<span class="keyword">none</span>:</span><br><span class="line">            vStack</span><br><span class="line">        @unknown <span class="keyword">default</span>:</span><br><span class="line">            vStack</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">extension</span> <span class="title">DynamicStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hStack: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span>(</span><br><span class="line">            alignment: verticalAlignment,</span><br><span class="line">            spacing: spacing,</span><br><span class="line">            content: content</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> vStack: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(</span><br><span class="line">            alignment: horizontalAlignment,</span><br><span class="line">            spacing: spacing,</span><br><span class="line">            content: content</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过以上操作，<code>LoginActionsView</code> 将可以在常规的尺寸渲染时动态切换成水平布局（例如在大尺寸的 <code>iPhone</code> 使用横屏，或者全屏 <code>iPad</code> 上的任一方向），而其它所有尺寸的配置使用垂直布局。所有这些仍然使用紧凑垂直布局，它使用的空间不超过渲染其内容所需的空间。</p><h2 id="使用布局协议"><a href="#使用布局协议" class="headerlink" title="使用布局协议"></a>使用布局协议</h2><p>虽然我们最后已经用了非常棒的解决方案，可以在所有支持 <code>SwiftUI</code>  的 <code>iOS</code> 版本中使用，但也让我们来探索一下在 <code>iOS 16</code> 中引入的一些新的布局工具（在写这篇文章时，它作为 <code>Xcode 14</code> 的一部分仍在测试阶段） </p><p>其中一个工具是新的 <code>Layout</code> 协议，它既能让我们创建完整的自定义布局，直接集成到 <code>SwiftUI</code>  的布局系统中，同时也提供给我们一种更丝滑更动画的方式在各种布局之间动态切换 。</p><p>这都是因为事实证明 <code>Layout</code> 不仅仅是我们第三方开发者的 <code>API</code> ，<code>Apple</code> 也让 <code>SwiftUI</code> 自己的布局容器使用这个新协议 。所以，与其直接使用 <code>HStack</code> 和 <code>VStack</code> 作为容器视图，不如将它们作为符合 <code>Layout</code> 的实例，使用 <code>AnyLayout</code> 类型进行包装 — 就像这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">extension</span> <span class="title">DynamicStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> currentLayout: <span class="type">AnyLayout</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> sizeClass &#123;</span><br><span class="line">        <span class="keyword">case</span> .regular, .<span class="keyword">none</span>:</span><br><span class="line">            <span class="keyword">return</span> horizontalLayout</span><br><span class="line">        <span class="keyword">case</span> .compact:</span><br><span class="line">            <span class="keyword">return</span> verticalLayout</span><br><span class="line">        @unknown <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> verticalLayout</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> horizontalLayout: <span class="type">AnyLayout</span> &#123;</span><br><span class="line">        <span class="type">AnyLayout</span>(<span class="type">HStack</span>(</span><br><span class="line">            alignment: verticalAlignment,</span><br><span class="line">            spacing: spacing</span><br><span class="line">        ))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> verticalLayout: <span class="type">AnyLayout</span> &#123;</span><br><span class="line">        <span class="type">AnyLayout</span>(<span class="type">VStack</span>(</span><br><span class="line">            alignment: horizontalAlignment,</span><br><span class="line">            spacing: spacing</span><br><span class="line">        ))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的操作是可行的，因为当 <code>HStack</code> 和 <code>VStack</code> 的内容类型是 <code>EmptyView</code> 时，它们都符合新的 <code>Layout</code> 协议（当内容为空时就是这种情况），让我们来看一下<code>SwiftUI</code>  的 公共接口</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DynamicStack</span>&lt;<span class="title">Content</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        currentLayout(content)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  注意：由于回归， <code>Xcode 14 beta 3</code> 中省略了以上条件的一致性，根据 <code>SwiftUI</code> 团队的 <a href="https://twitter.com/ricketson_/status/1544784314453282817" target="_blank" rel="noopener">Matt Ricketson 的说法</a>，可以直接使用底层的 <code>_HStackLayout</code> 和 <code>_VStackLayout</code> 类型作为临时的解决方法。并希望能在未来测试版本中修复。    </p></blockquote><p>现在我们能通过使用新的 <code>currentLayout</code> 解决使用什么布局，现在我们来更新 <code>body</code> 的实现，简单调用从该属性返回的 <code>AnyLayout</code> ，就像函数一样 — 像这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DynamicStack</span>&lt;<span class="title">Content</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        currentLayout(content)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  我们之所以能像一个函数一样调用布局方法（尽管它实际上是一个结构）是因为 <code>Layout</code> 协议使用了 <code>Swift</code> <a href="https://swiftbysundell.com/articles/exploring-swift-5-2s-new-functional-features/#calling-types-as-functions" target="_blank" rel="noopener">”像函数一样调用“ 的特性</a></p></blockquote><p>那么我们之前的方案和上面基于布局的方案有什么区别呢？关键的区别在于（除了后者需要 <code>iOS 16</code> ）切换布局可以保留正在渲染的底层视图的标识，而在 <code>HStack</code> 和 <code>VStack</code> 之间切换就不会这样。这样做会令动画更流畅，例如在切换设备方向时，我们也有可能在执行此类更改时获得小幅的性能提升（因为 <code>SwiftUI</code> 总是在其视图层次结构为静态时尽可能表现最佳）</p><h2 id="选择合适的视图"><a href="#选择合适的视图" class="headerlink" title="选择合适的视图"></a>选择合适的视图</h2><p>但我们还没有结束，因为 <code>iOS 16</code> 也给了我们其他有趣的新的布局工具，它有可能也能用于实现 <code>DynamicStack</code>  — 一种全新的视图类型，名字叫做 <code>ViewThatFits</code> 。就像字面意思一样，这种新的容器将会在我们初始化时传递的候选列表中，基于当前上下文挑选出最优视图。</p><p>在我们的例子中，这意味着我们能同时把 <code>HStack</code> 和 <code>VStack</code> 传递给它，并且代表我们在它们中间自动切换。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DynamicStack</span>&lt;<span class="title">Content</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ViewThatFits</span> &#123;</span><br><span class="line">            <span class="type">HStack</span>(</span><br><span class="line">                alignment: verticalAlignment,</span><br><span class="line">                spacing: spacing,</span><br><span class="line">                content: content</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="type">VStack</span>(</span><br><span class="line">                alignment: horizontalAlignment,</span><br><span class="line">                spacing: spacing,</span><br><span class="line">                content: content</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：在这种情况下，我们首先放置 <code>HStack</code> 是很重要的，因为 <code>VStack</code> 可能总是合适的，即使在我们希望布局是横向的情况下（例如 <code>iPad</code> 的全屏模式）。同样重要的是要指出，上述基于 <code>ViewThatFits</code> 的技术将会始终尝试 <code>HStack</code> ，即使在用紧凑尺寸渲染布局时也是如此，只有在 <code>HStack</code> 不适合时才会选择基于<code>VStack</code> 的布局。  </p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上就是通过四种不同的方式实现 <code>DynamicStack</code> 视图，它可以根据当前内容在 <code>HStack</code> 和 <code>VStack</code> 之间动态切换。</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;SwiftUI&lt;/code&gt; 的各种堆栈是许多框架中最基本的布局工具，能够让我们定义组视图，这些组视图可以按照水平、垂直或覆盖视图对齐。&lt;/p&gt;
&lt;p&gt;当涉及到水平和垂直的变体时( &lt;code&gt;HStack&lt;/code&gt; 和 &lt;code&gt;VStack&lt;/code&gt; )，我们需要在这两者之间动态的切换。举个例子，假如我们正在构建一个 &lt;code&gt;app&lt;/code&gt; 其中包含 &lt;code&gt;LoginActionsView&lt;/code&gt; ，一个让用户登录时在列表中选择操作的类：&lt;/p&gt;
    
    </summary>
    
      <category term="SwiftUI" scheme="https://fanbaoying.github.io/categories/SwiftUI/"/>
    
    
      <category term="iOS" scheme="https://fanbaoying.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>第三方库并不是必须的</title>
    <link href="https://fanbaoying.github.io/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%B9%B6%E4%B8%8D%E6%98%AF%E5%BF%85%E9%A1%BB%E7%9A%84/"/>
    <id>https://fanbaoying.github.io/第三方库并不是必须的/</id>
    <published>2022-09-26T03:56:17.000Z</published>
    <updated>2022-09-26T04:00:17.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我在Lyft的八年间，很多产品经理以及工程师经常想往我们 app 里添加第三方库。有时候集成一个特定的库（比如 <strong>PayPal</strong>）是必须的，有时候是避免去开发一些非常复杂的功能，有时候仅仅只是避免c重复造轮子。</p><p>虽然这些都是合理的考量，但使用第三方库的风险和相关成本往往被忽视或误解。在某些情况下，风险是值得的，但是在决定冒险之前，首先要能够明确的定义风险。为了使风险评估更加的透明和一致，我们制定了一个流程来衡量我们将其集成到app有多大的风险。</p><a id="more"></a><h2 id="风险"><a href="#风险" class="headerlink" title="风险"></a>风险</h2><p>大多数大型组织，包括我们，都有某种形式的代码审查，作为开发实践的一部分。对这些团队来说，添加一个第三方库就相当于添加了一堆由不属于团队成员开发，未经审查的代码。这破坏了团队一直坚持的代码审查原则，交付了质量未知的代码。这给app的运行方式以及长期开发带来了风险，对于大型团队而言，更是对整体业务带来了风险。</p><h3 id="运行时风险"><a href="#运行时风险" class="headerlink" title="运行时风险"></a>运行时风险</h3><p>库代码通常来说，对于系统资源，和app拥有相同级别的访问权限，但它们不一定应用团队为管理这些资源而制定的最佳实践。这意味着它们可以在没有限制的情况下访问磁盘，网络，内存，CPU等等，因此，它们可以（过度）将文件写入磁盘，使用未优化的代码占用内存或CPU，导致死锁或主线程延迟，下载（和上传！）大量数据等等。更糟糕的是他们会导致崩溃，甚至崩溃循环</p><p>其中许多情况直到 app 已经上架才被发现，在这种情况下，修复它需要创建一个新版本，并通过审核，这通常需要大量时间和成本。这种风险可以通过一个变量控制是否调用来进行一定程度的控制，但是这种方法也并非万无一失（看下文）。</p><h3 id="开发风险"><a href="#开发风险" class="headerlink" title="开发风险"></a>开发风险</h3><p>引用一个同事的话：“每一行代码都是一种负担”，对不是你自己写的代码而言，这句话更甚。库在适配新技术或API时可能很慢，这阻碍了代码开发，或者太快，导致开发的版本过高。</p><p>库在采用新技术或API时可能很慢，阻碍了代码库，或者太快，导致部署目标太高。每当 Apple 和 Google 每年发布一个新 OS 版本时，他们通常要求开发人员根据SDK的变化更新代码，库开发人员也必须这样做。这需要协调一致的努力、优先事项的一致性以及及时完成工作的能力。</p><p>随着移动平台的不断变化，以及团队（成员）也不是一成不变，这将会成为一个持续不断的风险。当被集成的库不存在了，而库又需要更新时，会花很多时间来决定谁来做。事实证明一旦一个库存在，就很少也很难被移除，因此我们将其视为长期维护成本。</p><h3 id="商业风险"><a href="#商业风险" class="headerlink" title="商业风险"></a>商业风险</h3><p>如同我上面所说，现代的操作系统并没有对 app 代码和库代码进行区分，因此除了系统资源之外，它们还可以访问用户信息。作为 app 的开发者，我们负责恰当的使用这部分信息，也需要为任何第三方库负责。</p><p>如果用户给了 Lyft app 地理位置授权，任何第三方库也将自动得获得授权。他们可以将那些（地理位置）数据上传到自己服务器，竞对服务器，或者谁知道还有什么地方。当一个库需要我们没有的权限时，那问题就更大了。</p><p>同样，一个系统的安全取决于其最薄弱的环节，但如果其中包含未经审核的代码，那么你就不知道它到底有多安全。你精心设计的安全编码实践可能会被一个行为不当的库所破坏。苹果和谷歌实施的任何政策都是如此，例如“你不得对用户追踪”。</p><h2 id="减少风险"><a href="#减少风险" class="headerlink" title="减少风险"></a>减少风险</h2><p>当对一个库（是否）进行使用评估时，我们首先要问几个问题，以了解对库的需求。</p><h3 id="我们内部能做么？"><a href="#我们内部能做么？" class="headerlink" title="我们内部能做么？"></a>我们内部能做么？</h3><p>有时候我们只需要简单的粘贴复制真正需要的部分。在更复杂的场景中，库与自定义后端通信，我们对该API进行了逆向，并自己构建了一个迷你SDK（同样，只构建了我们需要的部分）。在90%的情况下，这是首选，但在与非常特定的供应商或需求集成时并不总是可行。</p><h3 id="有多少用户从该库中受益？"><a href="#有多少用户从该库中受益？" class="headerlink" title="有多少用户从该库中受益？"></a>有多少用户从该库中受益？</h3><p>在一种情况下，我们正在考虑添加一个风险很大的库（根据下面的标准），旨在为一小部分用户提供服务，同时将我们的所有用户都暴露在该库中。 对于我们认为会从中受益的一小部分客户，我们冒了为我们所有用户带来问题的风险。</p><h3 id="这个库有什么传递依赖？"><a href="#这个库有什么传递依赖？" class="headerlink" title="这个库有什么传递依赖？"></a>这个库有什么传递依赖？</h3><p>我们还需要评估库的所有依赖项的以下标准。</p><h3 id="退出标准是什么？"><a href="#退出标准是什么？" class="headerlink" title="退出标准是什么？"></a>退出标准是什么？</h3><p>如果集成成功，是否有办法将其转移到内部？ 如果不成功，是否有办法删除？</p><h2 id="评价标准"><a href="#评价标准" class="headerlink" title="评价标准"></a>评价标准</h2><p>如果此时团队仍然希望集成库，我们要求他们根据一组标准对库进行“评分”。下面的列表并不全面，但应该能很好地说明我们希望看到的。</p><h3 id="阻断标准"><a href="#阻断标准" class="headerlink" title="阻断标准"></a>阻断标准</h3><p>这些标准将阻止我们从技术上或者公司政策上集成此库，在进行下一步之前，我们必须解决：</p><p><strong>过高的</strong> <strong>deployment target/target SDKs。</strong> 我们支持过去4年主流的操作系统（版本），所以第三方库至少也需要支持一样多。</p><p><strong>许可证不正确/缺失。</strong> 我们将许可文件与应用捆绑在一起，以确保我们可以合法使用代码并将其归属于许可持有人。</p><p><strong>没有冲突的传递依赖关系。</strong> 一个库不能有一个我们已经包含但版本不同的传递依赖项。</p><p><strong>不显示它自己的 UI 。</strong> 我们非常小心地使我们的产品看起来尽可能统一，定制用户界面对此不利。</p><p><strong>它不使用私有 API 。</strong> 我们不愿意冒 app 因使用私有 API 而被拒绝的风险。</p><h3 id="主要关注点"><a href="#主要关注点" class="headerlink" title="主要关注点"></a>主要关注点</h3><p><strong>闭源。</strong> 访问源代码意味着我们可以选择我们想要包含的库的哪些部分，以及如何将该源代码与应用程序的其余部分捆绑在一起。 对于我们来说，一个封闭源代码的二进制发行版更难集成。</p><p><strong>编译时有警告。</strong> 我们启用了“警告视为错误”，具有编译警告的库是库整体质量（下降）的良好指示。</p><p><strong>糟糕的文档。</strong> 我们希望有高质量的内联文档，外部”如何使用“文档，以及有意义的更新日志。</p><p><strong>二进制体积。</strong> 这个库有多大？一些库提供了很多功能，而我们只需要其中的一小部分。尤其是在没有访问源码权限的情况下，这通常是一个全有或全无的情况。</p><p><strong>外部的网络流量。</strong> 与我们无法控制的上游服务器/端点通信的库可能会在服务器关闭、错误数据被发回等时关闭整个应用程序。这也与我上面提到的隐私问题相同。</p><p><strong>技术支持。</strong> 当事情不能正常工作时，我们需要能够报告/上报问题，并在合理的时间内解决问题。开源项目通常由志愿者维护，也很难有一个时间线，但至少我们可以自己进行修改。这在闭源项目是不可能的。</p><p><strong>无法禁用。</strong> 虽然大多数库特别要求我们初始化它，但有些库在实例化时更“主动”，并且在我们不调用它的情况下可以自己执行工作。这意味着当库导致问题时，我们无法通过功能变量或其他机制将其关闭。</p><p>我们为所有这些（和其他一些）标准分配了点数，并要求工程师为他们想要集成的库汇总这些点数。虽然默认情况下，低分数并不难被拒绝，但我们通常会要求更多的理由来继续前进。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>虽然这个过程看起来非常严格，在许多情况下，潜在风险是假设的，但我们有我在这篇博文中描述的每个场景的实际例子。将评估记录下来并公开，也有助于将相对风险传达给不熟悉移动平台工作方式的人，并证明我们没有随意评估风险。</p><p>此外，我不想声称每一个第三方库本质上都是坏的。事实上，我们在Lyft使用了很多：<code>RxSwift</code>和<code>RxJava</code>、<code>Bugsnag</code>的<code>SDK</code>、<code>Google Maps</code>、<code>Tensorflow</code>，以及一些较小的用于非常特定的用例。但所有这些要么都经过了充分审查，要么我们已经决定风险值得收益，同时对这些风险和收益的真正含义有了清晰的认识。</p><p>最后，作为一个专业开发人员提示：始终在库的<code>API</code>之上创建自己的抽象，不要直接调用它们的<code>API</code>。这使得将来替换（或删除）底层库更加容易，再次减轻了与长期开发相关的一些风险。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我在Lyft的八年间，很多产品经理以及工程师经常想往我们 app 里添加第三方库。有时候集成一个特定的库（比如 &lt;strong&gt;PayPal&lt;/strong&gt;）是必须的，有时候是避免去开发一些非常复杂的功能，有时候仅仅只是避免c重复造轮子。&lt;/p&gt;
&lt;p&gt;虽然这些都是合理的考量，但使用第三方库的风险和相关成本往往被忽视或误解。在某些情况下，风险是值得的，但是在决定冒险之前，首先要能够明确的定义风险。为了使风险评估更加的透明和一致，我们制定了一个流程来衡量我们将其集成到app有多大的风险。&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://fanbaoying.github.io/categories/Swift/"/>
    
    
      <category term="iOS" scheme="https://fanbaoying.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>使用 SwiftUI 的 Eager Grids</title>
    <link href="https://fanbaoying.github.io/%E4%BD%BF%E7%94%A8-SwiftUI-%E7%9A%84-Eager-Grids/"/>
    <id>https://fanbaoying.github.io/使用-SwiftUI-的-Eager-Grids/</id>
    <published>2022-09-26T03:56:08.000Z</published>
    <updated>2022-09-26T03:58:30.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>早在 2020 年，我们就拥有了在 SwiftUI（LazyVGrid 和 LazyHGrid）中绘制网格的新视图控件。两年后，我们又获得了另一种在网格（Grid）中显示视图的视图控件。但是，这些新增功能非常不同，不仅在您使用它的方式上，而且在它内部的行为方式上。 2020 年的观点很懒惰。这些新人很热心。</p><a id="more"></a><p><code>lazy grids</code>不会渲染甚至实例化屏幕外的视图。单元格视图仅在它们被滚动时创建，并且在它们滚动时停止计算。</p><p>这篇文章的主题 Eager Grids 正好相反。 SwiftUI 不在乎它们是在屏幕上还是在屏幕外。所有视图都被同等对待。这可能会出现大量单元的性能问题。然而，多少是一个很大的数字是一个不可能回答的问题。这将取决于您的单元格视图的复杂性。</p><p>所以如果<code>lazy grids</code>表现更好，这就引出了一个问题，我为什么要使用<code>Eager Grids</code>？事实是，<code>Eager Grids</code>比<code>lazy grids</code>更有优势，反之亦然。例如，<code>Eager Grids</code>支持列跨越，而<code>lazy grids</code>不支持。归根结底，性能并不是唯一需要考虑的因素。在本文中，我们将探索这些新网格，以便您在选择其中一个时做出明智的决定。</p><h2 id="关于容器视图的一句话"><a href="#关于容器视图的一句话" class="headerlink" title="关于容器视图的一句话"></a>关于容器视图的一句话</h2><p>在我们开始探索 Grid 视图之前，让我先谈谈容器视图。也就是说，接收视图构建器并以特定方式呈现其内容的视图（HStack、VStack、ZStack、Lazy*Grid、Group、List、ForEach 等）。请耐心等待，这将在以后有所帮助。</p><p>有两种类型的容器视图。我认为这些类型没有正式名称。我只会称它们为“有布局的容器”和“没有布局的容器”。用几个例子可以更好地解释这一点：</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-group.png" alt="eagergrids-group"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">Group</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Hello"</span>)</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"World"</span>)</span><br><span class="line">                <span class="type">Image</span>(systemName: <span class="string">"network"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .padding(<span class="number">10</span>)</span><br><span class="line">            .border(.red)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样可以这么写:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"Hello"</span>)</span><br><span class="line">                .padding(<span class="number">10</span>)</span><br><span class="line">                .border(.red)</span><br><span class="line">            </span><br><span class="line">            <span class="type">Text</span>(<span class="string">"World"</span>)</span><br><span class="line">                .padding(<span class="number">10</span>)</span><br><span class="line">                .border(.red)</span><br><span class="line">            </span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="string">"network"</span>)</span><br><span class="line">                .padding(<span class="number">10</span>)</span><br><span class="line">                .border(.red)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从示例中可以看出，Group 修饰符分别应用于每个包含的视图。此外，Group 视图本身没有提供任何布局，也没有任何自己的几何图形。所有布局都由其父级执行：HStack。</p><p>但是，具有布局的容器（例如 HStack）上的修饰符应用于容器，该容器确实具有自己的几何形状：</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-hstack.png" alt="eagergrids-hstack"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"Hello"</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"World"</span>)</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="string">"network"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding(<span class="number">10</span>)</span><br><span class="line">        .border(.red)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可能会问，当 Group 没有父级时会发生什么。这不是问题。当没有布局容器存在时，SwiftUI 会隐式使用 VStack。这就是为什么这也有效：</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-nocontainer.png" alt="eagergrids-nocontainer"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;        </span><br><span class="line">        <span class="type">Text</span>(<span class="string">"Hello"</span>)</span><br><span class="line">        <span class="type">Text</span>(<span class="string">"World"</span>)</span><br><span class="line">        <span class="type">Image</span>(systemName: <span class="string">"network"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一个没有布局的容器示例是 <code>ForEach</code>：</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-foreach.png" alt="eagergrids-foreach"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">ForEach</span>(<span class="number">0</span>..&lt;<span class="number">5</span>) &#123; idx <span class="keyword">in</span></span><br><span class="line">                <span class="type">Text</span>(<span class="string">"<span class="subst">\(idx)</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .padding(<span class="number">10</span>)</span><br><span class="line">            .border(.blue)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这与网格有什么关系？我们将在下一节中找到答案。</p><h2 id="我们的第一个网格"><a href="#我们的第一个网格" class="headerlink" title="我们的第一个网格"></a>我们的第一个网格</h2><p>让我们建立我们的第一个网格。语法非常简单。您使用 Grid 容器视图，然后通过对 GridRow 容器内的单元格视图进行分组来定义其行。</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-first-grid.png" alt="eagergrids-first-grid"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Grid</span> &#123;</span><br><span class="line">            <span class="type">GridRow</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Cell #1"</span>)</span><br><span class="line">                    .padding(<span class="number">20</span>)</span><br><span class="line">                    .border(.red)</span><br><span class="line"></span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Cell #2"</span>)</span><br><span class="line">                    .padding(<span class="number">20</span>)</span><br><span class="line">                    .border(.red)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">GridRow</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Cell #3"</span>)</span><br><span class="line">                    .padding(<span class="number">20</span>)</span><br><span class="line">                    .border(.green)</span><br><span class="line"></span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Cell #4"</span>)</span><br><span class="line">                    .padding(<span class="number">20</span>)</span><br><span class="line">                    .border(.green)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .padding(<span class="number">10</span>)</span><br><span class="line">        .border(.blue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是我们谈论容器的地方。如果我告诉你 Grid 是一个带有布局的容器，但 GridRow 不是。这意味着我们可以重写我们的代码并获得相同的结果：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Grid</span> &#123;</span><br><span class="line">            <span class="type">GridRow</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Cell #1"</span>)</span><br><span class="line"></span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Cell #2"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .padding(<span class="number">20</span>)</span><br><span class="line">            .border(.red)</span><br><span class="line"></span><br><span class="line">            <span class="type">GridRow</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Cell #3"</span>)</span><br><span class="line"></span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Cell #4"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .padding(<span class="number">20</span>)</span><br><span class="line">            .border(.green)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding(<span class="number">10</span>)</span><br><span class="line">        .border(.blue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，并非所有行都具有相同数量的单元格。尽管这里的大多数示例都可以，但每一行可以包含任意数量的单元格。</p><h2 id="探索网格选项"><a href="#探索网格选项" class="headerlink" title="探索网格选项"></a>探索网格选项</h2><p>在以下部分中，我们将探讨不同的网格大小、对齐和跨越选项。但为了让事情变得更容易，我创建了一个名为 Grid Trainer 的小应用程序。该应用程序可让您以交互方式使用所有这些网格参数。当您更改网格时，该应用程序还将向您显示生成您创建的网格的代码。</p><p>整个应用程序位于一个 swift 文件中，因此只需几秒钟即可完成设置。只需创建一个新的 Xcode 项目，将 ContentView.swift 文件替换为此 gist 文件中的文件，就可以开始了。请注意，虽然我在设计应用程序时主要考虑了 macOS，但该应用程序在 iPad 上也能流畅运行。无需更改。</p><p>当您阅读以下部分时，最好运行 Grid Trainer 应用程序并测试您对网格的理解。试着看看你是否可以预测当你改变参数时网格会做什么。每次你得到你所期望的不同结果时，你都会学到一些关于网格的新东西。如果你得到你所期望的，你会重申你已经知道的。</p><h3 id="空间"><a href="#空间" class="headerlink" title="空间"></a>空间</h3><p>与 HStack 和 VStack 类似，Grid 容器具有用于间距的垂直和水平参数。如果未指定，则将使用系统默认值。</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-spacing.png" alt="eagergrids-spacing"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Grid</span>(horizontalSpacing: <span class="number">5.0</span>, verticalSpacing: <span class="number">15.0</span>) &#123;</span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.20</span>).gradient)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.40</span>).gradient)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.60</span>).gradient)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.80</span>).gradient)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.80</span>).gradient)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.60</span>).gradient)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.40</span>).gradient)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.20</span>).gradient)</span><br><span class="line">    &#125;</span><br><span class="line">    .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="列宽，行高"><a href="#列宽，行高" class="headerlink" title="列宽，行高"></a>列宽，行高</h3><p>网格中的单元格是视图，视图会适应父级提供的大小。在这种情况下，父级是网格。通常，列与其中最宽的单元格一样宽。在下面的示例中，橙色列的宽度由第二行中最宽的单元格决定。身高也是如此。在示例中，第二行与行中最高的紫色单元格一样高。</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-widths.png" alt="eagergrids-widths"></p><h3 id="未定义大小的单元"><a href="#未定义大小的单元" class="headerlink" title="未定义大小的单元"></a>未定义大小的单元</h3><p>默认情况下，网格将为单元格提供尽可能多的空间。那么如果一个网格是由一个 Rectangle() 视图组成的，会发生什么呢？如您所知，没有框架修饰符的形状喜欢增长以填充父级提供的所有空间。在这种情况下，网格将增长以填充其父级提供的所有空间。</p><p>在下面的示例中，绿色单元格在其水平维度上不受限制，因此它使用了所有可用空间。网格尽可能地增长，绿色单元格填充空间。然而，蓝色单元格被框架修改器限制为 50.0 pt 宽度。虚线表示网格边界。</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-parent.png" alt="eagergrids-parent"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dash = <span class="type">StrokeStyle</span>(lineWidth: <span class="number">1.0</span>, lineCap: .round, lineJoin: .miter, dash: [<span class="number">5</span>, <span class="number">5</span>], dashPhase: <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HStack</span>(spacing: <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Circle</span>().fill(.yellow).frame(width: <span class="number">30</span>, height: <span class="number">30</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="type">Grid</span>(horizontalSpacing: <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">GridRow</span> &#123;</span><br><span class="line">                    <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">15.0</span>)</span><br><span class="line">                        .fill(.green.gradient)</span><br><span class="line">                        .frame(height: <span class="number">50</span>)</span><br><span class="line">                    </span><br><span class="line">                    <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">15.0</span>)</span><br><span class="line">                        .fill(.blue.gradient)</span><br><span class="line">                        .frame(width: <span class="number">50</span>, height: <span class="number">50</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .overlay &#123; <span class="type">Rectangle</span>().stroke(style: dash) &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Circle</span>().fill(.yellow).frame(width: <span class="number">30</span>, height: <span class="number">30</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到目前为止，没有什么太令人惊讶的。这与我们从使用 HStack 容器的第一天起就看到的行为相同。但是，Grids 在这里为我们提供了一个选择。我们可以让单元格避免让网格增长以获得额外的空间。例如，对于水平维度，单元格只会增长到与其列中最宽的单元格一样多的空间。这样的单元格在确定列宽方面没有任何作用。这是通过应用于相关单元格的 gridCellUnsizedAxes() 修饰符来完成的。它接收一个 Axis.Set 值。它可以是 .horizontal、.vertical 或两者的组合：[.horizontal, .vertical]。这告诉网格给定单元格选择不要求额外空间的维度。</p><p>如果您还没有，现在是开始使用 Grid Trainer 应用程序并挑战您迄今为止的知识的好时机。</p><p>在下面的示例中，红色单元格在水平轴上未调整大小，使其仅与绿色单元格一样大。即使父母提供更多，红细胞也不会接受。</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-unsized.png" alt="eagergrids-unsized"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Grid</span> &#123;</span><br><span class="line">  <span class="type">GridRow</span> &#123;</span><br><span class="line">    <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>)</span><br><span class="line">      .fill(.green.gradient)</span><br><span class="line">      .frame(width: <span class="number">160.0</span>, height: <span class="number">80.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>)</span><br><span class="line">      .fill(.blue.gradient)</span><br><span class="line">      .frame(width: <span class="number">80.0</span>, height: <span class="number">80.0</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">GridRow</span> &#123;</span><br><span class="line">    <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>)</span><br><span class="line">      .fill(.red.gradient)</span><br><span class="line">      .frame(height: <span class="number">80.0</span>)</span><br><span class="line">      .gridCellUnsizedAxes(.horizontal)</span><br><span class="line"></span><br><span class="line">    <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>)</span><br><span class="line">      .fill(.yellow.gradient)</span><br><span class="line">      .frame(width: <span class="number">80.0</span>, height: <span class="number">80.0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对齐路线"><a href="#对齐路线" class="headerlink" title="对齐路线"></a>对齐路线</h3><h4 id="网格对齐"><a href="#网格对齐" class="headerlink" title="网格对齐"></a>网格对齐</h4><p>当单元格的视图小于可用空间时，对齐方式将取决于几个参数。第一个要考虑的参数是 Grid(alignment: Alignment)。它影响网格中的所有单元格，除非被下一个参数之一覆盖。如果未指定，则默认为 .center。</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-grid-alignment.gif" alt="eagergrid-grid-alignment"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Grid</span>(alignment: .topLeading) &#123;</span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>().fill(.yellow.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="type">Rectangle</span>().fill(.green.gradient)</span><br><span class="line">            .frame(width: <span class="number">100.0</span>, height: <span class="number">100.0</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>().fill(.orange.gradient)</span><br><span class="line">            .frame(width: <span class="number">100.0</span>, height: <span class="number">100.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(.red.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="行垂直对齐"><a href="#行垂直对齐" class="headerlink" title="行垂直对齐"></a>行垂直对齐</h4><p>您还可以使用 GridRow(alignment: VerticalAlignment) 指定行对齐方式。请注意，在这种情况下，对齐方式只是垂直的。此行中的单元格将结合 Grid 参数和 GridRow 参数。行的垂直对齐将优先于对齐的网格垂直组件。在下面的示例中，具有 .topTrailing 值的网格与 .bottom 垂直行值相结合，会导致第二行中的单元格以 .bottomTrailing 对齐。其他行将使用网格对齐方式（即 .topTrailing）。</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-row-alignment-1.png" alt="eagergrid-row-alignment-1"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Grid</span>(alignment: .topTrailing) &#123;</span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.25</span>).gradient)</span><br><span class="line">            .frame(width: <span class="number">120.0</span>, height: <span class="number">100.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.50</span>).gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.50</span>).gradient)</span><br><span class="line">            .frame(width: <span class="number">120.0</span>, height: <span class="number">100.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">GridRow</span>(alignment: .bottom) &#123;</span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.25</span>).gradient)</span><br><span class="line">            .frame(width: <span class="number">120.0</span>, height: <span class="number">100.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.50</span>).gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.50</span>).gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.25</span>).gradient)</span><br><span class="line">            .frame(width: <span class="number">120.0</span>, height: <span class="number">100.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.50</span>).gradient)</span><br><span class="line">            .frame(width: <span class="number">120.0</span>, height: <span class="number">100.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.50</span>).gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="列水平对齐"><a href="#列水平对齐" class="headerlink" title="列水平对齐"></a>列水平对齐</h4><p>除了指定垂直行对齐方式外，您还可以指定列水平对齐方式。与行对齐的情况一样，该值将与行垂直值和网格的对齐值合并。您使用修饰符 gridColumnAlignment() 指示列的对齐方式</p><p>注意：文档非常清楚。 gridColumnAlignment 只能在每列一个单元格中使用。否则行为未定义。</p><p>在以下示例中，您可以看到所有对齐组合：</p><p>单元格 (1,1)：对齐顶部前导。 （网格对齐）<br>单元格 (1, 2)：对齐的 topTrailing。 （网格对齐+列对齐）<br>单元格（2,1）：对齐的底部前导（网格对齐+行对齐）<br>单元格 (2,2)：对齐的底部尾随（网格对齐 + 行对齐 + 列对齐）</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-column-alignment.png" alt="eagergrids-column-alignment"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Grid</span>(alignment: .topLeading, horizontalSpacing: <span class="number">5.0</span>, verticalSpacing: <span class="number">5.0</span>) &#123;</span><br><span class="line">            <span class="type">GridRow</span> &#123;</span><br><span class="line">                <span class="type">CellView</span>(color: .green, width: <span class="number">80</span>, height: <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">                <span class="type">CellView</span>(color: .yellow, width: <span class="number">80</span>, height: <span class="number">80</span>)</span><br><span class="line">                    .gridColumnAlignment(.trailing)</span><br><span class="line"></span><br><span class="line">                <span class="type">CellView</span>(color: .orange, width: <span class="number">80</span>, height: <span class="number">120</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">GridRow</span>(alignment: .bottom) &#123;</span><br><span class="line">                <span class="type">CellView</span>(color: .green, width: <span class="number">80</span>, height: <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">                <span class="type">CellView</span>(color: .yellow, width: <span class="number">80</span>, height: <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">                <span class="type">CellView</span>(color: .orange, width: <span class="number">80</span>, height: <span class="number">120</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">GridRow</span> &#123;</span><br><span class="line">                <span class="type">CellView</span>(color: .green, width: <span class="number">120</span>, height: <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">                <span class="type">CellView</span>(color: .yellow, width: <span class="number">120</span>, height: <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">                <span class="type">CellView</span>(color: .orange, width: <span class="number">80</span>, height: <span class="number">80</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CellView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> color: <span class="type">Color</span></span><br><span class="line">        <span class="keyword">let</span> width: <span class="type">CGFloat</span></span><br><span class="line">        <span class="keyword">let</span> height: <span class="type">CGFloat</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">            <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>)</span><br><span class="line">                .fill(color.gradient)</span><br><span class="line">                .frame(width: width, height: height)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单元格对齐"><a href="#单元格对齐" class="headerlink" title="单元格对齐"></a>单元格对齐</h4><p>最后，您还可以使用 .gridCellAnchor(_: anchor: UnitPoint) 修饰符为单元格指定单独的对齐方式。此对齐方式将覆盖给定单元格的任何网格、列和行对齐方式。注意参数类型不是Alignment，而是UnitPoint。这意味着除了使用预定义的点 .topLeading、.center 等之外，您还可以创建任意点，例如 UnitPoint(x: 0.25, y: 0.75)：</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-cell-alignment.png" alt="eagergrid-cell-alignment"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Grid</span>(alignment: .topTrailing) &#123;</span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>().fill(.green.gradient)</span><br><span class="line">            .frame(width: <span class="number">120.0</span>, height: <span class="number">100.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(.blue.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">            .gridCellAnchor(<span class="type">UnitPoint</span>(x: <span class="number">0.25</span>, y: <span class="number">0.75</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>().fill(.blue.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(.green.gradient)</span><br><span class="line">            .frame(width: <span class="number">120.0</span>, height: <span class="number">100.0</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文本基线对齐"><a href="#文本基线对齐" class="headerlink" title="文本基线对齐"></a>文本基线对齐</h4><p>除了常见的对齐方式，请记住您还可以使用文本基线对齐方式。对于 Grid 和 GridRow：</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-text-alignment.png" alt="eagergrid-text-alignment"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Grid</span>(alignment: .centerFirstTextBaseline) &#123;</span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">"Align"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="type">Rectangle</span>()</span><br><span class="line">            .fill(.green.gradient.opacity(<span class="number">0.7</span>))</span><br><span class="line">            .frame(width: <span class="number">50</span>, height: <span class="number">50</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.font(.system(size: <span class="number">36</span>))</span><br></pre></td></tr></table></figure><h4 id="没有-GridRow-的行"><a href="#没有-GridRow-的行" class="headerlink" title="没有 GridRow 的行"></a>没有 GridRow 的行</h4><p>如果 Grid 在 GridRow 容器之外有一个视图，则它被用作跨越所有列的单个单元格行。这种类型的单元格的常见用途是创建分隔符。例如，您可以使用 Divider() 视图，或者更复杂的视图，如下例所示。请注意，我们通常不希望分隔线使网格增长到最大值，因此我们使视图在水平轴上未调整大小。这将使分隔线与最宽的行一样宽，但不会更宽。</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-divider.png" alt="eagergrid-divider"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Grid</span>(horizontalSpacing: <span class="number">5.0</span>, verticalSpacing: <span class="number">5.0</span>) &#123;</span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.green.gradient)</span><br><span class="line">        </span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.purple.gradient)</span><br><span class="line">        </span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.blue.gradient)</span><br><span class="line">    &#125;</span><br><span class="line">    .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="type">Rectangle</span>()</span><br><span class="line">        .fill(<span class="type">LinearGradient</span>(colors: [.gray, .clear, .gray], startPoint: .leading, endPoint: .trailing))</span><br><span class="line">        .frame(height: <span class="number">2.0</span>)</span><br><span class="line">        .gridCellUnsizedAxes(.horizontal)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.green.gradient)</span><br><span class="line">        </span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.purple.gradient)</span><br><span class="line">        </span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.blue.gradient)</span><br><span class="line">    &#125;</span><br><span class="line">    .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="列跨越"><a href="#列跨越" class="headerlink" title="列跨越"></a>列跨越</h4><p><code>Eager Grids</code>优于<code>Lazy Grids</code>的优点之一是所有单元几何形状始终是已知的。这使得有一个跨越多列的单元格成为可能。要将单元格配置为跨越，请使用 .gridCellColumns(_ count: Int)</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-spanning.png" alt="eagergrid-spanning"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Grid</span> &#123;</span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.green.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.yellow.gradient)</span><br><span class="line">            .frame(height: <span class="number">50.0</span>)</span><br><span class="line">            .gridCellColumns(<span class="number">3</span>)</span><br><span class="line">            .gridCellUnsizedAxes(.horizontal)</span><br><span class="line">        </span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.purple.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.green.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.yellow.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.orange.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.red.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.purple.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意歧义"><a href="#注意歧义" class="headerlink" title="注意歧义"></a>注意歧义</h4><p>考虑以下示例。我们每行有 4 个单元格。除了第一行的第二个单元格和第二行的第三个单元格之外，每个单元格都是 50.0 pt 宽。这些将尽可能地增长（不扩大网格）。这两个单元格也分别跨越两列。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Grid</span>(horizontalSpacing: <span class="number">20.0</span>, verticalSpacing: <span class="number">20.0</span>) &#123;</span><br><span class="line">            <span class="type">GridRow</span> &#123;</span><br><span class="line">                <span class="type">CellView</span>(width: <span class="number">50.0</span>, color: .green)</span><br><span class="line"></span><br><span class="line">                <span class="type">CellView</span>(color: .purple)</span><br><span class="line">                    .gridCellColumns(<span class="number">2</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="type">CellView</span>(width: <span class="number">50.0</span>, color: .blue)</span><br><span class="line">                </span><br><span class="line">                <span class="type">CellView</span>(width: <span class="number">50.0</span>, color: .yellow)</span><br><span class="line">            &#125;</span><br><span class="line">            .gridCellUnsizedAxes([.horizontal, .vertical])</span><br><span class="line"></span><br><span class="line">            <span class="type">GridRow</span> &#123;</span><br><span class="line">                <span class="type">CellView</span>(width: <span class="number">50.0</span>, color: .green)</span><br><span class="line"></span><br><span class="line">                <span class="type">CellView</span>(width: <span class="number">50.0</span>, color: .purple)</span><br><span class="line">                </span><br><span class="line">                <span class="type">CellView</span>(color: .blue)</span><br><span class="line">                    .gridCellColumns(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">                <span class="type">CellView</span>(width: <span class="number">50.0</span>, color: .yellow)</span><br><span class="line">            &#125;</span><br><span class="line">            .gridCellUnsizedAxes([.horizontal, .vertical])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CellView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> width: <span class="type">CGFloat</span>? = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">let</span> color: <span class="type">Color</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">            <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>)</span><br><span class="line">                .fill(color.gradient)</span><br><span class="line">                .frame(width: width, height: <span class="number">50.0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你认为应该发生什么？如果仔细看，这是“先有鸡还是先有蛋的问题”。如果您查看第一行中的第二个单元格，它应该跨越到以下列。但是第二行中的以下列应该扩展到第三列。那是什么？我们可以满足一个条件或另一个条件，但不能同时满足这两个条件。这是因为第一行查看第二行以确定下一列，而第二行查看第一行以执行相同操作。 SwiftUI 需要以某种方式解决这个问题，如果你运行代码，你会得到以下结果：</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-ambiguity1.png" alt="eagergrid-ambiguity1"></p><p>为了打破平局，一个简单的解决方案是添加第三行：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GridRow</span> &#123;</span><br><span class="line">    <span class="type">CellView</span>(width: <span class="number">50</span>, color: .green)</span><br><span class="line"></span><br><span class="line">    <span class="type">CellView</span>(width: <span class="number">50</span>, color: .purple)</span><br><span class="line"></span><br><span class="line">    <span class="type">CellView</span>(width: <span class="number">50</span>, color: .blue)</span><br><span class="line"></span><br><span class="line">    <span class="type">CellView</span>(width: <span class="number">50</span>, color: .yellow)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三排打破平局，这就是它的样子：</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-ambiguity2.png" alt="eagergrid-ambiguity2"></p><p>如果您不需要第三行，则无论如何都可以添加一个，但高度为零。不过，您可能仍需要处理间距。幸运的是，这并不常见，但我会提到以防您遇到这种情况。</p><h2 id="蜂窝再访"><a href="#蜂窝再访" class="headerlink" title="蜂窝再访"></a>蜂窝再访</h2><p>在文章 <a href="https://swiftui-lab.com/impossible-grids/" target="_blank" rel="noopener">Impossible Grids</a> 中，我们是否探索了<code>Lazy Grid</code>，我写了一个示例，说明如何使用这些网格来呈现蜂窝中的单元格。创建这样的网格是测试网格可能的极限的好方法，所以我想我会重复这个练习，但这次使用<code>Eager Grids</code>。</p><p>此<a href="https://gist.github.com/swiftui-lab/d38440a2281b2e069f81a94baa741073" target="_blank" rel="noopener">gist file</a>中提供了完整的工作网格。如果需要图片来测试代码，可以访问 <a href="https://this-person-does-not-exist.com。您可以下载带有随机面孔的不存在的人的方形图片！它们是人工智能生成的。" target="_blank" rel="noopener">https://this-person-does-not-exist.com。您可以下载带有随机面孔的不存在的人的方形图片！它们是人工智能生成的。</a> 😲 视频中使用的图片来自该网站。</p><h3 id="从方形到六边形的步骤"><a href="#从方形到六边形的步骤" class="headerlink" title="从方形到六边形的步骤"></a>从方形到六边形的步骤</h3><p>我们必须从某个地方开始，所以我们将创建一个方形图像网格，然后逐渐添加代码将我们的简单网格转换为蜂窝。</p><p>到现在为止，您应该具备实现转换所需的所有知识。我将为您提供一个起点和您需要执行的一系列步骤，以便成功实现转换。但是，如果您没有时间，或者遇到困难，您可以检查上述 gist 文件中的代码。该代码有注释，指示它执行的每个步骤的位置。</p><p>请注意，单元格的翻转并不是练习的一部分，但我也将其包含在要点中。</p><p>以下视频显示了起点以及它如何变成蜂窝：</p><p>步骤#1：我们从方形图片网格开始。<br>步骤#2：六边形没有 1:1 的尺寸比。它的高度等于宽度 * cos(.pi/6)。如果您想知道原因，请查看 Impossible Grids，我在其中解释了原因。<br>步骤#3：用提供的六边形剪裁图像。<br>步骤#4：将偶数行和奇数行移动到相对的两侧。偏移量是六边形宽度的一半 + 网格水平间距。<br>第 5 步：行需要重叠，因此您需要将行高减少到四分之三 (3/4)。为什么是 3/4？，再次检查 Impossible Grids，我解释了原因。<br>第 6 步：要删除空白区域，请剪裁网格边框（或将其放在 ScrollView 中，它会为您进行剪裁）。<br>步骤#7：如果使垂直间距等于水平间距，则单元格将均匀分布。</p><h3 id="初始点"><a href="#初始点" class="headerlink" title="初始点"></a>初始点</h3><p>为了让你开始，这里有一些代码。首先，我们需要一些数据：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> image: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> color: <span class="type">Color</span> = .accentColor</span><br><span class="line">    <span class="keyword">var</span> flipped: <span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataModel</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> people: [<span class="type">Person</span>] = [</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Peter"</span>, image: <span class="string">"image-1"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Carlos"</span>, image: <span class="string">"image-2"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Jennifer"</span>, image: <span class="string">"image-3"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Paul"</span>, image: <span class="string">"image-4"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Charlotte"</span>, image: <span class="string">"image-5"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Thomas"</span>, image: <span class="string">"image-6"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Sophia"</span>, image: <span class="string">"image-7"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Isabella"</span>, image: <span class="string">"image-8"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Ivan"</span>, image: <span class="string">"image-9"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Laura"</span>, image: <span class="string">"image-10"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Scott"</span>, image: <span class="string">"image-11"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Henry"</span>, image: <span class="string">"image-12"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Laura"</span>, image: <span class="string">"image-13"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Abigail"</span>, image: <span class="string">"image-14"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"James"</span>, image: <span class="string">"image-15"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Amelia"</span>, image: <span class="string">"image-16"</span>),</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> colors: [<span class="type">Color</span>] = [.yellow, .orange, .red, .purple, .blue, .pink, .green, .indigo]</span><br><span class="line"></span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> rows: [[<span class="type">Person</span>]] = <span class="type">DataModel</span>.buildDemoCells()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> columns: <span class="type">Int</span> &#123; rows.first?.<span class="built_in">count</span> ?? <span class="number">0</span> &#125;    </span><br><span class="line">    <span class="keyword">var</span> colCount: <span class="type">CGFloat</span> &#123; <span class="type">CGFloat</span>(columns) &#125;</span><br><span class="line">    <span class="keyword">var</span> rowCount: <span class="type">CGFloat</span> &#123; <span class="type">CGFloat</span>(rows.<span class="built_in">count</span>) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">buildDemoCells</span><span class="params">()</span></span> -&gt; [[<span class="type">Person</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> array = [[<span class="type">Person</span>]]()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add 7 rows</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">7</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> a = [<span class="type">Person</span>]()</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Add 6 cells per row</span></span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">6</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> idx = (r*<span class="number">6</span> + <span class="built_in">c</span>)</span><br><span class="line">                <span class="keyword">var</span> person = people[idx % people.<span class="built_in">count</span>]</span><br><span class="line">                person.color = colors[idx % colors.<span class="built_in">count</span>]</span><br><span class="line">                a.append(person)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            array.append(a)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="您还需要一个六边形："><a href="#您还需要一个六边形：" class="headerlink" title="您还需要一个六边形："></a>您还需要一个六边形：</h3><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-hexagon.png" alt="eagergrids-hexagon"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HexagonShape</span>: <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">path</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span> -&gt; <span class="type">Path</span> &#123;</span><br><span class="line">        <span class="type">Path</span> &#123; path <span class="keyword">in</span></span><br><span class="line">        </span><br><span class="line">            <span class="keyword">let</span> height = rect.height</span><br><span class="line">            <span class="keyword">let</span> width = rect.height * cos(.pi/<span class="number">6</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">let</span> h = height / <span class="number">4</span></span><br><span class="line">            <span class="keyword">let</span> w = width / <span class="number">2</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">let</span> pt1 = <span class="type">CGPoint</span>(x: rect.midX, y: rect.minY)</span><br><span class="line">            <span class="keyword">let</span> pt2 = <span class="type">CGPoint</span>(x: rect.midX + w, y: h + rect.minY)</span><br><span class="line">            <span class="keyword">let</span> pt3 = <span class="type">CGPoint</span>(x: rect.midX + w, y: h * <span class="number">3</span> + rect.minY)</span><br><span class="line">            <span class="keyword">let</span> pt4 = <span class="type">CGPoint</span>(x: rect.midX, y: rect.maxY)</span><br><span class="line">            <span class="keyword">let</span> pt5 = <span class="type">CGPoint</span>(x: rect.midX - w, y: h * <span class="number">3</span> + rect.minY)</span><br><span class="line">            <span class="keyword">let</span> pt6 = <span class="type">CGPoint</span>(x: rect.midX - w, y: h + rect.minY)</span><br><span class="line">            </span><br><span class="line">            path.addLines([pt1, pt2, pt3, pt4, pt5, pt6])</span><br><span class="line">            </span><br><span class="line">            path.closeSubpath()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，你开始设置网格:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">StateObject</span> <span class="keyword">private</span> <span class="keyword">var</span> model = <span class="type">DataModel</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> cellWidth: <span class="type">CGFloat</span> = <span class="number">100</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> cellHeight: <span class="type">CGFloat</span> = <span class="number">100</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Grid</span>(alignment: .center, horizontalSpacing: <span class="number">2</span>, verticalSpacing: <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="type">ForEach</span>(model.rows.<span class="built_in">indices</span>, id: \.<span class="keyword">self</span>) &#123; rowIdx <span class="keyword">in</span></span><br><span class="line">                    <span class="type">GridRow</span> &#123;</span><br><span class="line">                        <span class="type">ForEach</span>(model.rows[rowIdx].<span class="built_in">indices</span>, id: \.<span class="keyword">self</span>) &#123; personIdx <span class="keyword">in</span></span><br><span class="line">                            </span><br><span class="line">                            <span class="keyword">let</span> person = model.rows[rowIdx][personIdx]</span><br><span class="line">                            </span><br><span class="line">                            <span class="type">Image</span>(person.image)</span><br><span class="line">                                .resizable()</span><br><span class="line">                                .frame(width: cellWidth, height: cellHeight)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(maxWidth: .infinity, maxHeight: .infinity)</span><br><span class="line">        .background(<span class="type">Color</span>.white)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p>今年添加的 Grid 视图使用起来非常简单，并且添加到我们已经拥有的现有布局容器视图中。然而，今年还引入了一个新的布局协议，在将我们的视图放置在屏幕上时，它提供了更多的选择。我们将在以后的文章中对此进行探讨。同时，我希望您喜欢这篇文章和 Grid 教练应用程序。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;早在 2020 年，我们就拥有了在 SwiftUI（LazyVGrid 和 LazyHGrid）中绘制网格的新视图控件。两年后，我们又获得了另一种在网格（Grid）中显示视图的视图控件。但是，这些新增功能非常不同，不仅在您使用它的方式上，而且在它内部的行为方式上。 2020 年的观点很懒惰。这些新人很热心。&lt;/p&gt;
    
    </summary>
    
      <category term="SwiftUI" scheme="https://fanbaoying.github.io/categories/SwiftUI/"/>
    
    
      <category term="iOS" scheme="https://fanbaoying.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 80 删除有序数组中的重复项 II</title>
    <link href="https://fanbaoying.github.io/LeetCode-80-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9-II/"/>
    <id>https://fanbaoying.github.io/LeetCode-80-删除有序数组中的重复项-II/</id>
    <published>2022-09-26T03:46:25.000Z</published>
    <updated>2022-09-26T03:49:49.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 79 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：中等</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给你一个有序数组 <code>nums</code> ，请你 <strong>原地</strong> 删除重复出现的元素，使每个元素 <strong>最多出现两次</strong> ，返回删除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在 <code>原地</code> <strong>修改输入数组</strong> 并在使用 O(1) 额外空间的条件下完成。</p><p><strong>说明：</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢？</p><p>请注意，输入数组是以 <strong>「引用」</strong> 方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span><br><span class="line">int len = removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,1,2,2,3]</span><br><span class="line">输出：5, nums = [1,1,2,2,3]</span><br><span class="line">解释：函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。 不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,0,1,1,1,1,2,3,3]</span><br><span class="line">输出：7, nums = [0,0,1,1,2,3,3]</span><br><span class="line">解释：函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3 。 不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 10^4</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li><li><code>nums</code> 已按升序排列</li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoveDuplicatesFromSortedArrayII</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">inout</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> nums.<span class="built_in">count</span> &gt; <span class="number">2</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> nums.<span class="built_in">count</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> index = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>..&lt;nums.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[index] != nums[index - <span class="number">1</span>] || nums[index] != nums[i] &#123;</span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">                nums[index] = nums[i]</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> index + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：保留一个索引，比较该索引处的元素、索引- 1处的元素以及向前移动的元素。</li><li>时间复杂度： O(n)</li><li>空间复杂度： O(1)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 79 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：中等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 79 单词搜索（Top 100）</title>
    <link href="https://fanbaoying.github.io/LeetCode-79-%E5%8D%95%E8%AF%8D%E6%90%9C%E7%B4%A2%EF%BC%88Top-100%EF%BC%89/"/>
    <id>https://fanbaoying.github.io/LeetCode-79-单词搜索（Top-100）/</id>
    <published>2022-09-26T03:46:09.000Z</published>
    <updated>2022-09-26T03:50:15.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本题为 LeetCode 前 100 高频题</strong></p><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 78 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：中等</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给定一个 <code>m x n</code> 二维字符网格 <code>board</code> 和一个字符串单词 <code>word</code> 。如果 <code>word</code> 存在于网格中，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><p><img src="https://images.xiaozhuanlan.com/photo/2022/01dc86a2e8777fa372b18296e334142b.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCCED&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><p><img src="https://images.xiaozhuanlan.com/photo/2022/07d5e0146bf7c3eeb14504736ed338c0.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;SEE&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 3</strong></p><p><img src="https://files.mdnice.com/user/17787/5d692bd2-0e4b-42cc-8bba-474a600acc8f.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCB&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>m == board.length</code></li><li><code>n = board[i].length</code></li><li><code>1 &lt;= m, n &lt;= 6</code></li><li><code>1 &lt;= word.length &lt;= 15</code></li><li><code>board</code> 和 <code>word</code> 仅由大小写英文字母组成</li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordSearch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">exist</span><span class="params">(board: [[Character]], <span class="number">_</span> word: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> board.<span class="built_in">count</span> &gt; <span class="number">0</span> &amp;&amp; board[<span class="number">0</span>].<span class="built_in">count</span> &gt; <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> m = board.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">let</span> n = board[<span class="number">0</span>].<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">var</span> visited = <span class="type">Array</span>(<span class="built_in">count</span>: m, repeatedValue: <span class="type">Array</span>(<span class="built_in">count</span>: n, repeatedValue: <span class="literal">false</span>))</span><br><span class="line">        <span class="keyword">var</span> wordContent = [<span class="type">Character</span>](word.characters)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;m &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;n &#123;</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == wordContent[<span class="number">0</span>] &amp;&amp; _dfs(board, wordContent, m, n, i, j, &amp;visited, <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">_dfs</span><span class="params">(board: [[Character]], <span class="number">_</span> wordContent: [Character], <span class="number">_</span> m: Int, <span class="number">_</span> n: Int, <span class="number">_</span> i: Int, <span class="number">_</span> j: Int, <span class="keyword">inout</span> <span class="number">_</span> visited: [[Bool]], <span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index == wordContent.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">guard</span> i &gt;= <span class="number">0</span> &amp;&amp; i &lt; m &amp;&amp; j &gt;= <span class="number">0</span> &amp;&amp; j &lt; n <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">guard</span> !visited[i][j] &amp;&amp; board[i][j] == wordContent[index] <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        visited[i][j] = <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> _dfs(board, wordContent, m, n, i + <span class="number">1</span>, j, &amp;visited, index + <span class="number">1</span>) || _dfs(board, wordContent, m, n, i - <span class="number">1</span>, j, &amp;visited, index + <span class="number">1</span>) || _dfs(board, wordContent, m, n, i, j + <span class="number">1</span>, &amp;visited, index + <span class="number">1</span>) || _dfs(board, wordContent, m, n, i, j - <span class="number">1</span>, &amp;visited, index + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        visited[i][j] = <span class="literal">false</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：经典深度优先搜索，上，下，左，右四个方向。</li><li>时间复杂度： O(mn * 4^(k - 1))， m和n分别代表矩阵的宽和高，k为单词大小</li><li>空间复杂度： O(mn)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/word-search/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本题为 LeetCode 前 100 高频题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 78 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：中等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 78 子集（Top 100）</title>
    <link href="https://fanbaoying.github.io/LeetCode-78-%E5%AD%90%E9%9B%86%EF%BC%88Top-100%EF%BC%89/"/>
    <id>https://fanbaoying.github.io/LeetCode-78-子集（Top-100）/</id>
    <published>2022-09-26T03:45:57.000Z</published>
    <updated>2022-09-26T03:50:40.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本题为 LeetCode 前 100 高频题</strong></p><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 77 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：中等</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p><p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：[[],[0]]</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code> 中的所有元素 <strong>互不相同</strong></li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subsets</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">subsets</span><span class="params">(nums: [Int])</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> res = [[<span class="type">Int</span>]]()</span><br><span class="line">        <span class="keyword">var</span> path = [<span class="type">Int</span>]()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> nums = nums.sorted(by: &lt;)</span><br><span class="line">        </span><br><span class="line">        _dfs(&amp;res, &amp;path, nums, <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">_dfs</span><span class="params">(<span class="keyword">inout</span> res: [[Int]], <span class="keyword">inout</span> <span class="number">_</span> path: [Int], <span class="number">_</span> nums: [Int], <span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        <span class="comment">// termination case</span></span><br><span class="line">        res.append(path)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> index..&lt;nums.<span class="built_in">count</span> &#123;</span><br><span class="line">            path.append(nums[i])</span><br><span class="line">            _dfs(&amp;res, &amp;path, nums, i + <span class="number">1</span>)</span><br><span class="line">            path.removeLast()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：桶排序。</li><li>时间复杂度： O(n^n)</li><li>空间复杂度： O(n)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/subsets/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本题为 LeetCode 前 100 高频题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 77 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：中等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 77 组合</title>
    <link href="https://fanbaoying.github.io/LeetCode-77-%E7%BB%84%E5%90%88/"/>
    <id>https://fanbaoying.github.io/LeetCode-77-组合/</id>
    <published>2022-09-26T03:45:45.000Z</published>
    <updated>2022-09-26T03:51:03.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 76 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：中等</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p><p>你可以按 <strong>任何顺序</strong> 返回答案。</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4, k = 2</span><br><span class="line">输出：</span><br><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1, k = 1</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>1 &lt;= n &lt;= 20</code></li><li><code>1 &lt;= k &lt;= n</code></li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Combinations</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">combine</span><span class="params">(n: Int, <span class="number">_</span> k: Int)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> res = [[<span class="type">Int</span>]]()</span><br><span class="line">        <span class="keyword">var</span> path = [<span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">let</span> nums = [<span class="type">Int</span>](<span class="number">1</span>...n)</span><br><span class="line">        </span><br><span class="line">        _dfs(nums, &amp;res, &amp;path, <span class="number">0</span>, k)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">_dfs</span><span class="params">(nums: [Int], <span class="keyword">inout</span> <span class="number">_</span> res: [[Int]], <span class="keyword">inout</span> <span class="number">_</span> path: [Int], <span class="number">_</span> index: Int, <span class="number">_</span> k: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> path.<span class="built_in">count</span> == k &#123;</span><br><span class="line">            res.append([<span class="type">Int</span>](path))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> index..&lt;nums.<span class="built_in">count</span> &#123;</span><br><span class="line">            path.append(nums[i])</span><br><span class="line">            _dfs(nums, &amp;res, &amp;path, i + <span class="number">1</span>, k)</span><br><span class="line">            path.removeLast()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：经典深度优先搜索，子集的另一个版本。</li><li>时间复杂度： O(n^n)</li><li>空间复杂度： O(n)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/combinations/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 76 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：中等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 76 最小覆盖子串（Top 100）</title>
    <link href="https://fanbaoying.github.io/LeetCode-76-%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2%EF%BC%88Top-100%EF%BC%89/"/>
    <id>https://fanbaoying.github.io/LeetCode-76-最小覆盖子串（Top-100）/</id>
    <published>2022-09-26T03:45:27.000Z</published>
    <updated>2022-09-26T03:51:25.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本题为 LeetCode 前 100 高频题</strong></p><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 75 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：困难</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p><p><strong>注意：</strong></p><ul><li>对于 <code>t</code> 中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code> 中该字符数量。</li><li>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</li></ul><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;</span><br><span class="line">输出：&quot;BANC&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a&quot;, t = &quot;a&quot;</span><br><span class="line">输出：&quot;a&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 3</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;a&quot;, t = &quot;aa&quot;</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line">解释: t 中两个字符 &apos;a&apos; 均应包含在 s 的子串中，</span><br><span class="line">因此没有符合条件的子字符串，返回空字符串。</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>1 &lt;= s.length, t.length &lt;= 10^5</code></li><li><code>s</code> 和 <code>t</code> 由英文字母组成</li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinimumWindowSubsequence</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">minWindow</span><span class="params">(<span class="number">_</span> S: String, <span class="number">_</span> T: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> m = <span class="type">T</span>.<span class="built_in">count</span>, n = <span class="type">S</span>.<span class="built_in">count</span>, sChars = <span class="type">Array</span>(<span class="type">S</span>), tChars = <span class="type">Array</span>(<span class="type">T</span>)</span><br><span class="line">        <span class="keyword">var</span> dp = <span class="type">Array</span>(repeating: <span class="type">Array</span>(repeating: <span class="number">0</span>, <span class="built_in">count</span>: n + <span class="number">1</span>), <span class="built_in">count</span>: m + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">var</span> start = <span class="number">0</span>, len = n + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...n &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = i + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...m &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1</span>...n &#123;</span><br><span class="line">                <span class="keyword">if</span> tChars[i - <span class="number">1</span>] == sChars[j - <span class="number">1</span>] &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">1</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...n &#123;</span><br><span class="line">            <span class="keyword">if</span> dp[m][i] != <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> i - dp[m][i] + <span class="number">1</span> &lt; len &#123;</span><br><span class="line">                    len = i - dp[m][i] + <span class="number">1</span></span><br><span class="line">                    start = dp[m][i] - <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> len == n + <span class="number">1</span> ? <span class="string">""</span> : <span class="type">String</span>(sChars[start..&lt;start + len])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：桶排序。</li><li>时间复杂度： O(mn)</li><li>空间复杂度： O(mn)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/minimum-window-substring/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本题为 LeetCode 前 100 高频题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 75 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：困难&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 75 颜色分类（Top 100）</title>
    <link href="https://fanbaoying.github.io/LeetCode-75-%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB%EF%BC%88Top-100%EF%BC%89/"/>
    <id>https://fanbaoying.github.io/LeetCode-75-颜色分类（Top-100）/</id>
    <published>2022-09-26T03:45:16.000Z</published>
    <updated>2022-09-26T03:51:48.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本题为 LeetCode 前 100 高频题</strong></p><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 74 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：中等</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给定一个包含红色、白色和蓝色、共 <code>n</code> 个元素的数组 <code>nums</code> ，<strong>原地</strong>对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p><p>我们使用整数 <code>0</code>、 <code>1</code> 和 <code>2</code> 分别表示红色、白色和蓝色。</p><p>必须在不使用库的 sort 函数的情况下解决这个问题。</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,0,2,1,1,0]</span><br><span class="line">输出：[0,0,1,1,2,2]</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,0,1]</span><br><span class="line">输出：[0,1,2]</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 300</code></li><li><code>nums[i]</code> 为 <code>0</code>、<code>1</code> 或 <code>2</code></li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortColors</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sortColors</span><span class="params">(<span class="number">_</span> nums: <span class="keyword">inout</span> [Int])</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> red = <span class="number">0</span>, blue = nums.<span class="built_in">count</span> - <span class="number">1</span>, i = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> i &lt;= blue &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] == <span class="number">0</span> &#123;</span><br><span class="line">                _swap(&amp;nums, i, red)</span><br><span class="line">                red += <span class="number">1</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[i] == <span class="number">1</span> &#123;</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                _swap(&amp;nums, i, blue)</span><br><span class="line">                blue -= <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">_swap</span>&lt;T&gt;<span class="params">(<span class="number">_</span> nums: <span class="keyword">inout</span> [T], <span class="number">_</span> p: Int, <span class="number">_</span> q: Int)</span></span> &#123;</span><br><span class="line">        (nums[p], nums[q]) = (nums[q], nums[p])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：桶排序。</li><li>时间复杂度： O(n)</li><li>空间复杂度： O(1)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/sort-colors/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本题为 LeetCode 前 100 高频题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 74 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：中等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 74 搜索二维矩阵</title>
    <link href="https://fanbaoying.github.io/LeetCode-74-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/"/>
    <id>https://fanbaoying.github.io/LeetCode-74-搜索二维矩阵/</id>
    <published>2022-09-26T03:44:53.000Z</published>
    <updated>2022-09-26T03:52:12.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 73 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：中等</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>编写一个高效的算法来判断 <code>m x n</code> 矩阵中，是否存在一个目标值。该矩阵具有如下特性：</p><ul><li>每行中的整数从左到右按升序排列。</li><li>每行的第一个整数大于前一行的最后一个整数。</li></ul><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><p><img src="https://images.xiaozhuanlan.com/photo/2022/06c35690518617675c110e41424111a0.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><p><img src="https://images.xiaozhuanlan.com/photo/2022/b2d0c81496e82f7135f7b27cb45e0ca6.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>m == matrix.length</code></li><li><code>n == matrix[i].length</code></li><li><code>1 &lt;= m, n &lt;= 100</code></li><li><code>-10^4 &lt;= matrix[i][j], target &lt;= 10^4</code></li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Search2DMatrix</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">searchMatrix</span><span class="params">(<span class="number">_</span> matrix: [[Int]], <span class="number">_</span> target: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> matrix.<span class="built_in">count</span> == <span class="number">0</span> || matrix[<span class="number">0</span>].<span class="built_in">count</span> == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> rowNum = searchRow(matrix, target)</span><br><span class="line">        <span class="keyword">return</span> searchCol(matrix[rowNum], target)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">searchRow</span><span class="params">(<span class="number">_</span> matrix: [[Int]], <span class="number">_</span> target: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">left</span> = <span class="number">0</span>, <span class="keyword">right</span> = matrix.<span class="built_in">count</span> - <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">left</span> + <span class="number">1</span> &lt; <span class="keyword">right</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = (<span class="keyword">right</span> - <span class="keyword">left</span>) / <span class="number">2</span> + <span class="keyword">left</span></span><br><span class="line">            <span class="keyword">if</span> matrix[mid][<span class="number">0</span>] == target &#123;</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> matrix[mid][<span class="number">0</span>] &lt; target &#123;</span><br><span class="line">                <span class="keyword">left</span> = mid</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">right</span> = mid</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> matrix[<span class="keyword">right</span>][<span class="number">0</span>] &lt;= target ? <span class="keyword">right</span> : <span class="keyword">left</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">searchCol</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> target: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">left</span> = <span class="number">0</span>, <span class="keyword">right</span> = nums.<span class="built_in">count</span> - <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">left</span> &lt;= <span class="keyword">right</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = (<span class="keyword">right</span> - <span class="keyword">left</span>) / <span class="number">2</span> + <span class="keyword">left</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &lt; target &#123;</span><br><span class="line">                <span class="keyword">left</span> = mid + <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">right</span> = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：搜索col，然后二分查找row。</li><li>时间复杂度： O(log(m + n))</li><li>空间复杂度： O(1)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/search-a-2d-matrix/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 73 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：中等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 73 矩阵置零</title>
    <link href="https://fanbaoying.github.io/LeetCode-73-%E7%9F%A9%E9%98%B5%E7%BD%AE%E9%9B%B6/"/>
    <id>https://fanbaoying.github.io/LeetCode-73-矩阵置零/</id>
    <published>2022-09-26T03:44:10.000Z</published>
    <updated>2022-09-26T03:52:35.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 72 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：中等</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给定一个 <code>m x n</code> 的矩阵，如果一个元素为 <code>0</code> ，则将其所在行和列的所有元素都设为 <code>0</code> 。请使用 <strong>原地</strong> 算法。</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><p><img src="https://images.xiaozhuanlan.com/photo/2022/75e47e2b4f10b8996e790a45330093a7.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,1,1],[1,0,1],[1,1,1]]</span><br><span class="line">输出：[[1,0,1],[0,0,0],[1,0,1]]</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><p><img src="https://images.xiaozhuanlan.com/photo/2022/f82ec2407d00d8f53e61dff637d9c711.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]</span><br><span class="line">输出：[[0,0,0,0],[0,4,5,0],[0,3,1,0]]</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>m == matrix.length</code></li><li><code>n == matrix[0].length</code></li><li><code>1 &lt;= m, n &lt;= 200</code></li><li>-2^31 &lt;= matrix[i][j] &lt;= 2^31 - 1`</li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SetMatrixZeroes</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setZeroes</span><span class="params">(<span class="number">_</span> matrix: <span class="keyword">inout</span> [[Int]])</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> rowHasZero = <span class="literal">false</span>, colHasZero = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">let</span> m = matrix.<span class="built_in">count</span>, n = matrix[<span class="number">0</span>].<span class="built_in">count</span></span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;m <span class="keyword">where</span> matrix[i][<span class="number">0</span>] == <span class="number">0</span> &#123;</span><br><span class="line">            colHasZero = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;n <span class="keyword">where</span> matrix[<span class="number">0</span>][i] == <span class="number">0</span> &#123;</span><br><span class="line">            rowHasZero = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;m &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1</span>..&lt;n &#123;</span><br><span class="line">                <span class="keyword">if</span> matrix[i][j] == <span class="number">0</span> &#123;</span><br><span class="line">                    matrix[<span class="number">0</span>][j] = <span class="number">0</span></span><br><span class="line">                    matrix[i][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;m &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1</span>..&lt;n &#123;</span><br><span class="line">                <span class="keyword">if</span> matrix[<span class="number">0</span>][j] == <span class="number">0</span> || matrix[i][<span class="number">0</span>] == <span class="number">0</span> &#123;</span><br><span class="line">                    matrix[i][j] = <span class="number">0</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> rowHasZero &#123;</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;n &#123;</span><br><span class="line">                matrix[<span class="number">0</span>][i] = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> colHasZero &#123;</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;m &#123;</span><br><span class="line">                matrix[i][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：使用第一行和 col 来跟踪行和 col 是否应该设置为 0，记住它们应该与矩阵的其他部分分开。</li><li>时间复杂度： O(n^2)</li><li>空间复杂度： O(1)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/set-matrix-zeroes/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 72 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：中等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 72 编辑距离（Top 100）</title>
    <link href="https://fanbaoying.github.io/LeetCode-72-%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB%EF%BC%88Top-100%EF%BC%89/"/>
    <id>https://fanbaoying.github.io/LeetCode-72-编辑距离（Top-100）/</id>
    <published>2022-09-26T03:43:58.000Z</published>
    <updated>2022-09-26T03:49:20.696Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本题为 LeetCode 前 100 高频题</strong></p><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 71 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：困难</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给你两个单词 <code>word1</code> 和 <code>word2</code>， 请返回将 <code>word1</code> 转换成 <code>word2</code> 所使用的最少操作数  。</p><p>你可以对一个单词进行如下三种操作：</p><ul><li>插入一个字符</li><li>删除一个字符</li><li>替换一个字符</li></ul><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：word1 = &quot;horse&quot;, word2 = &quot;ros&quot;</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">horse -&gt; rorse (将 &apos;h&apos; 替换为 &apos;r&apos;)</span><br><span class="line">rorse -&gt; rose (删除 &apos;r&apos;)</span><br><span class="line">rose -&gt; ros (删除 &apos;e&apos;)</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：word1 = &quot;intention&quot;, word2 = &quot;execution&quot;</span><br><span class="line">输出：5</span><br><span class="line">解释：</span><br><span class="line">intention -&gt; inention (删除 &apos;t&apos;)</span><br><span class="line">inention -&gt; enention (将 &apos;i&apos; 替换为 &apos;e&apos;)</span><br><span class="line">enention -&gt; exention (将 &apos;n&apos; 替换为 &apos;x&apos;)</span><br><span class="line">exention -&gt; exection (将 &apos;n&apos; 替换为 &apos;c&apos;)</span><br><span class="line">exection -&gt; execution (插入 &apos;u&apos;)</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>0 &lt;= word1.length, word2.length &lt;= 500</code></li><li><code>word1</code> 和 <code>word2</code> 由小写英文字母组成</li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EditDistance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">minDistance</span><span class="params">(word1: String, <span class="number">_</span> word2: String)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> aChars = [<span class="type">Character</span>](word1.characters)</span><br><span class="line">        <span class="keyword">let</span> bChars = [<span class="type">Character</span>](word2.characters)</span><br><span class="line">        <span class="keyword">let</span> aLen = aChars.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">let</span> bLen = bChars.<span class="built_in">count</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> dp = <span class="type">Array</span>(<span class="built_in">count</span>: aLen + <span class="number">1</span>, repeatedValue:(<span class="type">Array</span>(<span class="built_in">count</span>: bLen + <span class="number">1</span>, repeatedValue: <span class="number">0</span>)))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...aLen &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>...bLen &#123;</span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">                    dp[i][j] = j</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> j == <span class="number">0</span> &#123;</span><br><span class="line">                    dp[i][j] = i</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> aChars[i - <span class="number">1</span>] == bChars[j - <span class="number">1</span>] &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]) + <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[aLen][bLen]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：2D动态编程，从插入，删除或替换一个字符中找到最小步骤。</li><li>时间复杂度： O(mn)</li><li>空间复杂度： O(mn)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/edit-distance/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本题为 LeetCode 前 100 高频题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 71 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：困难&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 71 简化路径</title>
    <link href="https://fanbaoying.github.io/LeetCode-71-%E7%AE%80%E5%8C%96%E8%B7%AF%E5%BE%84/"/>
    <id>https://fanbaoying.github.io/LeetCode-71-简化路径/</id>
    <published>2022-09-26T03:43:45.000Z</published>
    <updated>2022-09-26T03:48:57.714Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 70 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：中等</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给你一个字符串 <code>path</code> ，表示指向某一文件或目录的 Unix 风格 <strong>绝对路径</strong> （以 <code>&#39;/&#39;</code> 开头），请你将其转化为更加简洁的规范路径。</p><p>在 Unix 风格的文件系统中，一个点（<code>.</code>）表示当前目录本身；此外，两个点 （<code>..</code>） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，<code>&#39;//&#39;</code>）都被视为单个斜杠 <code>&#39;/&#39;</code> 。 对于此问题，任何其他格式的点（例如，<code>&#39;...&#39;</code>）均被视为文件/目录名称。</p><p>请注意，返回的 <strong>规范路径</strong> 必须遵循下述格式：</p><ul><li>始终以斜杠 <code>&#39;/&#39;</code> 开头。</li><li>两个目录名之间必须只有一个斜杠 <code>&#39;/&#39;</code> 。</li><li>最后一个目录名（如果存在）不能 以 <code>&#39;/&#39;</code> 结尾。</li><li>此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 <code>&#39;.&#39;</code> 或 <code>&#39;..&#39;</code>）。</li></ul><p>返回简化后得到的 <strong>规范路径</strong> 。</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：path = &quot;/home/&quot;</span><br><span class="line">输出：&quot;/home&quot;</span><br><span class="line">解释：注意，最后一个目录名后面没有斜杠。</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：path = &quot;/../&quot;</span><br><span class="line">输出：&quot;/&quot;</span><br><span class="line">解释：从根目录向上一级是不可行的，因为根目录是你可以到达的最高级。</span><br></pre></td></tr></table></figure><p><strong>示例 3</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：path = &quot;/home//foo/&quot;</span><br><span class="line">输出：&quot;/home/foo&quot;</span><br><span class="line">解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。</span><br></pre></td></tr></table></figure><p><strong>示例 4</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：path = &quot;/a/./b/../../c/&quot;</span><br><span class="line">输出：&quot;/c&quot;</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>1 &lt;= path.length &lt;= 3000</code></li><li><code>path</code> 由英文字母，数字，<code>&#39;.&#39;</code>，<code>&#39;/&#39;</code> 或 <code>&#39;_&#39;</code> 组成。</li><li><code>path</code> 是一个有效的 Unix 风格绝对路径。</li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimplifyPath</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">simplifyPath</span><span class="params">(<span class="number">_</span> path: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> directories = [<span class="type">String</span>]()</span><br><span class="line">        <span class="keyword">let</span> components = path.<span class="built_in">split</span>(separator: <span class="string">"/"</span>)</span><br><span class="line">        <span class="keyword">for</span> component <span class="keyword">in</span> components &#123;</span><br><span class="line">            <span class="keyword">switch</span> component &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">""</span>: <span class="keyword">break</span> <span class="comment">// do nothing</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"."</span>: <span class="keyword">break</span> <span class="comment">// do nothing, pointing to the current directory</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">".."</span>:</span><br><span class="line">                directories.popLast() <span class="comment">// if empty, does nothing</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                directories.append(<span class="type">String</span>(component))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/"</span> + <span class="type">String</span>(directories.joined(separator: <span class="string">"/"</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：使用堆栈，正常 push， ..流行。</li><li>时间复杂度： O(n)</li><li>空间复杂度： O(n)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/simplify-path/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 70 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：中等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 70 爬楼梯（Top 100）</title>
    <link href="https://fanbaoying.github.io/LeetCode-70-%E7%88%AC%E6%A5%BC%E6%A2%AF%EF%BC%88Top-100%EF%BC%89/"/>
    <id>https://fanbaoying.github.io/LeetCode-70-爬楼梯（Top-100）/</id>
    <published>2022-09-26T03:43:33.000Z</published>
    <updated>2022-09-26T03:48:31.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本题为 LeetCode 前 100 高频题</strong></p><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 69 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：简单</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。</p><p>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：2</span><br><span class="line">解释：有两种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶</span><br><span class="line">2. 2 阶</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：3</span><br><span class="line">解释：有三种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶 + 1 阶</span><br><span class="line">2. 1 阶 + 2 阶</span><br><span class="line">3. 2 阶 + 1 阶</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>1 &lt;= n &lt;= 45</code></li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClimbingStairs</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">climbStairs</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span> || n == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> prev = <span class="number">0</span>, post = <span class="number">1</span>, total = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...n &#123;</span><br><span class="line">            total = prev + post</span><br><span class="line">            </span><br><span class="line">            prev = post</span><br><span class="line">            post = total</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> total</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：动态编程，<code>dp = dp + dp[i - 2]</code>。</li><li>时间复杂度： O(n)</li><li>空间复杂度： O(1)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/climbing-stairs/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本题为 LeetCode 前 100 高频题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 69 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：简单&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 69 x 的平方根</title>
    <link href="https://fanbaoying.github.io/LeetCode-69-x-%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
    <id>https://fanbaoying.github.io/LeetCode-69-x-的平方根/</id>
    <published>2022-09-26T03:43:18.000Z</published>
    <updated>2022-09-26T03:48:00.990Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 68 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：简单</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给你一个非负整数 <code>x</code> ，计算并返回 <code>x</code> 的 <strong>算术平方根</strong> 。</p><p>由于返回类型是整数，结果只保留 <strong>整数部分</strong> ，小数部分将被 <strong>舍去</strong> 。</p><p><strong>注意：</strong> 不允许使用任何内置指数函数和算符，例如 <code>pow(x, 0.5)</code> 或者 <code>x ** 0.5</code> 。</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 4</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 8</span><br><span class="line">输出：2</span><br><span class="line">解释：8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>0 &lt;= x &lt;= 2^31 - 1</code></li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sqrtx</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mySqrt</span><span class="params">(<span class="number">_</span> x: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> x &gt;= <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">left</span> = <span class="number">0</span>, <span class="keyword">right</span> = x / <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">left</span> &lt;= <span class="keyword">right</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = (<span class="keyword">right</span> - <span class="keyword">left</span>) / <span class="number">2</span> + <span class="keyword">left</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> mid * mid == x &#123;</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> mid * mid &lt; x &#123;</span><br><span class="line">                <span class="keyword">left</span> = mid + <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">right</span> = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">right</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：二分查找，应该从 <code>x / 2 + 1</code> 开始，所以它的平方是 <code>x + x ^ 2 / 4 + 1</code>，它肯定大于 <code>x</code>。</li><li>时间复杂度： O(logn)</li><li>空间复杂度： O(1)</li></ul><blockquote><p><strong>注意:</strong> 请使用(右-左)/ 2 +左来获得中间以防整数溢出</p></blockquote><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/sqrtx/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 68 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：简单&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Swift 周报 第十三期</title>
    <link href="https://fanbaoying.github.io/Swift-%E5%91%A8%E6%8A%A5-%E7%AC%AC%E5%8D%81%E4%B8%89%E6%9C%9F/"/>
    <id>https://fanbaoying.github.io/Swift-周报-第十三期/</id>
    <published>2022-09-13T02:50:39.000Z</published>
    <updated>2022-09-26T03:59:35.861Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本期是 Swift 编辑组自主整理周报的第四期</strong>，每个模块还在调整磨合期。各位读者如果有好的提议，欢迎在文末留言。</p><p>Swift 周报在 <a href="https://github.com/SwiftCommunityRes/SwiftWeekly" title="SwiftWeekly" target="_blank" rel="noopener">GitHub 开源</a>，欢迎提交 issue，投稿或推荐内容。目前计划每两周周一发布，欢迎志同道合的朋友一起加入周报整理。</p><p>昔孔子登泰山而小天下， 今诸君阅<strong>Swift社区</strong>皆足矣。请君浅读，与君共勉！👊👊👊</p><blockquote><p><strong>周报精选</strong></p><p>新闻和社区：iPhone14 Pro 刘海变“灵动岛”</p><p>提案：大量提案审核结果已公布</p><p>Swift 论坛：论坛内容丰富，欢迎参与讨论</p><p>推荐博文：增加 App 排名的 ASO 小技巧</p></blockquote><a id="more"></a><h2 id="新闻和社区"><a href="#新闻和社区" class="headerlink" title="新闻和社区"></a>新闻和社区</h2><h3 id="iPhone14-Pro-刘海变“灵动岛”"><a href="#iPhone14-Pro-刘海变“灵动岛”" class="headerlink" title="iPhone14 Pro 刘海变“灵动岛”"></a>iPhone14 Pro 刘海变“灵动岛”</h3><p>iPhone14 Pro 来了，从外观看两个亮点，第一是新配色 #iPhone14Pro 灭霸紫# 好看吗？第二是刘海变成了药丸，不是感叹号，但是带来了 #iPhone14Pro 灵动岛#，和显示动画合为一体。</p><p>本次发布会，iphone14pro 刘海依旧，但刘海减少 30% 变更为“药丸”，并引入灵动岛设计，通过刘海变换多种交互UI。视网膜 XDR2000 尼特峰值，实现息屏显示。使用新的 A16 4nm 芯片，搭载 4800 像素主摄像头，比 iPhone 13 Pro 大了 65%，新增配“灭霸紫”配色。</p><p>9月8日凌晨，苹果秋季发布会推出 iPhone14 系列产品，其中最大亮点为 iPhone14pro 系列新增正面设计“灵动岛”。正面摄像头有一个较小的切口，在不同状态下挖孔形态不同，支持第三方应用。iPhone14 系列售价：iPhone14 5999元起，iPhone14plus 6999元起，iPhone14pro 7999元起，iPhone 14pro max 8999元起。9 月 9 日开始预售，9 月 16 日正式发售。</p><p><img src="https://raw.githubusercontent.com/SwiftCommunityRes/image/main/weekly/iPhone.png" alt=""></p><h3 id="库克：苹果将捐款支持四川地震灾区救援和重建工作"><a href="#库克：苹果将捐款支持四川地震灾区救援和重建工作" class="headerlink" title="库克：苹果将捐款支持四川地震灾区救援和重建工作"></a>库克：苹果将捐款支持四川地震灾区救援和重建工作</h3><p>9 月 7 日消息，苹果 CEO 蒂姆库克的认证微博发布消息称：“我们心系所有受地震影响的四川民众和社区。苹果将捐款支持救援和重建工作。”</p><p><img src="https://raw.githubusercontent.com/SwiftCommunityRes/image/main/weekly/weekly1301.png" alt=""></p><p>此前，小米、宁德时代、阿里巴巴、网易、字节跳动、联想、辛选集团、比亚迪、拼多多、理想汽车等都宣布向四川地震灾区进行捐赠。</p><h3 id="苹果为老款-iPhone-iPad-iPod-发布-iOS-12-5-6-更新，修复严重漏洞"><a href="#苹果为老款-iPhone-iPad-iPod-发布-iOS-12-5-6-更新，修复严重漏洞" class="headerlink" title="苹果为老款 iPhone / iPad / iPod 发布 iOS 12.5.6 更新，修复严重漏洞"></a>苹果为老款 iPhone / iPad / iPod 发布 iOS 12.5.6 更新，修复严重漏洞</h3><p>IT之家 9 月 1 日消息，苹果今日为老款 iPhone 发布了 iOS 12.5.6（内部版本号：16H71）更新，针对无法更新到 iOS 15 的设备进行了安全更新和错误修复。</p><p>这是自 2021 年 9 月以来苹果对 iOS 12 的首次更新，当时苹果修复了一个问题，该问题使恶意制作的 PDF、Web 内容和 App 能够执行代码。最新更新解决了自上次更新以来已在 iOS 15 中修补的漏洞。</p><p>IT之家了解到，苹果会针对无法更新到 iOS 12 之后的旧 iPhone、iPad 和 iPod 提供定期更新。这些更新不会提供任何重大的功能更改或 UI 改进，但会针对旧设备可能容易受到的已知攻击提供保护。</p><p>苹果安全更新网站声明如下：</p><p>一位匿名研究人员提交的 CVE-2022-32893。</p><p>更新适用于：iPhone 5s、iPhone 6、iPhone 6 Plus、iPad Air、iPad mini 2、iPad mini 3 和 iPod touch（第 6 代）</p><p>影响：恶意制作的 Web 内容可能会执行任意代码。有报告称此问题可能已被积极利用。</p><p>描述：已通过改进边界检查解决越界写入问题。(来源： IT之家)</p><p><img src="https://raw.githubusercontent.com/SwiftCommunityRes/image/main/weekly/weekly1302.png" alt=""></p><h3 id="苹果-iOS-16-更新，天气-App-新功能盘点"><a href="#苹果-iOS-16-更新，天气-App-新功能盘点" class="headerlink" title="苹果 iOS 16 更新，天气 App 新功能盘点"></a>苹果 iOS 16 更新，天气 App 新功能盘点</h3><p>IT之家 8 月 31 日消息，苹果在 iOS 16 中对天气应用进行了一些改变，包括新的通知类型，并增加了一些信息，从湿度、温度到能见度全方位为你提供服务。</p><p>此外，新版天气 App 中的许多新功能都融入了苹果此前收购的 Dark Sky 内容。</p><p>天气应用程序的整体设计没有重大更新，但苹果提供了更多信息。长期以来，天气应用一直都有一些小模块，从而向你显示各种信息，包括 10 天内预报、每日气温、空气质量、降水、紫外线指数、日落 / 日出时间、风、湿度、感官温度、能见度和压力等等，现在你可以点击进入这些模块中的任何一个来获取更多信息，还支持快速切换。</p><p>温度部分展示了全天的温度曲线图，包括最高和最低。这应该可以解决 iOS 15 天气应用中存在的一个问题，从而不会再有用户抱怨不清楚气温何时才是每日最低点。此外，这一部分还提供了天气状况的文本概述。在 10 天的天气预报中，你可以点击任何一天查看每日温度范围的图表，还有一个选项可以查看更大的彩色温度地图。</p><p>空气质量这块展示了您所在地区当前空气状况的图表，以及当前状况和主要污染物对健康影响的附加信息。此外，你还可以看到更大的空气质量地图，预计国内同样是由“和风天气”提供信息。</p><p>新的“降水”类似于之前版本的降水信息，显示了风暴将袭击的位置地图，还可以放大显示 12 小时降雨预报，还有一个界面显示了过去 24 小时内的降水总量详情，以及在什么时间下了多少雨、雨夹雪或雪。</p><p>感官温度提供了第二个温度图表，结合温度、湿度，风等一些其他因素，你可以更好地了解周围环境温度变化。</p><p>紫外线指数显示当前的紫外线等级和白天的最高紫外线水平。同时，它还会提供一段介绍，例如建议防晒等级。</p><p>“日落和日出”可以让你知道日出或日落的时间，同时它还包括每月日出和日落的平均值和总日光的读数。</p><p>“风”主要是提供每天的风速摘要，以及全天的风速、风向图表。</p><p>湿度部分显示了全天湿度的图表，分为六个小时的增量。它还提供平均湿度和露点等信息。</p><p>“能见度”可提供全天的能见度范围，并提供每日摘要。</p><p>“压强”显示了当前的压强、全天压强，以及压强是上升还是下降的读数。</p><p>“极端天气警报”和之前一样，会显示重大的暴雨、洪水、飓风、热浪、龙卷风等其他灾害警告，预计国内还是和风天气提供信息。</p><p>“天气锁屏”虽然不是天气应用程序的一部分，但在 iOS 16 中有一个专门的天气锁屏。如果是晴天，你会看到太阳，如果是雨天，你会看到下雨。</p><p>还有许多不同的天气小部件，你可以添加到任何锁屏中，还有一个更大的读数与温度，当前条件，高 / 低随着个别空气质量，紫外线指数，和温度选项。</p><p>“iPad 天气”，随着 iOS 16/ iPadOS 16 更新，终于有了适用于 iPad 的天气应用，相比 iPhone 版本可以更好地适应 iPad 的大显示屏。</p><p>总之，iOS 16 更新了好多新奇的功能哦，小伙伴快去试试吧。(来源： IT之家)</p><h2 id="提案"><a href="#提案" class="headerlink" title="提案"></a>提案</h2><h3 id="通过的提案"><a href="#通过的提案" class="headerlink" title="通过的提案"></a>通过的提案</h3><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0370-pointer-family-initialization-improvements.md" title="SE-0370" target="_blank" rel="noopener">SE-0370</a> <strong>改进指针系列初始化和缓冲区</strong> 提案已通过。该提案已在<a href="https://mp.weixin.qq.com/s/IXP8PNT4aoCnyB-V2qMY_Q" target="_blank" rel="noopener">十二期周报</a>正在审查的提案模块做了详细介绍。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0365-implicit-self-weak-capture.md" title="SE-0365" target="_blank" rel="noopener">SE-0365</a> <strong>增加对协议 CustomDebugStringConvertible 到 AnyKeyPath 的一致性</strong> 提案已通过。该提案已在<a href="https://mp.weixin.qq.com/s/IXP8PNT4aoCnyB-V2qMY_Q" target="_blank" rel="noopener">十二期周报</a>正在审查的提案模块做了详细介绍。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0368-staticbigint.md" title="SE-0368" target="_blank" rel="noopener">SE-0368</a> <strong>StaticBigInt</strong> 提案已通过。该提案已在<a href="https://mp.weixin.qq.com/s/i5a-jhRRdf36KUNRoMX_8w" target="_blank" rel="noopener">十一期周报</a>正在审查的提案模块做了详细介绍。</p><h3 id="拒绝的提案"><a href="#拒绝的提案" class="headerlink" title="拒绝的提案"></a>拒绝的提案</h3><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0371-isolated-synchronous-deinit.md" title="SE-0371" target="_blank" rel="noopener">SE-0371</a> <strong>Isolated synchronous deinit</strong> 被拒绝，重新修订。该提案已在<a href="https://mp.weixin.qq.com/s/IXP8PNT4aoCnyB-V2qMY_Q" target="_blank" rel="noopener">十二期周报</a>正在审查的提案模块做了详细介绍。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0366-move-function.md" title="SE-0366" target="_blank" rel="noopener">SE-0366</a> <strong>代码上下文新增敏感关键字 move</strong> 被拒绝，重新修订。该提案已在<a href="https://mp.weixin.qq.com/s/i5a-jhRRdf36KUNRoMX_8w" target="_blank" rel="noopener">十一期周报</a>正在审查的提案模块做了详细介绍。</p><h3 id="正在审查的提案"><a href="#正在审查的提案" class="headerlink" title="正在审查的提案"></a>正在审查的提案</h3><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0372-document-sorting-as-stable.md" title="SE-0372" target="_blank" rel="noopener">SE-0372</a> <strong>更新稳定排序文档</strong> 提案正在审查。</p><p>Swift 的排序算法在 Swift 5 之前已经更改为稳定排序，但是文档一直没有更新。本提案致力于更新稳定的排序算法文档，方便开发者使用。</p><h2 id="Swift论坛"><a href="#Swift论坛" class="headerlink" title="Swift论坛"></a>Swift论坛</h2><p>1) 讨论 <a href="https://forums.swift.org/t/automatic-type-conformance/60111" title="Automatic 类型的一致性" target="_blank" rel="noopener">Automatic 类型的一致性</a></p><p>出发点：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">cachedImage</span><span class="params">(<span class="keyword">for</span> path: String?)</span></span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">UIImage</span>?, <span class="type">Never</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> path = path <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Just</span>(<span class="literal">nil</span>)</span><br><span class="line">            .eraseToAnyPublisher()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> image = imageCache.object(forKey: <span class="type">NSString</span>(string: path)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Just</span>(image)</span><br><span class="line">            .eraseToAnyPublisher()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> image(<span class="keyword">for</span>: path)</span><br><span class="line">        .handleEvents(receiveOutput: &#123; [<span class="keyword">weak</span> imageCache] (image) <span class="keyword">in</span></span><br><span class="line">            imageCache?.setObject(image, forKey: <span class="type">NSString</span>(string: path))</span><br><span class="line">        &#125;)</span><br><span class="line">        .eraseToAnyPublisher()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.eraseToAnyPublisher()</span><br></pre></td></tr></table></figure><p>被用到了很多次</p><p>把它提出来，写一个 Just 的 extension</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Just</span>: <span class="title">TypeConvertable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> convertable: <span class="type">AnyPublisher</span>&lt;<span class="type">Output</span>, <span class="type">Never</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">self</span>.eraseToAnyPublisher()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是代码变得简洁了很多</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">cachedImage</span><span class="params">(<span class="keyword">for</span> path: String?)</span></span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">UIImage</span>?, <span class="type">Never</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> path = path <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Just</span>(<span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> image = imageCache.object(forKey: <span class="type">NSString</span>(string: path)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Just</span>(image)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> image(<span class="keyword">for</span>: path)</span><br><span class="line">        .handleEvents(receiveOutput: &#123; [<span class="keyword">weak</span> imageCache] (image) <span class="keyword">in</span></span><br><span class="line">             imageCache?.setObject(image, forKey: <span class="type">NSString</span>(string: path))</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把例子变得通用一些</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TypeConvertable</span> </span>&#123;</span><br><span class="line">    associatedtype <span class="type">ReturnType</span></span><br><span class="line">    <span class="keyword">var</span> convertable: <span class="type">ReturnType</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当定义一个类型转变的时候，编译器应该可以决定对应的类型和相应的转变结果。<br>在这个例子中返回的类型是由给定类型决定的</p><p>2) 讨论 <a href="https://forums.swift.org/t/xcode-14-rc-cannot-specialize-protocol-type/60171" title="Xcode14 RC 不能序列化 protocol 类型" target="_blank" rel="noopener">Xcode14 RC 不能序列化 protocol 类型</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// ❌ Cannot specialize protocol type &apos;Collection&apos;</span><br><span class="line">extension Collection&lt;MyType&gt; &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">// ❌ Cannot specialize protocol type &apos;Sequence&apos;</span><br><span class="line">func foo(_ x: some Sequence&lt;String&gt;) &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>可能原因 macOS 12 SDK 仍然使用 Swift5.6，而不是 5.7.<br>Swift 5.7 支持：</p><ul><li>自定义 protocol 可以有 associated types。 参考链接：<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0358-primary-associated-types-in-stdlib.md" target="_blank" rel="noopener">https://github.com/apple/swift-evolution/blob/main/proposals/0358-primary-associated-types-in-stdlib.md</a></li><li>在 protocol 里使用 associated type 要注意传入的类型与返回类型</li></ul><p>3) <a href="https://forums.swift.org/t/swift-style-guide/60177/5" title="Swift coding style guide" target="_blank" rel="noopener">Swift coding style guide</a></p><p>一个很好的 swift style 总集文档：<a href="https://google.github.io/swift/#line-wrapping" target="_blank" rel="noopener">https://google.github.io/swift/#line-wrapping</a></p><p>4) 讨论 <a href="https://forums.swift.org/t/c-abstract-class-inheritance-and-c-interop-to-swift-protocols/60170" title="C++ Abstract Class Inheritance and C++-Interop (to Swift Protocols)" target="_blank" rel="noopener">C++ Abstract Class Inheritance and C++-Interop (to Swift Protocols)</a></p><p>5) 提问 <a href="https://forums.swift.org/t/how-to-handle-empty-response-in-responseserializer/60155/1" title="如何处理空的网络返回值" target="_blank" rel="noopener">如何处理空的网络返回值</a></p><p>可以参考 Alamofire 的处理方法.<br>参考链接: <a href="https://github.com/Alamofire/Alamofire/blob/master/Source/ResponseSerialization.swift#L925" target="_blank" rel="noopener">https://github.com/Alamofire/Alamofire/blob/master/Source/ResponseSerialization.swift#L925</a><br>当网络请求返回是空的时候可以判定为请求失败，同时查看返回代码是不是在 200～299 之间</p><h2 id="推荐博文"><a href="#推荐博文" class="headerlink" title="推荐博文"></a>推荐博文</h2><p><a href="https://swiftwithmajid.com/2022/08/30/lock-screen-widgets-in-swiftui/" title="SwiftUI 锁屏小组件" target="_blank" rel="noopener">SwiftUI 锁屏小组件</a></p><p><strong>摘要：</strong> 随着 iOS 16 的发布，赶快来适配一下 iOS 16 最为重要的更新之一，锁屏小组件吧！</p><p><a href="https://www.polpiella.dev/sourcery-swift-package-command-plugin" title="Sourcery 的 Swift Package 命令行插件" target="_blank" rel="noopener">Sourcery 的 Swift Package 命令行插件</a></p><p><strong>摘要：</strong> 作为 Swift 最流程的代码生成工具，sourcery 能够快速的生成模板代码来帮助开发者节省大量的时间。</p><p><a href="https://mp.weixin.qq.com/s/p_MoRthVdlfhqSyxCkDkow" target="_blank" rel="noopener">项目中第三方库并不是必须的</a></p><p><strong>摘要：</strong> 作者充分的论述了第三方库在提供便利的同时也带来了相当的风险。为是否选择集成第三方库提供了一套有意义的思路。</p><p><a href="https://blog.nielsmouthaan.nl/aso-tips-and-tricks-to-increase-your-apps-ranking" title="增加 App 排名的 ASO 小技巧" target="_blank" rel="noopener">增加 App 排名的 ASO 小技巧</a></p><p><strong>摘要：</strong> 偶尔也可以关注一下技术之外的东西，从另一个方面提升自己的竞争力。</p><p><a href="https://mp.weixin.qq.com/s/R1XLp9hjHDBdYcOI6w8psw" title="云音乐 iOS 端网络图片下载优化实践" target="_blank" rel="noopener">云音乐 iOS 端网络图片下载优化实践</a></p><p><strong>摘要：</strong> 本文介绍了网易云音乐在图片下载的优化下实践。从想法到技术方案，再从 <code>SDWebImage</code> 源码入手，到最后的再次封装实现，都很值得一看。</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p><strong>Swift社区</strong>是由 Swift 爱好者共同维护的公益组织，我们在国内以微信公众号的运营为主，我们会分享以 <strong>Swift实战</strong>、<strong>SwiftUl</strong>、<strong>Swift基础</strong>为核心的技术内容，也整理收集优秀的学习资料。</p><p>欢迎关注公众号:Swift社区，后台点击进群，可以进入我们社区的交流讨论群。希望我们Swift社区是大家在网络空间中的另一份共同的归属。</p><p><img width="500" alt="Swift社区" src="https://user-images.githubusercontent.com/24238160/132703149-34121c6c-fd18-491c-a697-58a0fabf3060.png"></p><p>特别感谢 Swift社区 编辑部的每一位编辑，感谢大家的辛苦付出，为 Swift社区 提供优质内容，为 Swift 语言的发展贡献自己的力量。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本期是 Swift 编辑组自主整理周报的第四期&lt;/strong&gt;，每个模块还在调整磨合期。各位读者如果有好的提议，欢迎在文末留言。&lt;/p&gt;
&lt;p&gt;Swift 周报在 &lt;a href=&quot;https://github.com/SwiftCommunityRes/SwiftWeekly&quot; title=&quot;SwiftWeekly&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub 开源&lt;/a&gt;，欢迎提交 issue，投稿或推荐内容。目前计划每两周周一发布，欢迎志同道合的朋友一起加入周报整理。&lt;/p&gt;
&lt;p&gt;昔孔子登泰山而小天下， 今诸君阅&lt;strong&gt;Swift社区&lt;/strong&gt;皆足矣。请君浅读，与君共勉！👊👊👊&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;周报精选&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新闻和社区：iPhone14 Pro 刘海变“灵动岛”&lt;/p&gt;
&lt;p&gt;提案：大量提案审核结果已公布&lt;/p&gt;
&lt;p&gt;Swift 论坛：论坛内容丰富，欢迎参与讨论&lt;/p&gt;
&lt;p&gt;推荐博文：增加 App 排名的 ASO 小技巧&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Swift 周报" scheme="https://fanbaoying.github.io/categories/Swift-%E5%91%A8%E6%8A%A5/"/>
    
    
      <category term="Swift" scheme="https://fanbaoying.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>iOS 16 主要功能和提升</title>
    <link href="https://fanbaoying.github.io/iOS-16-%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD%E5%92%8C%E6%8F%90%E5%8D%87/"/>
    <id>https://fanbaoying.github.io/iOS-16-主要功能和提升/</id>
    <published>2022-09-13T02:45:10.000Z</published>
    <updated>2022-09-15T11:37:06.797Z</updated>
    
    <content type="html"><![CDATA[<h3 id="锁定屏幕"><a href="#锁定屏幕" class="headerlink" title="锁定屏幕"></a>锁定屏幕</h3><h4 id="锁定屏幕图库"><a href="#锁定屏幕图库" class="headerlink" title="锁定屏幕图库"></a>锁定屏幕图库</h4><p>从包含众多样式的图库中寻找灵感，定制个性化的锁定屏幕，每款都有自己独特的背景、风格化的日期和时间显示方式，以及便于快速查看的信息。</p><h4 id="切换锁定屏幕"><a href="#切换锁定屏幕" class="headerlink" title="切换锁定屏幕"></a>切换锁定屏幕</h4><p>你可以随时切换锁定屏幕。只需按住锁定屏幕，然后手指轻扫即可。</p><h4 id="编辑锁定屏幕"><a href="#编辑锁定屏幕" class="headerlink" title="编辑锁定屏幕"></a>编辑锁定屏幕</h4><p>轻点锁定屏幕上的各项元素，即可轻松自定其字体、颜色或摆放位置。</p><h4 id="风格化的显示日期和时间"><a href="#风格化的显示日期和时间" class="headerlink" title="风格化的显示日期和时间"></a>风格化的显示日期和时间</h4><p>选择充满表现力的字体样式和颜色，自定锁定屏幕上日期和时间的显示外观。</p><a id="more"></a><h4 id="照片分层效果"><a href="#照片分层效果" class="headerlink" title="照片分层效果"></a>照片分层效果</h4><p>照片主体会动态显示在时间元素前面，令主角在屏幕上呼之欲出。</p><h4 id="建议的照片"><a href="#建议的照片" class="headerlink" title="建议的照片"></a>建议的照片</h4><p>iOS 会智能地为你推荐图库中那些适合放在锁定屏幕上的照片。</p><h4 id="照片随机显示"><a href="#照片随机显示" class="headerlink" title="照片随机显示"></a>照片随机显示</h4><p>在锁定屏幕上展示一组自动随机显示的照片。你可以自己掌控锁定屏幕更新照片的节奏，也可交由 iOS 来决定，让你在一天当中惊喜不断。</p><h4 id="照片样式"><a href="#照片样式" class="headerlink" title="照片样式"></a>照片样式</h4><p>为锁定屏幕上的照片应用样式，自动调整颜色滤镜、色调和字体样式，让画面风格协调统一。</p><h4 id="锁定屏幕上的小组件"><a href="#锁定屏幕上的小组件" class="headerlink" title="锁定屏幕上的小组件"></a>锁定屏幕上的小组件</h4><p>选择一系列小组件显示在锁定屏幕上，以便快速一览天气、时间、日期、电池电量、临近的日程、闹钟、时区和健身记录圆环进度等信息。</p><h4 id="WidgetKit-API"><a href="#WidgetKit-API" class="headerlink" title="WidgetKit API"></a>WidgetKit API</h4><p>轻松浏览来自常用第三方 app 的小组件。小组件以文字、圆形或矩形格式显示在时间附近，便于你了解天气情况或目标完成进度等信息。</p><h4 id="实时活动"><a href="#实时活动" class="headerlink" title="实时活动"></a>实时活动</h4><p>有了实时活动功能，你就可以在锁定屏幕上实时获知各种事情的进展。</p><h4 id="实时活动-API"><a href="#实时活动-API" class="headerlink" title="实时活动 API"></a>实时活动 API</h4><p>跟进骑行活动或订单的进度，相关信息都能一目了然。通过这个新的开发者 API，你便可一览常用第三方 app 的实时活动。</p><h4 id="为专注模式设计的锁定屏幕"><a href="#为专注模式设计的锁定屏幕" class="headerlink" title="为专注模式设计的锁定屏幕"></a>为专注模式设计的锁定屏幕</h4><p>iOS 会根据设定的专注模式选项，建议一系列相关的锁定屏幕。比如，在“工作”专注模式下，推荐信息丰富的锁定屏幕，而使用“个人”专注模式时，则推荐呈现照片的锁定屏幕。</p><h4 id="Apple-精选系列"><a href="#Apple-精选系列" class="headerlink" title="Apple 精选系列"></a>Apple 精选系列</h4><p>Apple 专为 iOS 16 打造了一系列动态、经典和景观类的锁定屏幕，供你随心选择。Apple 精选系列还包含为庆祝某些特定的文化活动而设计的锁定屏幕。</p><h4 id="天文"><a href="#天文" class="headerlink" title="天文"></a>天文</h4><p>一套动态的天文主题锁定屏幕，带你探索地球、月球或太阳系，还会随着实时状态而更新。</p><h4 id="天气"><a href="#天气" class="headerlink" title="天气"></a>天气</h4><p>在锁定屏幕上，一览当天天气状况的实时变化。</p><h4 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h4><p>基于你喜欢的表情符号，创建图案化的锁定屏幕。</p><h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><p>为锁定屏幕选择颜色渐变，颜色组合可按喜好设定。</p><h4 id="“播放中”迎来新设计"><a href="#“播放中”迎来新设计" class="headerlink" title="“播放中”迎来新设计"></a>“播放中”迎来新设计</h4><p>使用实时活动功能时，可将“播放中”的控制界面放大至全屏视图，边听音乐边欣赏专辑封面。</p><h4 id="通知的新面貌"><a href="#通知的新面貌" class="headerlink" title="通知的新面貌"></a>通知的新面貌</h4><p>通知采用粗体文字和图片，视觉呈现直观又醒目。</p><h4 id="通知动画"><a href="#通知动画" class="headerlink" title="通知动画"></a>通知动画</h4><p>通知及通知摘要会从锁定屏幕底部滚动出现，查看起来一目了然。</p><h4 id="锁定屏幕的通知视图"><a href="#锁定屏幕的通知视图" class="headerlink" title="锁定屏幕的通知视图"></a>锁定屏幕的通知视图</h4><p>你可以选择在锁定屏幕上以展开的列表、叠放或数量的视图方式来查看通知。手指轻轻捏合，可更改通知显示时的布局。</p><h3 id="专注模式"><a href="#专注模式" class="headerlink" title="专注模式"></a>专注模式</h3><h4 id="锁定屏幕关联"><a href="#锁定屏幕关联" class="headerlink" title="锁定屏幕关联"></a>锁定屏幕关联</h4><p>将锁定屏幕与专注模式建立关联，可同时转变 iPhone 的屏幕外观和功能。要启用专注模式，只需轻扫切换至相应的锁定屏幕即可。</p><h4 id="锁定屏幕建议"><a href="#锁定屏幕建议" class="headerlink" title="锁定屏幕建议"></a>锁定屏幕建议</h4><p>iOS 会根据设定的专注模式选项，建议一系列相关的锁定屏幕。比如，在“工作”专注模式下，推荐信息丰富的锁定屏幕，而使用“个人”专注模式时，则推荐呈现照片的锁定屏幕。</p><h4 id="主屏幕页面建议"><a href="#主屏幕页面建议" class="headerlink" title="主屏幕页面建议"></a>主屏幕页面建议</h4><p>iOS 会为你提供主屏幕页面建议，推荐显示与你所设定专注模式相关度最高的 app 和小组件。</p><h4 id="专注模式过滤条件"><a href="#专注模式过滤条件" class="headerlink" title="专注模式过滤条件"></a>专注模式过滤条件</h4><p>针对你启用的每个专注模式，在 Apple 的日历、邮件、信息和 Safari 浏览器等 app 中设置不同过滤条件，助你排除外界干扰。比如，你可选择在“工作”专注模式下，Safari 浏览器中可显示哪些标签页组；或者在“个人”专注模式下，隐藏工作日历。</p><h4 id="专注模式过滤条件-API"><a href="#专注模式过滤条件-API" class="headerlink" title="专注模式过滤条件 API"></a>专注模式过滤条件 API</h4><p>有了新的专注模式过滤条件 API，开发者可利用你正在使用某个专注模式的信号，来隐藏让你分心的内容。</p><h4 id="预设启用专注模式"><a href="#预设启用专注模式" class="headerlink" title="预设启用专注模式"></a>预设启用专注模式</h4><p>你可以选择在某个特定时间或地点，或是在使用某个 app 时，自动启用专注模式。</p><h4 id="设置更简单"><a href="#设置更简单" class="headerlink" title="设置更简单"></a>设置更简单</h4><p>在开始使用专注模式时，每个选项都能为你带来个性化设置体验。</p><h4 id="允许和静音列表"><a href="#允许和静音列表" class="headerlink" title="允许和静音列表"></a>允许和静音列表</h4><p>设置专注模式时，你可以通过选择允许或静音，来决定要接收哪些 app 和哪些人的通知。</p><h3 id="今年稍晚推出iCloud-共享图库"><a href="#今年稍晚推出iCloud-共享图库" class="headerlink" title="今年稍晚推出iCloud 共享图库"></a>今年稍晚推出iCloud 共享图库</h3><h4 id="与家人共享照片图库"><a href="#与家人共享照片图库" class="headerlink" title="与家人共享照片图库"></a>与家人共享照片图库</h4><p>你最多可与五人共享独立的 iCloud 图库。</p><h4 id="智能设置规则"><a href="#智能设置规则" class="headerlink" title="智能设置规则"></a>智能设置规则</h4><p>分享你所有以前的照片；或是利用设置工具，按照开始日期或人物选取特定的照片。</p><h4 id="智能共享建议"><a href="#智能共享建议" class="headerlink" title="智能共享建议"></a>智能共享建议</h4><p>手动选取照片，或是使用各种智能功能，顺畅无缝地共享照片。比如借助相机 app 中的切换功能，通过蓝牙近距离感应自动共享，以及从“为你推荐”中获取共享建议。</p><h4 id="携手制作照片集"><a href="#携手制作照片集" class="headerlink" title="携手制作照片集"></a>携手制作照片集</h4><p>每个人都拥有相同的权限，可以随心添加、编辑、收藏、删除照片，或是加上相关说明。</p><h4 id="重温更丰富完整的回忆"><a href="#重温更丰富完整的回忆" class="headerlink" title="重温更丰富完整的回忆"></a>重温更丰富完整的回忆</h4><p>在“回忆”、“精选照片”，或是“照片”小组件中欣赏共享的照片。</p><h3 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h3><h4 id="编辑信息"><a href="#编辑信息" class="headerlink" title="编辑信息"></a>编辑信息</h4><p>信息发出后的 15 分钟内，你都可以对其进行编辑。接收人可以看到信息的修改记录。</p><h4 id="撤销发送"><a href="#撤销发送" class="headerlink" title="撤销发送"></a>撤销发送</h4><p>你可以在信息发出后的 2 分钟内将其撤回。</p><h4 id="标记为未读"><a href="#标记为未读" class="headerlink" title="标记为未读"></a>标记为未读</h4><p>无法及时回复，想稍后再来处理的信息，你可将其标为未读。</p><h4 id="恢复最近删除的信息"><a href="#恢复最近删除的信息" class="headerlink" title="恢复最近删除的信息"></a>恢复最近删除的信息</h4><p>你可以恢复最近 30 天内删除的信息。</p><h4 id="在“信息”里同播共享"><a href="#在“信息”里同播共享" class="headerlink" title="在“信息”里同播共享"></a>在“信息”里同播共享</h4><p>在信息 app 里与好友一边聊天，一边共享音乐，还能同步更多精彩。</p><h4 id="“与你共享”-API"><a href="#“与你共享”-API" class="headerlink" title="“与你共享” API"></a>“与你共享” API</h4><p>开发者可以在 app 中构建“与你共享”区域。这样一来，当有人给你发送视频或文章时，即使你没法马上查看，下次打开 app 也能轻松找到。</p><h4 id="Android-设备上短信的点回回应"><a href="#Android-设备上短信的点回回应" class="headerlink" title="Android 设备上短信的点回回应"></a>Android 设备上短信的点回回应</h4><p>带上“点回”回应短信，Android 设备上收到后便会出现相应的表情符号。</p><h4 id="双卡信息过滤"><a href="#双卡信息过滤" class="headerlink" title="双卡信息过滤"></a>双卡信息过滤</h4><p>支持逐一按 SIM 卡过滤信息 app 中的对话。</p><h4 id="音频信息播放"><a href="#音频信息播放" class="headerlink" title="音频信息播放"></a>音频信息播放</h4><p>收听音频信息时，你可以快进或倒回。</p><h3 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h3><h4 id="智能搜索更正"><a href="#智能搜索更正" class="headerlink" title="智能搜索更正"></a>智能搜索更正</h4><p>智能搜索功能可更正搜索词中的错别字并使用同义词，从而优化搜索结果。</p><h4 id="智能搜索建议"><a href="#智能搜索建议" class="headerlink" title="智能搜索建议"></a>智能搜索建议</h4><p>你一开始搜索电子邮件，即可看到更丰富的共享内容视图。</p><h4 id="收件人和附件遗漏提示"><a href="#收件人和附件遗漏提示" class="headerlink" title="收件人和附件遗漏提示"></a>收件人和附件遗漏提示</h4><p>如果你在邮件中遗漏了某些重要内容，如附件或收件人，将会收到相应提示。</p><h4 id="撤销发送-1"><a href="#撤销发送-1" class="headerlink" title="撤销发送"></a>撤销发送</h4><p>在你刚发出的电子邮件送达收件人的收件箱之前，轻松将其撤回。</p><h4 id="定时发送"><a href="#定时发送" class="headerlink" title="定时发送"></a>定时发送</h4><p>将邮件发送安排在恰当的时刻。</p><h4 id="跟进"><a href="#跟进" class="headerlink" title="跟进"></a>跟进</h4><p>将已发出的邮件移至收件箱顶部，以便你快速发送跟进邮件。</p><h4 id="提醒我"><a href="#提醒我" class="headerlink" title="提醒我"></a>提醒我</h4><p>已经打开但尚未回复的邮件，再也不会忘记。选择日期和时间，让邮件到时候在收件箱中再次醒目显现。</p><h4 id="图文链接"><a href="#图文链接" class="headerlink" title="图文链接"></a>图文链接</h4><p>添加图文链接，在邮件里一目了然呈现更多背景信息和详情。</p><h4 id="BIMI-支持"><a href="#BIMI-支持" class="headerlink" title="BIMI 支持"></a>BIMI 支持</h4><p>通过经 BIMI (信息识别的品牌指示) 认证的品牌标志，轻松识别已认证的电子邮件信息。</p><h3 id="Safari-浏览器"><a href="#Safari-浏览器" class="headerlink" title="Safari 浏览器"></a>Safari 浏览器</h3><h4 id="共享标签页组"><a href="#共享标签页组" class="headerlink" title="共享标签页组"></a>共享标签页组</h4><p>与朋友共享一组标签页。每个人都能添加自己的标签页，协作时标签页组如有更新，也能即刻看到。</p><h4 id="标签页组起始页"><a href="#标签页组起始页" class="headerlink" title="标签页组起始页"></a>标签页组起始页</h4><p>标签页组拥有专门的起始页面，你可以自定背景图和个人收藏项。</p><h4 id="标签页组中固定的标签页"><a href="#标签页组中固定的标签页" class="headerlink" title="标签页组中固定的标签页"></a>标签页组中固定的标签页</h4><p>自定你的标签页组，为各个组别设置固定的标签页。</p><h4 id="新的网页扩展-API"><a href="#新的网页扩展-API" class="headerlink" title="新的网页扩展 API"></a>新的网页扩展 API</h4><p>让开发者能够创建更多种类的 Safari 浏览器网页扩展。</p><h4 id="网站推送通知"><a href="#网站推送通知" class="headerlink" title="网站推送通知"></a>网站推送通知</h4><p>可在 iOS 里选择接收网站通知。2023 年推出。</p><h4 id="扩展可同步"><a href="#扩展可同步" class="headerlink" title="扩展可同步"></a>扩展可同步</h4><p>在 Safari 浏览器偏好设置中，查看来自其他设备的可用扩展。扩展在安装后便会同步，你只需启用一次即可。</p><h4 id="网站设置同步"><a href="#网站设置同步" class="headerlink" title="网站设置同步"></a>网站设置同步</h4><p>你针对特定网站所做的设置，如页面缩放和自动阅读器视图，将在各种设备上同步。</p><h4 id="新增语言"><a href="#新增语言" class="headerlink" title="新增语言"></a>新增语言</h4><p>Safari 浏览器网页翻译功能新增阿拉伯语、荷兰语、印尼语、韩语、波兰语、泰语、土耳其语和越南语支持。</p><h4 id="翻译网页图片中的文字"><a href="#翻译网页图片中的文字" class="headerlink" title="翻译网页图片中的文字"></a>翻译网页图片中的文字</h4><p>现支持使用实况文本功能翻译图像中的文字。</p><h4 id="其他的网页技术支持"><a href="#其他的网页技术支持" class="headerlink" title="其他的网页技术支持"></a>其他的网页技术支持</h4><p>让开发者能够更好地掌控网页样式和布局，打造更为引人入胜的内容。</p><h4 id="强密码编辑"><a href="#强密码编辑" class="headerlink" title="强密码编辑"></a>强密码编辑</h4><p>编辑由 Safari 浏览器建议的强密码，以针对特定要求作出调整。</p><h4 id="“设置”中的无线局域网密码"><a href="#“设置”中的无线局域网密码" class="headerlink" title="“设置”中的无线局域网密码"></a>“设置”中的无线局域网密码</h4><p>在“设置”中查看和管理你的无线局域网密码。可引用和共享密码，或删除旧密码。</p><h3 id="通行密钥"><a href="#通行密钥" class="headerlink" title="通行密钥"></a>通行密钥</h3><h4 id="通行密钥-1"><a href="#通行密钥-1" class="headerlink" title="通行密钥"></a>通行密钥</h4><p>通行密钥是更为安全便捷的登录方式，可取代密码。</p><h4 id="防止钓鱼攻击"><a href="#防止钓鱼攻击" class="headerlink" title="防止钓鱼攻击"></a>防止钓鱼攻击</h4><p>通行密钥始终位于你的设备本地，并且仅适用于你在创建时指定的网站，因而几乎不会受到钓鱼攻击。</p><h4 id="避免从网站泄露"><a href="#避免从网站泄露" class="headerlink" title="避免从网站泄露"></a>避免从网站泄露</h4><p>你的私有密钥绝不会保存在网络服务器上，因此不必担心网站泄露影响你的账户安全。</p><h4 id="登录其他设备"><a href="#登录其他设备" class="headerlink" title="登录其他设备"></a>登录其他设备</h4><p>用 iPhone 或 iPad 扫描二维码并通过面容 ID 或触控 ID 进行身份验证，即可利用已保存的通行密钥在其他设备上登录网站或 app，非 Apple 设备也同样适用。</p><h4 id="跨设备同步"><a href="#跨设备同步" class="headerlink" title="跨设备同步"></a>跨设备同步</h4><p>通行密钥采用端到端加密，并通过 iCloud 钥匙串在你的各种 Apple 设备上保持同步。</p><h3 id="实况文本"><a href="#实况文本" class="headerlink" title="实况文本"></a>实况文本</h3><h4 id="视频中的实况文本"><a href="#视频中的实况文本" class="headerlink" title="视频中的实况文本"></a>视频中的实况文本</h4><p>视频暂停画面中的文本可进行充分交互，诸如拷贝、粘贴、查询，或是翻译等功能都可实现。实况文本功能适用于“照片”、快速查看和 Safari 浏览器等 app 或功能。</p><h4 id="快速操作"><a href="#快速操作" class="headerlink" title="快速操作"></a>快速操作</h4><p>对于照片和视频中已检测到的数据，只需轻点一下即可执行多种操作。追踪航班或物流、翻译外语、转换货币等，都不成问题。</p><h4 id="实况文本新增语言支持"><a href="#实况文本新增语言支持" class="headerlink" title="实况文本新增语言支持"></a>实况文本新增语言支持</h4><p>实况文本新增了对日语、韩语和乌克兰语的文本识别功能。</p><h3 id="Siri"><a href="#Siri" class="headerlink" title="Siri"></a>Siri</h3><h4 id="轻松设置快捷指令"><a href="#轻松设置快捷指令" class="headerlink" title="轻松设置快捷指令"></a>轻松设置快捷指令</h4><p>无需任何设置，Siri 便能运行来自各种 app 的快捷指令。</p><h4 id="自动发送信息"><a href="#自动发送信息" class="headerlink" title="自动发送信息"></a>自动发送信息</h4><p>在发送信息时跳过确认步骤。你可以在“设置”中启用此功能。</p><h4 id="文本中的表情符号"><a href="#文本中的表情符号" class="headerlink" title="文本中的表情符号"></a>文本中的表情符号</h4><p>在发送信息时吩咐 Siri 插入表情符号。</p><h4 id="嘿-Siri，在这里能做些什么？"><a href="#嘿-Siri，在这里能做些什么？" class="headerlink" title="嘿 Siri，在这里能做些什么？"></a>嘿 Siri，在这里能做些什么？</h4><p>通过询问“嘿 Siri，在这里能做些什么”，探索 Siri 在 iOS 和 app 中的功能。你也可查询特定 app 的功能。</p><h4 id="结束通话"><a href="#结束通话" class="headerlink" title="结束通话"></a>结束通话</h4><p>在 Siri 的助力下，你可以完全不用动手就结束通话。只需说声“嘿 Siri，挂电话”(对方也会听到)。可在“设置”中启用此功能。</p><h4 id="扩展的离线支持"><a href="#扩展的离线支持" class="headerlink" title="扩展的离线支持"></a>扩展的离线支持</h4><p>Siri 可以在没有网络连接的情况下，离线处理更多类型的请求，包括家居配件控制 (HomeKit)、广播功能和语音留言。</p><h3 id="听写"><a href="#听写" class="headerlink" title="听写"></a>听写</h3><h4 id="全新的听写体验"><a href="#全新的听写体验" class="headerlink" title="全新的听写体验"></a>全新的听写体验</h4><p>在设备上使用听写功能时，可在语音与触控输入之间流畅切换。无需中断听写模式，照样可以用键盘输入、轻点文本栏、移动光标，或插入快速输入建议。</p><h4 id="自动标点符号"><a href="#自动标点符号" class="headerlink" title="自动标点符号"></a>自动标点符号</h4><p>听写功能可为你的口述自动插入逗号、句号和问号。</p><h4 id="表情符号支持"><a href="#表情符号支持" class="headerlink" title="表情符号支持"></a>表情符号支持</h4><p>在设备上使用听写功能时，可以通过语音插入表情符号。</p><h4 id="信息-App-文本栏中的听写"><a href="#信息-App-文本栏中的听写" class="headerlink" title="信息 App 文本栏中的听写"></a>信息 App 文本栏中的听写</h4><p>听写功能的图标现在会显示在信息 app 的文本输入栏中。</p><h4 id="听写功能弹出窗口"><a href="#听写功能弹出窗口" class="headerlink" title="听写功能弹出窗口"></a>听写功能弹出窗口</h4><p>轻点新的光标弹出窗口，即可轻松停止听写。</p><h3 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h3><h4 id="多途经点路线规划"><a href="#多途经点路线规划" class="headerlink" title="多途经点路线规划"></a>多途经点路线规划</h4><p>在地图 app 中规划驾驶路线时，可添加多个途经点。在 Mac 上规划的有多个途经点的路线，会同步到你的 iPhone 上。</p><h4 id="地图-App-中的交通卡"><a href="#地图-App-中的交通卡" class="headerlink" title="地图 App 中的交通卡"></a>地图 App 中的交通卡</h4><p>不用离开地图 app，即可向钱包 app 添加交通卡，查看余额不足信息，并能向卡内充值。</p><h3 id="Apple-Pay-和钱包"><a href="#Apple-Pay-和钱包" class="headerlink" title="Apple Pay 和钱包"></a>Apple Pay 和钱包</h3><h4 id="钥匙共享"><a href="#钥匙共享" class="headerlink" title="钥匙共享"></a>钥匙共享</h4><p>通过信息、邮件等常用的通迅类 app，与你信任的人安全地共享钱包 app 中的钥匙。</p><h4 id="多次入住的酒店钥匙"><a href="#多次入住的酒店钥匙" class="headerlink" title="多次入住的酒店钥匙"></a>多次入住的酒店钥匙</h4><p>再次预订时，你无需向钱包 app 添加新的酒店房间钥匙。准备入住同一品牌旗下酒店中的任何一家，你都可用同一把钥匙办理入住手续，打开房门。</p><h4 id="从-Safari-浏览器添加钥匙"><a href="#从-Safari-浏览器添加钥匙" class="headerlink" title="从 Safari 浏览器添加钥匙"></a>从 Safari 浏览器添加钥匙</h4><p>现在，不用下载 app，你就可以直接从 Safari 浏览器上通过网站在 iPhone 和 Apple Watch 上添加新的钥匙，方便又安全。</p><h4 id="轻松完成跨设备迁移钥匙"><a href="#轻松完成跨设备迁移钥匙" class="headerlink" title="轻松完成跨设备迁移钥匙"></a>轻松完成跨设备迁移钥匙</h4><p>轻点钱包 app 中的“+”按钮，即可查看你的钥匙列表，然后选择你需要添加至新设备的钥匙即可。</p><h4 id="Apple-Pay-订单跟踪"><a href="#Apple-Pay-订单跟踪" class="headerlink" title="Apple Pay 订单跟踪"></a>Apple Pay 订单跟踪</h4><p>有了 Apple Pay 订单跟踪功能，用户与 Apple Pay 合作商家交易，便可在钱包 app 中接收各种明细票据及订单跟踪信息。</p><h4 id="Apple-Pay-商家令牌"><a href="#Apple-Pay-商家令牌" class="headerlink" title="Apple Pay 商家令牌"></a>Apple Pay 商家令牌</h4><p>商家令牌让你安全地设置，并完成预授权或重复发生的 Apple Pay 支付。</p><h4 id="在一笔-Apple-Pay-交易中向多个商家进行支付"><a href="#在一笔-Apple-Pay-交易中向多个商家进行支付" class="headerlink" title="在一笔 Apple Pay 交易中向多个商家进行支付"></a>在一笔 Apple Pay 交易中向多个商家进行支付</h4><p>现在，你可以在单张 Apple Pay 付款单中指定多个商家的具体支付金额。如此一来，你便可灵活地进行捆绑式购买，如包含航班、租车及酒店的旅行套餐，随后向各个商家发起支付。</p><h4 id="“快速访问”菜单"><a href="#“快速访问”菜单" class="headerlink" title="“快速访问”菜单"></a>“快速访问”菜单</h4><p>通过快速访问功能的菜单 (仅限特定的凭证和卡片)，用户轻点一下就可取用凭证背面的众多功用。</p><h3 id="家庭"><a href="#家庭" class="headerlink" title="家庭"></a>家庭</h3><h4 id="全新的家庭-App"><a href="#全新的家庭-App" class="headerlink" title="全新的家庭 App"></a>全新的家庭 App</h4><p>家庭 app 采用全新设计，令浏览、整理、查看和控制各种配件更加轻松简单。深入基础架构层面的多项优化更新，让你的智能家居表现更出色、更高效、更可靠。</p><h4 id="全屋视图"><a href="#全屋视图" class="headerlink" title="全屋视图"></a>全屋视图</h4><p>在设计一新的“家庭”标签页里，整个家的情况一目了然。各个房间和常用的配件全都整合于 app 的主标签页中，方便你更轻松地调取经常使用的配件。</p><h4 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h4><p>以“灯光”、“环境”、“安全”、“扬声器”以及“水”等类别划分，让你能快速调用按房间整理的所有相关配件，同时尽览更详细的状态信息。</p><h4 id="全新摄像头视图"><a href="#全新摄像头视图" class="headerlink" title="全新摄像头视图"></a>全新摄像头视图</h4><p>“家庭”标签页的靠前居中位置最多可展示四个摄像头画面，轻轻滚动便能看到家中其他摄像头的画面。</p><h4 id="板块设计"><a href="#板块设计" class="headerlink" title="板块设计"></a>板块设计</h4><p>配件板块经过重新设计，不同配件的形状和颜色在视觉上更易分辨。只需轻点板块图标，即可从板块直接操控配件。或是轻点配件名称，查看更详细的控制项目。</p><h4 id="今年稍晚推出优化的架构"><a href="#今年稍晚推出优化的架构" class="headerlink" title="今年稍晚推出优化的架构"></a>今年稍晚推出优化的架构</h4><p>基础架构经过了多项优化，使性能表现更快、更可靠，特别是对于那些拥有多款智能配件的家庭来说，改善尤为显著。通过家庭 app，你可更高效地同时在多个设备上与连接的配件进行通讯并控制它们。</p><h4 id="锁定屏幕上的小组件-1"><a href="#锁定屏幕上的小组件-1" class="headerlink" title="锁定屏幕上的小组件"></a>锁定屏幕上的小组件</h4><p>小组件登陆 iPhone 锁定屏幕，让你从锁定屏幕就能查看家居状态，快速取用各种常用配件。</p><h4 id="今年稍晚推出Matter-支持"><a href="#今年稍晚推出Matter-支持" class="headerlink" title="今年稍晚推出Matter 支持"></a>今年稍晚推出Matter 支持</h4><p>Matter 是一项新的智能家居连接标准，可支持多款兼容的配件跨平台顺畅协作。有了 Matter，你可以选择的兼容智能家居配件更多了，并能通过 Apple 设备上的家庭 app 和 Siri 控制它们。</p><h3 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h3><h4 id="记录用药情况"><a href="#记录用药情况" class="headerlink" title="记录用药情况"></a>记录用药情况</h4><p>创建用药清单，轻松记录你服用的药物、维生素和营养品。还能添加自定图标，让这些信息更好记。</p><h4 id="用药提醒"><a href="#用药提醒" class="headerlink" title="用药提醒"></a>用药提醒</h4><p>为每种药物创建自定的服用时间和提醒，可以是一日多次、一周一次，或者其他需要的方式。</p><h4 id="用药记录"><a href="#用药记录" class="headerlink" title="用药记录"></a>用药记录</h4><p>你可以借助用药提醒来记录服药时间，也可直接在健康 app 中记录用药情况。交互式的图表信息，有助你了解服药时间，知晓自己是否遵从用药指示。</p><h4 id="“健康共享”邀请"><a href="#“健康共享”邀请" class="headerlink" title="“健康共享”邀请"></a>“健康共享”邀请</h4><p>邀请你关心的人与你安全地共享他们的健康数据。他们收到你的邀请后，可以选择要共享哪些数据。</p><h4 id="经期偏差提示"><a href="#经期偏差提示" class="headerlink" title="经期偏差提示"></a>经期偏差提示</h4><p>如果你的经期记录出现月经稀发、月经不规律、经期延长或持续点滴出血的情况，你将会收到提示。</p><h3 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h3><h4 id="所有-iPhone-用户都可用的健身-App"><a href="#所有-iPhone-用户都可用的健身-App" class="headerlink" title="所有 iPhone 用户都可用的健身 App"></a>所有 iPhone 用户都可用的健身 App</h4><p>即使你没有 Apple Watch，也能追踪和达成自己的健身目标。iPhone 的运动传感器可记录你的步数和行走距离，并结合第三方 app 的运动数据，估算你在迈向每日活动目标的途中燃烧的卡路里。</p><h3 id="家人共享"><a href="#家人共享" class="headerlink" title="家人共享"></a>家人共享</h3><h4 id="优化的儿童账户设置"><a href="#优化的儿童账户设置" class="headerlink" title="优化的儿童账户设置"></a>优化的儿童账户设置</h4><p>在开始创建儿童账户时，就能设好适当的家长控制，包括既简单易用又适合孩子年龄的媒体限制建议。</p><h4 id="设置孩子的设备"><a href="#设置孩子的设备" class="headerlink" title="设置孩子的设备"></a>设置孩子的设备</h4><p>使用“快速开始”功能，轻松为孩子设置新 iOS 或 iPadOS 设备，更可直接套用所有相应的家长控制功能。</p><h4 id="信息-App-中的屏幕使用时间"><a href="#信息-App-中的屏幕使用时间" class="headerlink" title="信息 App 中的屏幕使用时间"></a>信息 App 中的屏幕使用时间</h4><p>孩子发出的屏幕使用时间申请会显示在信息 app 中，方便你准许或拒绝。</p><h4 id="家人共享核对清单"><a href="#家人共享核对清单" class="headerlink" title="家人共享核对清单"></a>家人共享核对清单</h4><p>家人共享核对清单可为你提供实用的提示和建议。例如，随着孩子的成长更新其账户设置，或提醒自己与每位家人共享 iCloud+ 订阅服务。</p><h3 id="适用车型将于-2023-年末公布CarPlay-车载"><a href="#适用车型将于-2023-年末公布CarPlay-车载" class="headerlink" title="适用车型将于 2023 年末公布CarPlay 车载"></a>适用车型将于 2023 年末公布CarPlay 车载</h3><h4 id="新一代-CarPlay-车载"><a href="#新一代-CarPlay-车载" class="headerlink" title="新一代 CarPlay 车载"></a>新一代 CarPlay 车载</h4><p>新一代 CarPlay 车载囊括了驾驶者在车内用到的各种屏幕，带来浑然一体的新体验。与车辆各个系统的深层通联，可实现在汽车仪表盘屏幕上显示驾驶信息，还能控制车载收音机和空调通风系统。新版 CarPlay 车载会为每款车型进行专门设计，以适配不同车型各自的屏幕形状和布局。个性化设定程度更高，允许驾驶者选择仪表盘的设计，还提供一些车辆品牌特有的选项。</p><h4 id="加油和驾驶任务类-App"><a href="#加油和驾驶任务类-App" class="headerlink" title="加油和驾驶任务类 App"></a>加油和驾驶任务类 App</h4><p>在 CarPlay 车载中，可使用加油和驾驶任务类 app。那些可协助加油，或是提供路况信息、通行费支持、拖车帮助等服务的常用 app，均可进驻 CarPlay 车载之中。</p><h4 id="自动发送信息-1"><a href="#自动发送信息-1" class="headerlink" title="自动发送信息"></a>自动发送信息</h4><p>在发送信息时跳过确认步骤。使用 CarPlay 车载时，你可以在 Siri 设置中启用此功能。</p><h3 id="隐私"><a href="#隐私" class="headerlink" title="隐私"></a>隐私</h3><h4 id="安全检查"><a href="#安全检查" class="headerlink" title="安全检查"></a>安全检查</h4><p>“设置”中的这一新增项可帮助遭受家庭暴力或亲密关系暴力的人们快速重设之前授予他人的权限，还能帮你管理已授予过权限的人和 app。</p><h4 id="粘贴板使用许可"><a href="#粘贴板使用许可" class="headerlink" title="粘贴板使用许可"></a>粘贴板使用许可</h4><p>App 需要得到你的许可，才能访问粘贴板，从另一个 app 中粘贴内容。</p><h4 id="流媒体传输优化"><a href="#流媒体传输优化" class="headerlink" title="流媒体传输优化"></a>流媒体传输优化</h4><p>直接从支持非隔空播放协议的设备以流媒体形式传输视频，无需提供蓝牙或本地网络访问权限。</p><h4 id="在照片-App-中锁定“已隐藏”和"><a href="#在照片-App-中锁定“已隐藏”和" class="headerlink" title="在照片 App 中锁定“已隐藏”和"></a>在照片 App 中锁定“已隐藏”和</h4><p>“最近删除”相簿</p><p>默认情况下，“已隐藏”和“最近删除”相簿已锁定。你可以用以下 iPhone 身份验证方式解除锁定：面容 ID、触控 ID 或你的密码。</p><h3 id="安全保护"><a href="#安全保护" class="headerlink" title="安全保护"></a>安全保护</h3><h4 id="快速安全响应"><a href="#快速安全响应" class="headerlink" title="快速安全响应"></a>快速安全响应</h4><p>你的设备可更快获得重要的安全更新。这些更新可在常规软件更新的间隔时段内自动生效。</p><h4 id="横屏使用面容-ID"><a href="#横屏使用面容-ID" class="headerlink" title="横屏使用面容 ID"></a>横屏使用面容 ID</h4><p>在部分支持的 iPhone 机型上，面容 ID 可以横屏使用。</p><h4 id="锁定模式"><a href="#锁定模式" class="headerlink" title="锁定模式"></a>锁定模式</h4><p>个别用户可能会面临有关电子数据安全的严重且具针对性的威胁，这个全新的安全模式，可为他们提供超强大的安全保护。它会进一步强化设备的防御机制，并严格限制某些功能，从而大大减少了可能会被目标高度明确的间谋软件利用的攻击面。</p><h3 id="辅助功能"><a href="#辅助功能" class="headerlink" title="辅助功能"></a>辅助功能</h3><h4 id="Apple-Watch-镜像功能"><a href="#Apple-Watch-镜像功能" class="headerlink" title="Apple Watch 镜像功能"></a>Apple Watch 镜像功能</h4><p>通过 iPhone 充分操控 Apple Watch，并可在 iPhone 上使用切换控制、语音控制等辅助操作功能，让 Apple Watch 物尽其用。</p><h4 id="放大器检测模式"><a href="#放大器检测模式" class="headerlink" title="放大器检测模式"></a>放大器检测模式</h4><p>这种新的放大器模式可为你详细地描述周边环境，包括门检测、人物检测和图像描述。</p><h4 id="放大器中的门检测功能"><a href="#放大器中的门检测功能" class="headerlink" title="放大器中的门检测功能"></a>放大器中的门检测功能</h4><p>可帮你找到门的位置、阅读门周围的标志或标签，并获得如何开门的提示。</p><h4 id="协控"><a href="#协控" class="headerlink" title="协控"></a>协控</h4><p>将多个游戏手柄的输入功能合而为一，让你的帮手助你在游戏中一路通关晋级。</p><h4 id="通过-Siri-结束通话"><a href="#通过-Siri-结束通话" class="headerlink" title="通过 Siri 结束通话"></a>通过 Siri 结束通话</h4><p>在 Siri 的助力下，你可以完全不用动手就结束 通话。只需说声“嘿 Siri，挂电话”(对方也会听到) 。可在“设置”中启用此功能。</p><h4 id="使用“语音控制”结束通话"><a href="#使用“语音控制”结束通话" class="headerlink" title="使用“语音控制”结束通话"></a>使用“语音控制”结束通话</h4><p>你可以使用语音控制功能来挂断电话或结束 FaceTime 通话。只需在“语音控制”启用的状态下，说出语音命令“挂电话”(对方也会听到) 即可。</p><h4 id="图书-App-新增辅助功能选项"><a href="#图书-App-新增辅助功能选项" class="headerlink" title="图书 App 新增辅助功能选项"></a>图书 App 新增辅助功能选项</h4><p>新增主题和自定选项，如文本加粗，调整线条、字体和文字间距等。</p><h4 id="旁白和朗读内容的新语言和新语音"><a href="#旁白和朗读内容的新语言和新语音" class="headerlink" title="旁白和朗读内容的新语言和新语音"></a>旁白和朗读内容的新语言和新语音</h4><p>旁白和朗读内容现增加 20 多种语言的支持，包括孟加拉语 (印度)、保加利亚语、加泰罗尼亚语、乌克兰语和越南语。此外还有数十种专为辅助功能优化的新语音可选。</p><h4 id="在助听设备上让-Siri-播报通知"><a href="#在助听设备上让-Siri-播报通知" class="headerlink" title="在助听设备上让 Siri 播报通知"></a>在助听设备上让 Siri 播报通知</h4><p>你可在 Made for iPhone 助听设备上，让 Siri 为你播报 iPhone 通知。</p><h4 id="Siri-响应时长"><a href="#Siri-响应时长" class="headerlink" title="Siri 响应时长"></a>Siri 响应时长</h4><p>调整 Siri 从你说完话后到响应你请求之间的停顿时长。</p><h4 id="Siri-支持开启或关闭自动接听通话功能"><a href="#Siri-支持开启或关闭自动接听通话功能" class="headerlink" title="Siri 支持开启或关闭自动接听通话功能"></a>Siri 支持开启或关闭自动接听通话功能</h4><p>你可以通过 Siri 开启或关闭电话和 FaceTime 通话的自动接听功能。</p><h2 id="更多精彩功能"><a href="#更多精彩功能" class="headerlink" title="更多精彩功能"></a>更多精彩功能</h2><h3 id="轻-App"><a href="#轻-App" class="headerlink" title="轻 App"></a>轻 App</h3><h4 id="文件大小上限提高"><a href="#文件大小上限提高" class="headerlink" title="文件大小上限提高"></a>文件大小上限提高</h4><p>文件大小上限提高 50%，让你能查找并下载更令人沉浸的轻 App。</p><h4 id="支持实时活动"><a href="#支持实时活动" class="headerlink" title="支持实时活动"></a>支持实时活动</h4><p>你可以在轻 App 中使用实时活动功能</p><h4 id="“聚焦”功能和“Siri-建议”小组件中可提供精确位置建议"><a href="#“聚焦”功能和“Siri-建议”小组件中可提供精确位置建议" class="headerlink" title="“聚焦”功能和“Siri 建议”小组件中可提供精确位置建议"></a>“聚焦”功能和“Siri 建议”小组件中可提供精确位置建议</h4><p>“聚焦”功能和“Siri 建议”小组件中可提供更精确的位置信息，便于你查看附近的轻 App 推荐。</p><h3 id="图书"><a href="#图书" class="headerlink" title="图书"></a>图书</h3><h4 id="自定阅读体验"><a href="#自定阅读体验" class="headerlink" title="自定阅读体验"></a>自定阅读体验</h4><p>新的阅读器中包含多个选项，可让你按需自定属于自己的阅读体验。你可根据不同环境和心情选择阅读主题，或更改字体、间距、文字大小等设置。</p><h3 id="相机"><a href="#相机" class="headerlink" title="相机"></a>相机</h3><h4 id="人像照片前景虚化"><a href="#人像照片前景虚化" class="headerlink" title="人像照片前景虚化"></a>人像照片前景虚化</h4><p>使用人像模式拍照时，可虚化照片前景中的物体，带来更真实的景深效果。</p><h4 id="电影效果模式视频拍摄画质提升"><a href="#电影效果模式视频拍摄画质提升" class="headerlink" title="电影效果模式视频拍摄画质提升"></a>电影效果模式视频拍摄画质提升</h4><p>在 iPhone 13 和 iPhone 13 Pro 上以电影效果模式拍摄视频时，人物的轮廓棱角及其头发、眼镜周围所呈现的景深效果，显得更为精细了。</p><h3 id="通讯录"><a href="#通讯录" class="headerlink" title="通讯录"></a>通讯录</h3><h4 id="信息和通话状态"><a href="#信息和通话状态" class="headerlink" title="信息和通话状态"></a>信息和通话状态</h4><p>来自亲朋好友的未读信息、未接 FaceTime 通话和来电，直接在主屏幕上就能查看。</p><h3 id="词典"><a href="#词典" class="headerlink" title="词典"></a>词典</h3><h4 id="新的词典"><a href="#新的词典" class="headerlink" title="新的词典"></a>新的词典</h4><p>新增五个双语词典：孟加拉语 – 英语、捷克语 – 英语、芬兰语 – 英语、匈牙利语 – 英语、土耳其语 – 英语。</p><h3 id="FaceTime-通话"><a href="#FaceTime-通话" class="headerlink" title="FaceTime 通话"></a>FaceTime 通话</h3><h4 id="FaceTime-通话中的接力功能"><a href="#FaceTime-通话中的接力功能" class="headerlink" title="FaceTime 通话中的接力功能"></a>FaceTime 通话中的接力功能</h4><p>你可将 FaceTime 通话从 iPhone 顺畅地转移到 iPad 或 Mac 上，反过来操作也没问题。你已连接的蓝牙耳机也会同时切换到新设备上。</p><h4 id="发现支持同播共享的-App"><a href="#发现支持同播共享的-App" class="headerlink" title="发现支持同播共享的 App"></a>发现支持同播共享的 App</h4><p>你可在 FaceTime 通话控制选项中查看哪些已安装的 app 支持同播共享功能，并打开它们；你也可以通过浏览 App Store 来探索更多新体验，并分享给朋友。</p><h4 id="协作功能"><a href="#协作功能" class="headerlink" title="协作功能"></a>协作功能</h4><p>进行 FaceTime 通话时轻点“共享“按钮，即可在“文件”、Keynote 讲演、Numbers 表格、Pages 文稿、“备忘录”、“提醒事项”、Safari 浏览器以及支持的第三方 app 中展开协作。</p><h3 id="今年稍晚推出一款新的"><a href="#今年稍晚推出一款新的" class="headerlink" title="今年稍晚推出一款新的"></a>今年稍晚推出一款新的</h3><p>效率类 App</p><h4 id="灵活多用的画板"><a href="#灵活多用的画板" class="headerlink" title="灵活多用的画板"></a>灵活多用的画板</h4><p>这款 app 的画板非常适合用来绘制新项目草图、汇总重要素材，或进行创意讨论。有了这块不设限的画板，你可以尽情发挥创意。</p><h4 id="随处都可画"><a href="#随处都可画" class="headerlink" title="随处都可画"></a>随处都可画</h4><p>这款 app 让你即使身在途中，也可自在享用出色的白板功能。你可以在画板上随处书写、作画，还能根据需要选择并移动文字或图画。</p><h4 id="制作漂亮的图表"><a href="#制作漂亮的图表" class="headerlink" title="制作漂亮的图表"></a>制作漂亮的图表</h4><p>形状图库有 700 多种形状任你选择。你还可更改颜色和尺寸、添加文本，甚至创建和保存你自己的形状。</p><h4 id="各种内容都可添加"><a href="#各种内容都可添加" class="headerlink" title="各种内容都可添加"></a>各种内容都可添加</h4><p>嵌入图片、视频、音频、PDF、文稿和网页链接。你不用离开这块画板，便可以将各种类型的文件添加进来并在其中预览。</p><h3 id="Game-Center"><a href="#Game-Center" class="headerlink" title="Game Center"></a>Game Center</h3><h4 id="活动"><a href="#活动" class="headerlink" title="活动"></a>活动</h4><p>在重新设计的 Game Center 面板和个人资料中，集中一览朋友们的游戏活动和成就。</p><h4 id="同播共享支持"><a href="#同播共享支持" class="headerlink" title="同播共享支持"></a>同播共享支持</h4><p>支持 Gamer Center 多人联机的游戏整合了同播共享功能。与玩伴 FaceTime 通话中，便可以直接一起玩游戏。</p><h4 id="通讯录整合"><a href="#通讯录整合" class="headerlink" title="通讯录整合"></a>通讯录整合</h4><p>通讯录 app 会显示好友的 Gamer Center 个人资料。轻点几下，即可查看他们在玩的游戏和取得的成就。</p><h3 id="iCloud"><a href="#iCloud" class="headerlink" title="iCloud+"></a>iCloud+</h3><h4 id="在-App-中隐藏邮件地址"><a href="#在-App-中隐藏邮件地址" class="headerlink" title="在 App 中隐藏邮件地址"></a>在 App 中隐藏邮件地址</h4><p>隐藏邮件地址功能直接整合进快速输入键盘的建议中，让你能在第三方 app 中保持个人邮件地址的私密性。</p><h3 id="包容性语言"><a href="#包容性语言" class="headerlink" title="包容性语言"></a>包容性语言</h3><h4 id="选择你的称谓"><a href="#选择你的称谓" class="headerlink" title="选择你的称谓"></a>选择你的称谓</h4><p>在使用加拿大法语、欧洲地区法语、意大利语和巴西葡萄牙语时，你可以选择自己喜欢的称谓，让你的设备更具个性。在“语言与地区”设置中，你可以选择让整个系统以何方式称呼你：女性、男性或中性。</p><h3 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h3><h4 id="新增双拼布局"><a href="#新增双拼布局" class="headerlink" title="新增双拼布局"></a>新增双拼布局</h4><p>现为双拼用户推出一款名为“常用”的新布局。</p><h4 id="繁体中文快速输入"><a href="#繁体中文快速输入" class="headerlink" title="繁体中文快速输入"></a>繁体中文快速输入</h4><p>使用拼音输入繁体中文现支持快速输入。</p><h4 id="粤语输入"><a href="#粤语输入" class="headerlink" title="粤语输入"></a>粤语输入</h4><p>用户现在可以使用粤拼等拼音方法输入粤语字词和短语。</p><h4 id="四川话方言支持"><a href="#四川话方言支持" class="headerlink" title="四川话方言支持"></a>四川话方言支持</h4><p>使用简体中文拼音键盘，可以更轻松地输入四川话字词和短语。</p><h4 id="支持自动纠正的新增语言"><a href="#支持自动纠正的新增语言" class="headerlink" title="支持自动纠正的新增语言"></a>支持自动纠正的新增语言</h4><p>支持自动纠正功能的语言新增三种：英语 (新西兰)、英语 (南非) 和哈萨克语。</p><h4 id="支持表情符号搜索的新增语言"><a href="#支持表情符号搜索的新增语言" class="headerlink" title="支持表情符号搜索的新增语言"></a>支持表情符号搜索的新增语言</h4><p>支持表情符号搜索的语言新增 19 种：阿尔巴尼亚语、亚美尼亚语、阿塞拜疆语、孟加拉语、缅甸语、爱沙尼亚语、菲律宾语、格鲁吉亚语、冰岛语、高棉语、老挝语、拉脱维亚语、立陶宛语、马拉地语、蒙古语、旁遮普语、泰米尔语、 乌尔都语和乌兹别克语 (拉丁字母)。</p><h4 id="可选键盘布局的新增语言"><a href="#可选键盘布局的新增语言" class="headerlink" title="可选键盘布局的新增语言"></a>可选键盘布局的新增语言</h4><p>阿帕奇语、宗卡语、萨摩亚语和意第绪语的用户现在可选择键盘布局。</p><h4 id="键盘触感反馈"><a href="#键盘触感反馈" class="headerlink" title="键盘触感反馈"></a>键盘触感反馈</h4><p>开启键盘触感反馈，可以让打字的手感清晰明确。</p><h3 id="拟我表情"><a href="#拟我表情" class="headerlink" title="拟我表情"></a>拟我表情</h3><h4 id="更多贴纸造型"><a href="#更多贴纸造型" class="headerlink" title="更多贴纸造型"></a>更多贴纸造型</h4><p>拟我表情贴纸自带六种富有表现力的新造型。</p><h4 id="联系人贴纸"><a href="#联系人贴纸" class="headerlink" title="联系人贴纸"></a>联系人贴纸</h4><p>所有拟我表情贴纸都可用作联系人图片，联系人贴纸还有三种全新造型可供选择。</p><h4 id="更多发型"><a href="#更多发型" class="headerlink" title="更多发型"></a>更多发型</h4><p>17 款新增和经过更新的发型可供选择，包括全新的卷发造型、经过更新的紧曲发型、非洲三股辫和拳击手辫。</p><h4 id="更多头饰"><a href="#更多头饰" class="headerlink" title="更多头饰"></a>更多头饰</h4><p>配上一顶帽子，让你的拟我表情更有型。</p><h4 id="更多鼻型"><a href="#更多鼻型" class="headerlink" title="更多鼻型"></a>更多鼻型</h4><p>自定义你的拟我表情时，有更多鼻型选项可供选择。</p><h4 id="更中性的唇色"><a href="#更中性的唇色" class="headerlink" title="更中性的唇色"></a>更中性的唇色</h4><p>使用更多选项自定义你的拟我表情，打造中性唇色。</p><h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><h4 id="追随你喜爱的音乐"><a href="#追随你喜爱的音乐" class="headerlink" title="追随你喜爱的音乐"></a>追随你喜爱的音乐</h4><p>有了全新的音乐通知和优化的推荐功能，你可以及时了解自己最关注的艺人的最新动向。</p><h3 id="音乐识别"><a href="#音乐识别" class="headerlink" title="音乐识别"></a>音乐识别</h3><h4 id="历史记录同步"><a href="#历史记录同步" class="headerlink" title="历史记录同步"></a>历史记录同步</h4><p>用控制中心的音乐识别功能识别的歌曲，可与 Shazam app 同步。</p><h4 id="嘿-Siri，这是什么歌？"><a href="#嘿-Siri，这是什么歌？" class="headerlink" title="嘿 Siri，这是什么歌？"></a>嘿 Siri，这是什么歌？</h4><p>用 Siri 识别的歌曲，可与 Shazam app 以及控制中心的音乐识别功能同步。</p><h3 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h3><h4 id="iPhone-上的快速备忘录"><a href="#iPhone-上的快速备忘录" class="headerlink" title="iPhone 上的快速备忘录"></a>iPhone 上的快速备忘录</h4><p>通过 共享 菜单，可在 iPhone 的任何一款 app 中创建快速备忘录。</p><h4 id="优化的智能文件夹"><a href="#优化的智能文件夹" class="headerlink" title="优化的智能文件夹"></a>优化的智能文件夹</h4><p>基于功能强大的全新过滤条件，可自动整理智能文件夹中的备忘录。还可制定规则，用于创建日期、修改日期、共享、提及、核对清单、附件、文件夹、快速备忘录、置顶备忘录和锁定备忘录等事项。</p><h4 id="使用密码锁定"><a href="#使用密码锁定" class="headerlink" title="使用密码锁定"></a>使用密码锁定</h4><p>使用 iPhone 密码对锁定的备忘录进行端到端加密。</p><h4 id="按日期分组的备忘录"><a href="#按日期分组的备忘录" class="headerlink" title="按日期分组的备忘录"></a>按日期分组的备忘录</h4><p>备忘录按“今天”、“昨天”等时间类别进行分组，方便你在列表和图库视图中查看。</p><h4 id="通过链接进行协作"><a href="#通过链接进行协作" class="headerlink" title="通过链接进行协作"></a>通过链接进行协作</h4><p>允许具有链接的任何人共享备忘录。</p><h4 id="按任意或所有条件过滤"><a href="#按任意或所有条件过滤" class="headerlink" title="按任意或所有条件过滤"></a>按任意或所有条件过滤</h4><p>选择是否在“智能文件夹”或“标签浏览器”中按任意或所有条件过滤。</p><h3 id="照片"><a href="#照片" class="headerlink" title="照片"></a>照片</h3><h4 id="重复照片检测"><a href="#重复照片检测" class="headerlink" title="重复照片检测"></a>重复照片检测</h4><p>照片 app 能够识别“相簿 &gt;更多项目”中的重复照片，便于你快速清理图库。</p><h4 id="锁定“已隐藏”和“最近删除”相簿"><a href="#锁定“已隐藏”和“最近删除”相簿" class="headerlink" title="锁定“已隐藏”和“最近删除”相簿"></a>锁定“已隐藏”和“最近删除”相簿</h4><p>默认情况下，“已隐藏”和“最近删除”相簿已锁定，你可以用以下 iPhone 身份验证方式解除锁定：面容 ID、触控 ID 或你的密码。</p><h4 id="拷贝和粘贴编辑内容"><a href="#拷贝和粘贴编辑内容" class="headerlink" title="拷贝和粘贴编辑内容"></a>拷贝和粘贴编辑内容</h4><p>你在某张照片上所做的编辑，可以拷贝并粘贴到另一张或一批照片上。</p><h4 id="按字母顺序为人物排序"><a href="#按字母顺序为人物排序" class="headerlink" title="按字母顺序为人物排序"></a>按字母顺序为人物排序</h4><p>你可以按字母顺序对“人物”相簿进行排序。</p><h4 id="撤销和重做编辑步骤"><a href="#撤销和重做编辑步骤" class="headerlink" title="撤销和重做编辑步骤"></a>撤销和重做编辑步骤</h4><p>撤销和重做在照片中的多个编辑步骤。</p><h4 id="轻点即可重播“回忆”中的视频"><a href="#轻点即可重播“回忆”中的视频" class="headerlink" title="轻点即可重播“回忆”中的视频"></a>轻点即可重播“回忆”中的视频</h4><p>播放“回忆”中的视频时，轻点即可重新开始，在音乐继续播放的同时从头开始视频播放。</p><h4 id="新的回忆类型"><a href="#新的回忆类型" class="headerlink" title="新的回忆类型"></a>新的回忆类型</h4><p>新增“往年今日”和“儿童玩耍”两种回忆类型。</p><h4 id="关闭精选内容"><a href="#关闭精选内容" class="headerlink" title="关闭精选内容"></a>关闭精选内容</h4><p>停止在照片 app 和“照片”小组件中显示“回忆”和“精选照片”。</p><h3 id="播客"><a href="#播客" class="headerlink" title="播客"></a>播客</h3><h4 id="CarPlay-车载的新资料库"><a href="#CarPlay-车载的新资料库" class="headerlink" title="CarPlay 车载的新资料库"></a>CarPlay 车载的新资料库</h4><p>在 CarPlay 车载中，更快取用资料库的更多内容。你可以更轻松地找到已下载和保存的单集，还能看到在追的节目有哪些更新。</p><h3 id="提醒事项"><a href="#提醒事项" class="headerlink" title="提醒事项"></a>提醒事项</h3><h4 id="置顶列表"><a href="#置顶列表" class="headerlink" title="置顶列表"></a>置顶列表</h4><p>可将常用列表置顶，以便快速访问。</p><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p>将列表保存为模板，以便重复用于日常事务、行李清单以及更多事项。创建链接以发布模板并与其他人分享，或下载其他人分享的模板。</p><h4 id="“已完成”智能列表"><a href="#“已完成”智能列表" class="headerlink" title="“已完成”智能列表"></a>“已完成”智能列表</h4><p>在同一个位置查看所有已完成的提醒事项，以及它们的完成时间等详情。</p><h4 id="优化的“已计划”和“今天”列表"><a href="#优化的“已计划”和“今天”列表" class="headerlink" title="优化的“已计划”和“今天”列表"></a>优化的“已计划”和“今天”列表</h4><p>基于时间和日期的分组，便于你更轻松地查看和添加提醒事项。“今天”列表按照“上午”、“下午”和“晚上”进行分组，帮你划分全天的时间。“已计划”列表新增了按周和按月分组，有助于进行更长期的组织规划。</p><h4 id="优化的列表分组"><a href="#优化的列表分组" class="headerlink" title="优化的列表分组"></a>优化的列表分组</h4><p>可轻点某个分组，以组合视图查看其包含的列表和提醒事项。</p><h4 id="共享列表中的通知"><a href="#共享列表中的通知" class="headerlink" title="共享列表中的通知"></a>共享列表中的通知</h4><p>当你的共享列表中有任务添加或完成时，你会收到相关通知。</p><h4 id="更丰富的备注"><a href="#更丰富的备注" class="headerlink" title="更丰富的备注"></a>更丰富的备注</h4><p>为提醒事项添加备注时，可创建项目符号，添加下划线、删除线，或加粗字体。</p><h4 id="按任意或所有条件过滤-1"><a href="#按任意或所有条件过滤-1" class="headerlink" title="按任意或所有条件过滤"></a>按任意或所有条件过滤</h4><p>选择是否在“自定智能列表”或“标签浏览器”中按任意或所有条件过滤。</p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><h4 id="AirPods-设置"><a href="#AirPods-设置" class="headerlink" title="AirPods 设置"></a>AirPods 设置</h4><p>在同一界面取用和自定 AirPods 的功能与设置。连接至 AirPods 时，“设置”的顶部会出现 AirPods 菜单。</p><h4 id="编辑“已知网络”"><a href="#编辑“已知网络”" class="headerlink" title="编辑“已知网络”"></a>编辑“已知网络”</h4><p>无线局域网设置中的“已知网络”列表，让你可以删减已知网络，也可快速查看网络信息。</p><h3 id="聚焦"><a href="#聚焦" class="headerlink" title="聚焦"></a>聚焦</h3><h4 id="从主屏幕启动搜索"><a href="#从主屏幕启动搜索" class="headerlink" title="从主屏幕启动搜索"></a>从主屏幕启动搜索</h4><p>直接从主屏幕底部调用聚焦功能来搜索，便可轻松打开各款 app、查找联系人或是从网页上获取信息。</p><h4 id="优化的-Siri-建议"><a href="#优化的-Siri-建议" class="headerlink" title="优化的 Siri 建议"></a>优化的 Siri 建议</h4><p>“最近搜索”让你可以快速回访搜索结果。现在，Siri 建议会考虑你的前情后况，这样你可以加快一些事务的进度，诸如导航到下一场会议或是查看即将起飞的航班状态。</p><h4 id="更多-App-支持图像搜索"><a href="#更多-App-支持图像搜索" class="headerlink" title="更多 App 支持图像搜索"></a>更多 App 支持图像搜索</h4><p>聚焦功能可使用信息、备忘录和文件中的图像信息，并根据位置、人物、场景甚至图像中的事物 (如文本、一只狗或一辆汽车)，来进行搜索。</p><h4 id="快速操作-1"><a href="#快速操作-1" class="headerlink" title="快速操作"></a>快速操作</h4><p>使用“聚焦”快速执行各种操作，包括启动计时器、开启专注模式、用 Shazam 查找歌名、运行任何快捷指令等等。搜索某个 app 的名字即可查看适用于此 app 的快捷指令，你也可使用快捷指令 app 创建自己的快捷指令。</p><h4 id="开启实时活动"><a href="#开启实时活动" class="headerlink" title="开启实时活动"></a>开启实时活动</h4><p>直接从“聚焦”搜索结果开启实时活动功能。</p><h3 id="股市"><a href="#股市" class="headerlink" title="股市"></a>股市</h3><h4 id="收益报告发布日期"><a href="#收益报告发布日期" class="headerlink" title="收益报告发布日期"></a>收益报告发布日期</h4><p>查看某公司即将发布收益报告的日期并将其添加到日历。</p><h4 id="多个关注列表"><a href="#多个关注列表" class="headerlink" title="多个关注列表"></a>多个关注列表</h4><p>创建多个自定义关注列表，整理你追踪的股票行情。使用你选择的任意标准将股票代码分组，如行业、资产类型、所有权状态等。</p><h4 id="小组件新增选项"><a href="#小组件新增选项" class="headerlink" title="小组件新增选项"></a>小组件新增选项</h4><p>在中尺寸和大尺寸的“股市”小组件中使用全新的两栏布局，便于查看更多股票代码。</p><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><h4 id="新增语言-1"><a href="#新增语言-1" class="headerlink" title="新增语言"></a>新增语言</h4><p>新的系统语言包括保加利亚语和哈萨克语。</p><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><h4 id="精选"><a href="#精选" class="headerlink" title="精选"></a>精选</h4><p>你现可根据主题和兴趣访问精选。</p><h3 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h3><h4 id="翻译相机"><a href="#翻译相机" class="headerlink" title="翻译相机"></a>翻译相机</h4><p>使用翻译 app 中的相机来翻译身边的文本。定住取景画面，翻译结果会以重叠的方式呈现于照片中的文本之上，放大可看得更清楚；你还可翻译照片图库中照片上的文本。</p><h4 id="新增语言-2"><a href="#新增语言-2" class="headerlink" title="新增语言"></a>新增语言</h4><p>翻译 app 及系统自带的翻译功能新增了对土耳其语、泰语、越南语、波兰语、印尼语和荷兰语的支持。</p><h3 id="看图查询"><a href="#看图查询" class="headerlink" title="看图查询"></a>看图查询</h3><h4 id="从背景提取主体"><a href="#从背景提取主体" class="headerlink" title="从背景提取主体"></a>从背景提取主体</h4><p>将主体从图像中提取出来，或通过移除背景分离出主体。可用于照片、截屏、快速查看和 Safari 浏览器等 app 或功能。</p><h3 id="天气-1"><a href="#天气-1" class="headerlink" title="天气"></a>天气</h3><h4 id="极端天气通知"><a href="#极端天气通知" class="headerlink" title="极端天气通知"></a>极端天气通知</h4><p>当周边地区发布极端天气警报时，你会收到通知。</p><h4 id="更多天气详情"><a href="#更多天气详情" class="headerlink" title="更多天气详情"></a>更多天气详情</h4><p>轻点天气 app 中的任意模块，即可显示一组更细化的新数据，比如未来 10 天的每小时气温和降水概率。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;锁定屏幕&quot;&gt;&lt;a href=&quot;#锁定屏幕&quot; class=&quot;headerlink&quot; title=&quot;锁定屏幕&quot;&gt;&lt;/a&gt;锁定屏幕&lt;/h3&gt;&lt;h4 id=&quot;锁定屏幕图库&quot;&gt;&lt;a href=&quot;#锁定屏幕图库&quot; class=&quot;headerlink&quot; title=&quot;锁定屏幕图库&quot;&gt;&lt;/a&gt;锁定屏幕图库&lt;/h4&gt;&lt;p&gt;从包含众多样式的图库中寻找灵感，定制个性化的锁定屏幕，每款都有自己独特的背景、风格化的日期和时间显示方式，以及便于快速查看的信息。&lt;/p&gt;
&lt;h4 id=&quot;切换锁定屏幕&quot;&gt;&lt;a href=&quot;#切换锁定屏幕&quot; class=&quot;headerlink&quot; title=&quot;切换锁定屏幕&quot;&gt;&lt;/a&gt;切换锁定屏幕&lt;/h4&gt;&lt;p&gt;你可以随时切换锁定屏幕。只需按住锁定屏幕，然后手指轻扫即可。&lt;/p&gt;
&lt;h4 id=&quot;编辑锁定屏幕&quot;&gt;&lt;a href=&quot;#编辑锁定屏幕&quot; class=&quot;headerlink&quot; title=&quot;编辑锁定屏幕&quot;&gt;&lt;/a&gt;编辑锁定屏幕&lt;/h4&gt;&lt;p&gt;轻点锁定屏幕上的各项元素，即可轻松自定其字体、颜色或摆放位置。&lt;/p&gt;
&lt;h4 id=&quot;风格化的显示日期和时间&quot;&gt;&lt;a href=&quot;#风格化的显示日期和时间&quot; class=&quot;headerlink&quot; title=&quot;风格化的显示日期和时间&quot;&gt;&lt;/a&gt;风格化的显示日期和时间&lt;/h4&gt;&lt;p&gt;选择充满表现力的字体样式和颜色，自定锁定屏幕上日期和时间的显示外观。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://fanbaoying.github.io/categories/iOS/"/>
    
    
      <category term="iOS 16" scheme="https://fanbaoying.github.io/tags/iOS-16/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 43 字符串相乘</title>
    <link href="https://fanbaoying.github.io/LeetCode-43-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98/"/>
    <id>https://fanbaoying.github.io/LeetCode-43-字符串相乘/</id>
    <published>2022-09-09T11:14:40.000Z</published>
    <updated>2022-09-09T11:15:39.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。微博:@故胤道长</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 42 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：中等</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给定两个以字符串形式表示的非负整数 <code>num1</code> 和 <code>num2</code>，返回 <code>num1</code> 和 <code>num2</code> 的乘积，它们的乘积也表示为字符串形式。</p><p><strong>注意：</strong>不能使用任何内置的 <code>BigInteger</code> 库或直接将输入转换为整数。</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: num1 = &quot;2&quot;, num2 = &quot;3&quot;</span><br><span class="line">输出: &quot;6&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: num1 = &quot;123&quot;, num2 = &quot;456&quot;</span><br><span class="line">输出: &quot;56088&quot;</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>1 &lt;= num1.length, num2.length &lt;= 200</code></li><li><code>num1</code> 和 <code>num2</code> 只能由数字组成。</li><li><code>num1</code> 和 <code>num2</code> 都不包含任何前导零，除了数字0本身。</li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiplyStrings</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">multiply</span><span class="params">(<span class="number">_</span> num1: String, <span class="number">_</span> num2: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> num1 = num1.reversed(), num2 = num2.reversed()</span><br><span class="line">        <span class="keyword">var</span> res = <span class="type">Array</span>(repeating: <span class="number">0</span>, <span class="built_in">count</span>: num1.<span class="built_in">count</span> + num2.<span class="built_in">count</span>), resStr = <span class="string">""</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// calculate product for every digit</span></span><br><span class="line">        <span class="keyword">for</span> (i, char1) <span class="keyword">in</span> num1.enumerated() &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> digit1 = <span class="type">Int</span>(<span class="type">String</span>(char1)) <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">fatalError</span>(<span class="string">"Invalid Input num1"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (j, char2) <span class="keyword">in</span> num2.enumerated() &#123;</span><br><span class="line">                <span class="keyword">guard</span> <span class="keyword">let</span> digit2 = <span class="type">Int</span>(<span class="type">String</span>(char2)) <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">fatalError</span>(<span class="string">"Invalid Input num2"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                res[i + j] += digit1 * digit2</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// update digits</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;res.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> num = res[i]</span><br><span class="line">            </span><br><span class="line">            res[i] = num % <span class="number">10</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; res.<span class="built_in">count</span> - <span class="number">1</span> &#123;</span><br><span class="line">                res[i + <span class="number">1</span>] += num / <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            resStr = <span class="string">"<span class="subst">\(res[i])</span>"</span> + resStr</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// trim starting 0s</span></span><br><span class="line">        <span class="keyword">while</span> !resStr.isEmpty &amp;&amp; resStr.first! == <span class="string">"0"</span> &#123;</span><br><span class="line">            resStr.removeFirst()</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> resStr.isEmpty ? <span class="string">"0"</span> : resStr</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：反向两个字符串，并使用嵌套循环将它们与每一位数字相乘，然后使用求和和进位的思想得到最终结果。</li><li>时间复杂度： O(nm)</li><li>空间复杂度： O(n)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/multiply-strings/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。微博:@故胤道长&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 42 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：中等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
</feed>
