<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Swift社区</title>
  
  <subtitle>做最好的 Swift 社区</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fanbaoying.github.io/"/>
  <updated>2022-11-29T03:26:37.984Z</updated>
  <id>https://fanbaoying.github.io/</id>
  
  <author>
    <name>Swift社区</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Swift 周报 第十八期</title>
    <link href="https://fanbaoying.github.io/Swift-%E5%91%A8%E6%8A%A5-%E7%AC%AC%E5%8D%81%E5%85%AB%E6%9C%9F/"/>
    <id>https://fanbaoying.github.io/Swift-周报-第十八期/</id>
    <published>2022-11-29T03:25:32.000Z</published>
    <updated>2022-11-29T03:26:37.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本期是 Swift 编辑组自主整理周报的第九期</strong>，每个模块已初步成型。各位读者如果有好的提议，欢迎在文末留言。</p><p>Swift 周报在 <a href="https://github.com/SwiftCommunityRes/SwiftWeekly" title="SwiftWeekly" target="_blank" rel="noopener">GitHub 开源</a>，欢迎提交 issue，投稿或推荐内容。目前计划每两周周一发布，欢迎志同道合的朋友一起加入周报整理。</p><p>蝴蝶的生命之所以如此短暂，因为它的翅膀太过精致了。Swift社区之所以浩瀚汹涌，因为它总想牵动起每一位读者的心！👊👊👊</p><blockquote><p><strong>周报精选</strong></p><p>新闻和社区：苹果 70 亿收购曼联消息不实</p><p>提案：Package 注册表认证</p><p>Swift 论坛：讨论数组的悬空指针</p><p>推荐博文：灵动岛开发</p><p><strong>话题讨论：</strong> </p><p>世界杯你赚钱了吗？</p><p>你觉得国足几年内能进世界杯？</p></blockquote><a id="more"></a><h2 id="新闻和社区"><a href="#新闻和社区" class="headerlink" title="新闻和社区"></a>新闻和社区</h2><h3 id="苹果-70-亿收购曼联消息不实"><a href="#苹果-70-亿收购曼联消息不实" class="headerlink" title="苹果 70 亿收购曼联消息不实"></a>苹果 70 亿收购曼联消息不实</h3><p>此前，有消息称苹果有意以 70 亿美元收购曼联。11 月 25 日消息，有多位知情人士表示，这条消息并不属实，苹果目前不准备收购英超俱乐部曼联。</p><p><img src="https://pic.rmb.bdstatic.com/bjh/news/ce99a6dd230252a9a9df8a2a37678858.jpeg" alt="苹果公司"></p><p>据悉，苹果收购曼联这条消息出自英国小报《The Daily Star》，苹果公司计划斥资大约 70 亿美元用于收购曼联，但据外媒 MacRumors 直接联系多名知情人士，确认这则报道是错误的、不实的。虽然没有收购曼联的计划，但苹果一直在推动体育内容的发展。该公司与 MLB 合作，在 2022 年常规赛期间，每周在 Apple TV + 上播放“ Friday Night Baseball ”两场比赛，并且在未来10年内，它将成为 MLS 比赛的独家供应商。</p><p>虽然苹果不准备收购曼联，但确实在推进体育方面的内容。苹果与美国职业棒球大联盟（MLB）合作，2022 年每周通过 Apple TV+ 播放常规赛。该公司还将成为未来 10 年的美国职业足球大联盟（MLS）的独家提供商。另有消息称，苹果还可能从下个赛季开始购买美国职业橄榄球联盟（NFL）的流媒体转播权。</p><p>目前，世界杯正在进行中，有关足球的消息总能吸引外界，但苹果收购曼联这事确实让人摸不着头脑。</p><h3 id="供应链确认-iPhone15-全系-C-口"><a href="#供应链确认-iPhone15-全系-C-口" class="headerlink" title="供应链确认 iPhone15 全系 C 口"></a>供应链确认 iPhone15 全系 C 口</h3><p>供应链传出苹果下一代 iPhone 15 最新规格。业内人士预计，升级焦点将集中在 Pro 上，包括 3nm AP、8GB LPDDR5 DRAM 和虚拟侧键等。基本型号的配备规格则预计包括 4nm AP、开孔设计和 48MPx 主镜头。此外，iPhone 15 系列所有机型都将采用 USB Type-C 接口。（财联社）</p><p><img src="https://files.mdnice.com/user/17787/d0c12b07-ba20-4345-aa0a-64013bdb9fd4.gif" alt=""></p><h3 id="iPhone15-或告别纯直边！效果图出炉：神似-iPhone-5C"><a href="#iPhone15-或告别纯直边！效果图出炉：神似-iPhone-5C" class="headerlink" title="iPhone15 或告别纯直边！效果图出炉：神似 iPhone 5C"></a>iPhone15 或告别纯直边！效果图出炉：神似 iPhone 5C</h3><p>据 AppleInsider 报道，据博主 ShrimpApplePro 掌握的早期信息，iPhone15 将采用全新的边框设计，后边缘角将变圆，不再是直边框，材料也将会是钛金属。还有网友提前带来了效果图，来看看！</p><p><img src="https://files.mdnice.com/user/17787/cc52aa27-8c5c-4022-a7d1-534ba1095105.gif" alt=""></p><h2 id="提案"><a href="#提案" class="headerlink" title="提案"></a>提案</h2><h3 id="正在审查的提案"><a href="#正在审查的提案" class="headerlink" title="正在审查的提案"></a>正在审查的提案</h3><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0378-package-registry-auth.md" title="SE-0378" target="_blank" rel="noopener">SE-0378</a> <strong>Package 注册表认证</strong> 提案正在审查。</p><p>Web 服务使用的常用身份验证方法包括基本身份验证、访问令牌和 OAuth。SwiftPM 目前只支持基本的身份验证，这限制了它与 Package 注册服务交互的能力。</p><p>Package 注册表需要对其部分或全部 API 进行身份验证，以便识别执行操作的用户并相应地授权请求。</p><h2 id="Swift论坛"><a href="#Swift论坛" class="headerlink" title="Swift论坛"></a>Swift论坛</h2><p>1) 讨论<a href="https://forums.swift.org/t/should-i-stick-with-codable-or-switch-back-to-nscoding/61604" title="是否应该用 Codable 还是用 NSCoding" target="_blank" rel="noopener">是否应该用 Codable 还是用 NSCoding</a></p><p>2) 讨论<a href="https://forums.swift.org/t/nskeyedarchiver-coredata-and-other-storage-solutions/61603" title="NSKeyedArchiver, CoreData 和其他的存储方案" target="_blank" rel="noopener">NSKeyedArchiver, CoreData 和其他的存储方案</a></p><p>3) 讨论<a href="https://forums.swift.org/t/dangling-pointer-from-array/61609" title="数组的悬空指针" target="_blank" rel="noopener">数组的悬空指针</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> array = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">    <span class="keyword">let</span> ptrToArray = <span class="type">UnsafeBufferPointer</span>&lt;<span class="type">Int</span>&gt;(start: &amp;array, <span class="built_in">count</span>: array.<span class="built_in">count</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> ptrToArray &#123;</span><br><span class="line">        <span class="built_in">print</span>(number)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">array.withUnsafeBufferPointer &#123; ptrToArray <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> ptrToArray &#123;</span><br><span class="line">        <span class="built_in">print</span>(number)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4) 讨论<a href="https://forums.swift.org/t/how-to-trigger-action-from-alert-callback-created-in-reducerprotocol/61598" title="如何从 ReducerProtocol 中创建的alert回调中触发操作" target="_blank" rel="noopener">如何从 ReducerProtocol 中创建的alert回调中触发操作</a></p><p>5) 讨论<a href="https://forums.swift.org/t/code-size-difference-with-keypath-vs-closure/61599" title="键路径与闭包的代码大小差异" target="_blank" rel="noopener">键路径与闭包的代码大小差异</a></p><p>6) 讨论<a href="https://forums.swift.org/t/migrating-an-objective-c-codebase-to-swift/61592" title="将 Objective-C 代码库迁移到 Swift" target="_blank" rel="noopener">将 Objective-C 代码库迁移到 Swift</a><br>Steve Barnegren 撰写的从 Objective-C 迁移到 Swift 30 的博客文章是一本不错的读物。</p><p>7) 讨论<a href="https://forums.swift.org/t/difference-between-rawrepresentable-string-and-losslessstringconvertible/61600" title="RawRepresentable&lt;String&gt; 和 LosslessStringConvertible 的区别" target="_blank" rel="noopener">RawRepresentable<string> 和  LosslessStringConvertible 的区别</string></a><br>LosslessStringConvertible 改进了 CustomStringConvertible，这会影响其他事情，例如对 String(describing:) 的调用。<br>从语义上讲，LosslessStringConvertible 意味着它可以表示为字符串（例如整数），而 RawRepresentable<string> 意味着它在底层是一个字符串（例如原始类型为 String 的枚举）。</string></p><p>8) 讨论<a href="https://forums.swift.org/t/i-cant-recreate-my-class-using-protocols-extension-stored-properties/61589" title="无法使用 protocol 重新创建的类 - 扩展存储属性" target="_blank" rel="noopener">无法使用 protocol 重新创建的类 - 扩展存储属性</a><br>简短的回答是“ protocol 不能定义存储的属性”。 协议一致性可以在定义类型的模块之外定义，这很自然地得出结论：这样的协议如何添加存储？<br>您能做的最好的事情就是让协议要求您的类型具有存储空间。 您的类型定义仍然必须实际定义该存储。</p><p>9) 讨论<a href="https://forums.swift.org/t/uuid-in-state-initializer/61593" title="状态初始化器中的 UUID" target="_blank" rel="noopener">状态初始化器中的 UUID</a></p><p>10) 讨论<a href="https://forums.swift.org/t/decimal-or-double-for-financial-calculations/61585" title="对于金融计算用 Decimal 还是 Double" target="_blank" rel="noopener">对于金融计算用 Decimal 还是 Double</a></p><h2 id="推荐博文"><a href="#推荐博文" class="headerlink" title="推荐博文"></a>推荐博文</h2><p><a href="https://swiftwithmajid.com/2022/09/28/mastering-dynamic-island-in-swiftui/" title="Mastering Dynamic Island in SwiftUI" target="_blank" rel="noopener">在 SwiftUI 中开发灵动岛</a></p><p><strong>摘要：</strong> 本文将详细介绍使用 WidgetKit 框架中新的 API 实现灵动岛的开发配置和自定义功能。</p><p><a href="https://nemecek.be/blog/171/dynamic-island-and-live-activities-quick-start-tutorial" title="Dynamic Island (and Live Activities): Quick start tutorial" target="_blank" rel="noopener">灵动岛快速入门教程</a></p><p><strong>摘要：</strong> Dynamic Island 是 <code>Live Activities</code> API 的一部分，Live Activities API 是 <code>Widgets</code> 系统的一部分。关于 Widgets 详细使用可以参考之前发布的 <a href="https://mp.weixin.qq.com/s/jYbRAJhhdE8H8xeoBnTEaA" target="_blank" rel="noopener">SwiftUI 锁屏小组件</a></p><p><a href="https://zhuanlan.zhihu.com/p/577728766" title="iOS16 灵动岛 ActivityKit 开发" target="_blank" rel="noopener">iOS16 灵动岛 ActivityKit 开发</a></p><p><strong>摘要：</strong> iOS16.1 苹果向我们开放了 ActivityKit。 使用此框架我们可以在锁定屏幕或者灵动岛上显示实时活动。</p><h2 id="话题讨论"><a href="#话题讨论" class="headerlink" title="话题讨论"></a>话题讨论</h2><p><strong>世界杯你赚钱了吗？</strong></p><p>14 亿人为什么选不出一支十多人的优秀团队？到底是哪里出了问题？元芳，你怎么看？国足⚽️的未来在哪里？</p><p><strong>你觉得国足几年内能进世界杯？</strong></p><p>欢迎在文末留言参与讨论。</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p><strong>Swift社区</strong>是由 Swift 爱好者共同维护的公益组织，我们在国内以微信公众号的运营为主，我们会分享以 <strong>Swift实战</strong>、<strong>SwiftUl</strong>、<strong>Swift基础</strong>为核心的技术内容，也整理收集优秀的学习资料。</p><p>欢迎关注公众号:Swift社区，后台点击进群，可以进入我们社区的交流讨论群。希望我们Swift社区是大家在网络空间中的另一份共同的归属。</p><p><img width="500" alt="Swift社区" src="https://user-images.githubusercontent.com/24238160/132703149-34121c6c-fd18-491c-a697-58a0fabf3060.png"></p><p>特别感谢 Swift社区 编辑部的每一位编辑，感谢大家的辛苦付出，为 Swift社区 提供优质内容，为 Swift 语言的发展贡献自己的力量。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本期是 Swift 编辑组自主整理周报的第九期&lt;/strong&gt;，每个模块已初步成型。各位读者如果有好的提议，欢迎在文末留言。&lt;/p&gt;
&lt;p&gt;Swift 周报在 &lt;a href=&quot;https://github.com/SwiftCommunityRes/SwiftWeekly&quot; title=&quot;SwiftWeekly&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub 开源&lt;/a&gt;，欢迎提交 issue，投稿或推荐内容。目前计划每两周周一发布，欢迎志同道合的朋友一起加入周报整理。&lt;/p&gt;
&lt;p&gt;蝴蝶的生命之所以如此短暂，因为它的翅膀太过精致了。Swift社区之所以浩瀚汹涌，因为它总想牵动起每一位读者的心！👊👊👊&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;周报精选&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新闻和社区：苹果 70 亿收购曼联消息不实&lt;/p&gt;
&lt;p&gt;提案：Package 注册表认证&lt;/p&gt;
&lt;p&gt;Swift 论坛：讨论数组的悬空指针&lt;/p&gt;
&lt;p&gt;推荐博文：灵动岛开发&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;话题讨论：&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;世界杯你赚钱了吗？&lt;/p&gt;
&lt;p&gt;你觉得国足几年内能进世界杯？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Swift 周报" scheme="https://fanbaoying.github.io/categories/Swift-%E5%91%A8%E6%8A%A5/"/>
    
    
      <category term="Swift" scheme="https://fanbaoying.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 周报 第十七期</title>
    <link href="https://fanbaoying.github.io/Swift-%E5%91%A8%E6%8A%A5-%E7%AC%AC%E5%8D%81%E4%B8%83%E6%9C%9F/"/>
    <id>https://fanbaoying.github.io/Swift-周报-第十七期/</id>
    <published>2022-11-14T07:53:09.000Z</published>
    <updated>2022-11-14T07:54:53.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本期是 Swift 编辑组自主整理周报的第八期</strong>，每个模块已初步成型。各位读者如果有好的提议，欢迎在文末留言。</p><p>欢迎投稿或推荐内容。目前计划每两周周一发布，欢迎志同道合的朋友一起加入周报整理。</p><p>风起雨坠袭大地，叶落冬来又一年。<strong>Swift社区</strong>，和你同风雨，与你共未来！👊👊👊</p><blockquote><p><strong>周报精选</strong></p><p>新闻和社区：苹果发布最新声明！将工人健康放在首位，iPhone 14 Pro 收获需等待更长时间。</p><p>提案：Swift 论坛讨论人气最高的提案</p><p>Swift 论坛：比较两个 “any Error” 的相等性</p><p>推荐博文：iOS 16 统计图实战汇总</p><p><strong>话题讨论：</strong> 大家觉得互联网行业会不会持续走下坡路？</p></blockquote><a id="more"></a><h2 id="新闻和社区"><a href="#新闻和社区" class="headerlink" title="新闻和社区"></a>新闻和社区</h2><h3 id="11-月-14-日，参与新一周的-Ask-Apple-活动"><a href="#11-月-14-日，参与新一周的-Ask-Apple-活动" class="headerlink" title="11 月 14 日，参与新一周的 Ask Apple 活动"></a>11 月 14 日，参与新一周的 Ask Apple 活动</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f24c1898773749e790a319f674361501~tplv-k3u1fbpfcp-watermark.image?" alt=""></p><p>欢迎继续参与新一周激动人心的 Ask Apple 开发者系列活动，与 Apple 专家直接交流沟通。针对如何将最新技术集成到您的 App 中、设计直观的 UI，以及测试最新软件等主题大胆提问。</p><p>活动将于 11 月 14 日至 18 日举行，届时将提供多种语言和多个时区的在线一对一咨询和小组 Q&amp;A。现已面向 Apple Developer Program 和 Apple Developer Enterprise Program 的当前成员开放注册。</p><p>Ask Apple 开发者系列活动终场周将在 12 月推出，敬请关注详情。</p><h3 id="苹果发布最新声明！将工人健康放在首位，iPhone-14-Pro-收获需等待更长时间。"><a href="#苹果发布最新声明！将工人健康放在首位，iPhone-14-Pro-收获需等待更长时间。" class="headerlink" title="苹果发布最新声明！将工人健康放在首位，iPhone 14 Pro 收获需等待更长时间。"></a>苹果发布最新声明！将工人健康放在首位，iPhone 14 Pro 收获需等待更长时间。</h3><p>11 月 7 日，苹果对 iPhone 14 Pro 和 iPhone 14 Pro Max 目前的供应情况做出最新声明。苹果称，富士康郑州工厂目前的产能大幅度降低，iPhone 14 Pro 和 iPhone 14 Pro Max 的出货量将低于预期。</p><p>苹果表示，“我们继续看到对 iPhone 14 Pro 和 iPhone 14 Pro Max 机型的强劲需求。然而，我们现在预计 iPhone 14 Pro 和 iPhone 14 Pro Max 的出货量将低于我们之前的预期，顾客将需要等待更长的时间才能收到新产品。”</p><p>苹果称，正在与供应商密切合作，以恢复正常的生产水平，同时确保每个工人的健康和安全。</p><h3 id="macOS-Ventura-更高效，更尽兴，更跨界。"><a href="#macOS-Ventura-更高效，更尽兴，更跨界。" class="headerlink" title="macOS Ventura 更高效，更尽兴，更跨界。"></a>macOS Ventura 更高效，更尽兴，更跨界。</h3><p>macOS Ventura 让各种日常操作都进化成神操作。一波新技能助你搞定更多，一众常用 app 能分享和协作，晋级的游戏让你更投入，还有种种妙招能拉上其他设备一起显身手。</p><p>优化的搜索功能，搜索功能可提供更准确、更完整的搜寻结果，还能在你键入前就提供搜索建议。</p><p>聚焦的快速操作，现在，你可使用聚焦搜索快速执行操作，比如设置闹钟、开启专注模式、用 Shazam 查找歌名、运行快捷指令等。</p><p>共享标签页组，从 Safari 浏览器直接分享标签页和书签，或发送信息。无论是与好友规划行程，还是与家人选购沙发，你都可以在一处地方集中分享所有标签页。而你的伙伴也可把他们的标签页添加进来。</p><p>收发信息的新技能，现在，你可对刚发出的信息进行编辑，或是将其撤回。另外，对于无法及时回复，想回头再来处理的信息，可标为未读。</p><p>iCloud 共享照片图库，可与最多五人顺畅地分享照片和视频，鼓励大家一起制作家庭照片集，让回忆更丰富完整。iCloud 共享照片图库会把家人们的美好回忆都集于一处，让每个家庭成员随时都能欣赏，即使不是自己拍摄或编辑的照片也能看到。</p><p>多种智能的共享方式，共享照片图库可以根据开始日期或照片中的人物，选取想要囊括的内容来进行设置。完成后，你可以手动分享，也可以看看边栏里新的“为共享图库推荐”，根据它的智能建议将照片添加进来。</p><p>在 App 之间切换，轻点一下，可在各 app 和窗口之间流畅切换；点按桌面任意位置，则能快速返回某个文件或文件夹。</p><p>FaceTime 通话也能玩接力了，轻轻一点，就能在设备之间转移 FaceTime 通话，方便你随时换上合适的设备。</p><p>让 iPhone 兼职网络摄像头，iPhone 强大的摄像头系统配合 Mac，能实现以往普通网络摄像头做不到的效果。只要将 iPhone 靠近 Mac，输入源就会自动切换为 iPhone，而且过程是无线的，不用动手插拔。</p><p>更多 macOS Ventura 新功能请查阅 <a href="https://www.apple.com.cn/macos/ventura/" target="_blank" rel="noopener">https://www.apple.com.cn/macos/ventura/</a></p><h2 id="提案"><a href="#提案" class="headerlink" title="提案"></a>提案</h2><p>提案模块本期没有新的状态更新。下面推荐几个在 <strong>Swift 论坛讨论人气最高</strong>的往期提案。感兴趣的小伙伴可以去参与讨论。</p><p>提案 SE-0374: <a href="https://forums.swift.org/t/se-0374-add-sleep-for-to-clock/60787/19" title="SE-0374" target="_blank" rel="noopener">将 sleep(for:) 添加到 Clock</a>。该提案已在<a href="https://mp.weixin.qq.com/s/x-ufc5MauRGfoY571WePFA" target="_blank" rel="noopener">十五期周报</a>正在审查的提案模块做了详细介绍。</p><p>提案 SE-0376: <a href="https://forums.swift.org/t/se-0376-function-back-deployment/61015/16" title="SE-0376" target="_blank" rel="noopener">函数反向部署</a>。该提案已在<a href="https://mp.weixin.qq.com/s/_igJkQdGWEGSfbDmVL9bbg" target="_blank" rel="noopener">十六期周报</a>正在审查的提案模块做了详细介绍。</p><p>提案 SE-0377: <a href="https://forums.swift.org/t/se-0377-borrow-and-take-parameter-ownership-modifiers/61020/14" title="SE-0377" target="_blank" rel="noopener">提出了新的 borrow 和 take 参数修饰符</a>。该提案已在<a href="https://mp.weixin.qq.com/s/_igJkQdGWEGSfbDmVL9bbg" target="_blank" rel="noopener">十六期周报</a>正在审查的提案模块做了详细介绍。</p><p>提案 SE-0366: <a href="https://forums.swift.org/t/se-0366-second-review-take-operator-to-end-the-lifetime-of-a-variable-binding/61021/14" title="SE-0366" target="_blank" rel="noopener">代码上下文新增敏感关键字 move 修订后</a>。该提案已在<a href="https://mp.weixin.qq.com/s/i5a-jhRRdf36KUNRoMX_8w" target="_blank" rel="noopener">十一期周报</a>正在审查的提案模块做了详细介绍。</p><h2 id="Swift论坛"><a href="#Swift论坛" class="headerlink" title="Swift论坛"></a>Swift论坛</h2><p>1) <a href="https://forums.swift.org/t/an-informal-introduction-to-move-only-types/61358" title="Move-Only 类型的非正式介绍" target="_blank" rel="noopener">Move-Only 类型的非正式介绍</a></p><p>2) <a href="https://forums.swift.org/t/same-values-equality-complexity-guarantees/61334" title="相同的值相等的复杂性保证" target="_blank" rel="noopener">相同的值相等的复杂性保证</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo: <span class="type">String</span> = ....</span><br><span class="line"><span class="keyword">let</span> bar = foo</span><br><span class="line">foo == bar <span class="comment">// is this O(1) ?</span></span><br></pre></td></tr></table></figure><p>3) 资料分享 <a href="https://forums.swift.org/t/signal-handling-in-swift/61351" title="swift package SignalHandler" target="_blank" rel="noopener">swift package SignalHandler</a></p><p>4) 讨论<a href="https://forums.swift.org/t/issues-with-using-5-7-regex-on-linux/61344" title="在 Linux 上使用 5.7 Regex 的问题" target="_blank" rel="noopener">在 Linux 上使用 5.7 <code>Regex</code> 的问题</a></p><p>5) 讨论 <a href="https://forums.swift.org/t/an-ios-app-for-the-swift-forum/61335/1" title="Swift 论坛的 iOS 应用" target="_blank" rel="noopener">Swift 论坛的 iOS 应用</a></p><p>Discourse Hub App可以用来浏览Swift论坛内容，App基于WebView，本质与用浏览器没有区别😂</p><p>6) 讨论<a href="https://forums.swift.org/t/detect-the-number-of-usb-ports-available-on-the-mac-device/61321" title="检测 Mac 设备上可用的 USB 端口数量" target="_blank" rel="noopener">检测 Mac 设备上可用的 USB 端口数量</a></p><p>7) 讨论<a href="https://forums.swift.org/t/comparing-two-any-error-s-for-equality/61338" title="比较两个“any Error”的相等性" target="_blank" rel="noopener">比较两个“any Error”的相等性</a></p><p>问题描述：有一个错误类型，它包含另一个存在的any Error：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@frozen <span class="keyword">public</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RecursiveError</span>&lt;<span class="title">Location</span>&gt;:<span class="title">Error</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/// The location (key or index) where the error occurred.</span></span><br><span class="line">    <span class="keyword">public</span></span><br><span class="line">    <span class="keyword">let</span> location:<span class="type">Location</span></span><br><span class="line">    <span class="comment">/// The underlying error that occurred.</span></span><br><span class="line">    <span class="keyword">public</span></span><br><span class="line">    <span class="keyword">let</span> error:any <span class="type">Error</span></span><br><span class="line"></span><br><span class="line">    @inlinable <span class="keyword">public</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> error:any <span class="type">Error</span>, <span class="keyword">in</span> location:<span class="type">Location</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">self</span>.location = location</span><br><span class="line">        <span class="keyword">self</span>.error = error</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Unit Test:</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">0</span>.test(name: <span class="string">"int32-to-uint8"</span>, decoding: bson,</span><br><span class="line">    failure: <span class="type">RecursiveError</span>&lt;<span class="type">String</span>&gt;.<span class="keyword">init</span>(</span><br><span class="line">        <span class="type">IntegerOverflowError</span>&lt;<span class="type">UInt8</span>&gt;.int32(.<span class="built_in">max</span>),</span><br><span class="line">        <span class="keyword">in</span>: <span class="string">"int32"</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span> $<span class="number">0</span>[<span class="string">"int32"</span>].decode(to: <span class="type">UInt8</span>.<span class="keyword">self</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Error</span> <span class="title">where</span> <span class="title">Self</span>:<span class="title">Equatable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">fileprivate</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">equals</span><span class="params">(<span class="number">_</span> other:any Error)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">    &#123;</span><br><span class="line">        (other <span class="keyword">as</span>? <span class="type">Self</span>).<span class="built_in">map</span> &#123; $<span class="number">0</span> == <span class="keyword">self</span> &#125; ?? <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8) 讨论 <a href="https://forums.swift.org/t/boolean-operators-and-async-let/61354" title="Boolean 运算和 async let" target="_blank" rel="noopener">Boolean 运算和 <code>async let</code></a></p><p><strong>执行：</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">async <span class="keyword">let</span> first: <span class="type">Int</span>[] = someAsyncCall()</span><br><span class="line">async <span class="keyword">let</span> second: <span class="type">Int</span>[] = anotherAsyncCall()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bothEmpty = (await first).isEmpty &amp;&amp; (await second).isEmpty</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">let</span> bothEmpty = await (first.isEmpty &amp;&amp; second.isEmpty)</span><br><span class="line"><span class="comment">// or any other variation I can think of</span></span><br></pre></td></tr></table></figure><p><strong>会有以下 Error：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;async let&apos; in an autoclosure that does not support concurrency</span><br><span class="line">Capturing &apos;async let&apos; variables is not supported</span><br></pre></td></tr></table></figure><p>Boolean 运算是使用标记为自动闭包的 rhs 参数定义的，这意味着右侧的表达式会自动捆绑到闭包中，从而延迟其执行直到需要。 值得注意的是，这个 rhs 闭包属性没有被标记为 async ，所以没有 await 语句可以出现在它的“内部”。</p><p><strong>解决：</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bothEmpty = await [first, second].allSatisfy(\.isEmpty)</span><br></pre></td></tr></table></figure><h2 id="推荐博文"><a href="#推荐博文" class="headerlink" title="推荐博文"></a>推荐博文</h2><p><a href="https://github.com/SwiftCommunityRes/article-ios/blob/main/resource/16+在iOS16中用SwiftUI图表定制一个线图.md" title="在 iOS16中用SwiftUI图表定制一个线图" target="_blank" rel="noopener">在 iOS16 中用 SwiftUI 图表定制一个线图</a></p><p><strong>摘要：</strong> 在 iOS 16 中引入的 SwiftUI 图表，可以以直观的视觉格式呈现数据，并且可以使用 SwiftUI 图表快速创建。本文演示了几种定制折线图并与区域图结合来展示数据的方法。</p><p><a href="https://github.com/SwiftCommunityRes/article-ios/blob/main/resource/10%20在%20Swift图表中使用Foudation库中的测量类型.md" target="_blank" rel="noopener">在 Swift 图表中使用 Foudation 库中的测量类型</a></p><p><strong>摘要：</strong> 本篇文章使用今年推出的新的 Swift Charts 框架，实现如何绘制默认不符合 Plottable 协议的类型的数据。</p><p><a href="https://github.com/SwiftCommunityRes/article-ios/blob/main/resource/15%20在iOS%2016中用SwiftUI%20Charts创建一个折线图%20.md" target="_blank" rel="noopener">在 iOS 16 中用 SwiftUI Charts 创建一个折线图</a></p><p><strong>摘要：</strong> 苹果在 WWWDC 2022 上推出了 SwiftUI 图表，本文展示了如何用比以前从头开始创建同样的折线图少得多的代码轻松创建折线图。</p><p><a href="https://github.com/SwiftCommunityRes/article-ios/blob/main/resource/13%20如何在SwiftUI中创建条形图.md" target="_blank" rel="noopener">如何在 SwiftUI 中创建条形图</a></p><p><strong>摘要：</strong> 本文将展示如何创建一个垂直条形图，其中矩形的高度将代表每个类别的值。</p><p><a href="https://github.com/SwiftCommunityRes/article-ios#8" title="Flutter 实战" target="_blank" rel="noopener">Flutter 实战整理</a></p><p><strong>摘要：</strong> 文章仓库增加 Flutter 实战模块，整理相关主题文章。</p><h2 id="话题讨论"><a href="#话题讨论" class="headerlink" title="话题讨论"></a>话题讨论</h2><p><strong>都说互联网红利已经没有了，那么大家觉得互联网行业会不会持续走下坡路？</strong></p><p>欢迎在文末留言参与讨论。</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p><strong>Swift社区</strong>是由 Swift 爱好者共同维护的公益组织，我们会分享以 <strong>Swift实战</strong>、<strong>SwiftUl</strong>、<strong>Swift基础</strong>为核心的技术内容，也整理收集优秀的学习资料。</p><p>特别感谢 Swift社区 编辑部的每一位编辑，感谢大家的辛苦付出，为 Swift社区 提供优质内容，为 Swift 语言的发展贡献自己的力量。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本期是 Swift 编辑组自主整理周报的第八期&lt;/strong&gt;，每个模块已初步成型。各位读者如果有好的提议，欢迎在文末留言。&lt;/p&gt;
&lt;p&gt;欢迎投稿或推荐内容。目前计划每两周周一发布，欢迎志同道合的朋友一起加入周报整理。&lt;/p&gt;
&lt;p&gt;风起雨坠袭大地，叶落冬来又一年。&lt;strong&gt;Swift社区&lt;/strong&gt;，和你同风雨，与你共未来！👊👊👊&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;周报精选&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新闻和社区：苹果发布最新声明！将工人健康放在首位，iPhone 14 Pro 收获需等待更长时间。&lt;/p&gt;
&lt;p&gt;提案：Swift 论坛讨论人气最高的提案&lt;/p&gt;
&lt;p&gt;Swift 论坛：比较两个 “any Error” 的相等性&lt;/p&gt;
&lt;p&gt;推荐博文：iOS 16 统计图实战汇总&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;话题讨论：&lt;/strong&gt; 大家觉得互联网行业会不会持续走下坡路？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Swift 周报" scheme="https://fanbaoying.github.io/categories/Swift-%E5%91%A8%E6%8A%A5/"/>
    
    
      <category term="Swift" scheme="https://fanbaoying.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 周报 第十六期</title>
    <link href="https://fanbaoying.github.io/Swift-%E5%91%A8%E6%8A%A5-%E7%AC%AC%E5%8D%81%E5%85%AD%E6%9C%9F/"/>
    <id>https://fanbaoying.github.io/Swift-周报-第十六期/</id>
    <published>2022-10-31T10:58:53.000Z</published>
    <updated>2022-11-14T07:54:46.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本期是 Swift 编辑组自主整理周报的第七期</strong>，每个模块已初步成型。各位读者如果有好的提议，欢迎在文末留言。</p><p>欢迎投稿或推荐内容。目前计划每两周周一发布，欢迎志同道合的朋友一起加入周报整理。</p><p>当你来到双水村以外的大世界，你的人生目标便不单单是一名庄稼人了。<strong>Swift社区</strong>陪你一起成长，一起创造更多可能！👊👊👊</p><blockquote><p><strong>周报精选</strong></p><p>新闻和社区：【挑战上岛】适配实时活动和灵动岛</p><p>提案：函数反向部署</p><p>Swift 论坛：围绕 Swift 6 lock 展开的讨论</p><p>推荐博文：推荐 500+ 款 App UI 设计</p><p>工具推荐：妙言</p><p><strong>话题讨论：</strong> 如果您年龄超过 35 岁被裁员，再入职时能接受降薪吗？</p></blockquote><a id="more"></a><h2 id="新闻和社区"><a href="#新闻和社区" class="headerlink" title="新闻和社区"></a>新闻和社区</h2><h3 id="挑战上岛：适配实时活动和灵动岛"><a href="#挑战上岛：适配实时活动和灵动岛" class="headerlink" title="挑战上岛：适配实时活动和灵动岛"></a>挑战上岛：适配实时活动和灵动岛</h3><p>Apple 大中华区设计与开发加速器推出全新挑战活动，邀请开发团队限期完成实时活动和灵动岛适配。</p><p>实时活动用于在 iPhone 锁屏以及灵动岛上显示来自 App 的最新信息，帮助用户及时查看当前任务和事件的进展。参与此次活动，您将了解如何设计和开发您的实时活动，以及如何利用灵动岛带来更出色的用户体验。</p><p>我们会提供主题设计与开发讲座，您将了解如何设计和开发您的实时活动，以及如何利用灵动岛带来更出色的用户体验。</p><p>参与讲座的开发团队可在讲座当天报名参与实时活动和灵动岛适配挑战，通过审核后可获得一对一的咨询与深度辅导。参加挑战，并能够在 2022 年 12 月 20 日前完成适配和上线的团队，将有机会获得更多 App 的推广机会。</p><p>名额有限。请在 2022 年 11 月 8 日前报名参加。</p><p>要报名参加，您必须是位于大中华区的 Apple Developer Program 成员。</p><h3 id="用-SwiftUI-实现-App-导航"><a href="#用-SwiftUI-实现-App-导航" class="headerlink" title="用 SwiftUI 实现 App 导航"></a>用 SwiftUI 实现 App 导航</h3><p>导航是一个 App 的核心，它可以将用户带往 App 里功能不同的页面当中，因此，清晰而强大的导航架构对 App 而言是非常重要的。通过本次活动，我们将从设计和研发两方面来为您介绍，如何使用 SwiftUI 来实现 App 的导航架构，让用户能快速定位到 App 的各项功能。</p><p>名额有限。请在 2022 年 11 月 7 日前报名参加。</p><p>要报名参加，您必须是位于大中华区的 Apple Developer Program 成员。</p><h3 id="使用最新-Beta-版本，做好充足准备"><a href="#使用最新-Beta-版本，做好充足准备" class="headerlink" title="使用最新 Beta 版本，做好充足准备"></a>使用最新 Beta 版本，做好充足准备</h3><p>Beta 版iOS 16.2、iPadOS 16.2、 macOS 13.1、Apple tvOS 16.2 和 watchOS 9.2 现已推出。请确认您的 App 在这些版本上工作正常，确保 App 做好准备。要利用最新 SDK 中的改进功能，请务必使用 Xcode 14.1 RC 2 进行构建和测试。</p><p>要了解之前 Beta 版本中的已知问题是否已解决或是否有临时应对办法，请查看最新的发布说明。如果您遇到问题或有其他反馈，请告诉我们。我们十分重视您的反馈，并相信您的反馈对我们解决问题、优化功能和更新文档将大有助益。</p><h3 id="Apple-Search-Ads-推出全新广告投放位置，现已亮相-App-Store"><a href="#Apple-Search-Ads-推出全新广告投放位置，现已亮相-App-Store" class="headerlink" title="Apple Search Ads 推出全新广告投放位置，现已亮相 App Store"></a>Apple Search Ads 推出全新广告投放位置，现已亮相 App Store</h3><p><img src="https://devimages-cdn.apple.com/wwdc-services/articles/images/D69BBA69-3F0C-4470-8190-56498AE2116C/2048.jpeg" alt=""></p><p>Apple Search Ads 让您能轻松地在 App Store 上推广自己的 App。现在，借助全新的“Today”标签页和产品页广告投放位置，您在 App Store 上提升 App 曝光度的机会大大增加 — 当人们首次登陆、搜索特定内容和浏览要下载的 App 时，都是您推广自己 App 的大好时机。</p><p>在中国大陆的 App Store 上暂不可用。</p><h2 id="提案"><a href="#提案" class="headerlink" title="提案"></a>提案</h2><h3 id="通过的提案"><a href="#通过的提案" class="headerlink" title="通过的提案"></a>通过的提案</h3><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0375-opening-existential-optional.md" title="SE-0375" target="_blank" rel="noopener">SE-0375</a> <strong>允许非可选非空参数传递给可选类型的参数</strong> 提案已通过。该提案已在<a href="https://mp.weixin.qq.com/s/x-ufc5MauRGfoY571WePFA" target="_blank" rel="noopener">十五期周报</a>正在审查的提案模块做了详细介绍。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0373-vars-without-limits-in-result-builders.md" title="SE-0373" target="_blank" rel="noopener">SE-0373</a> <strong>取消 <code>result builders</code> 中对变量的所有限制</strong> 提案已通过。该提案已在<a href="https://mp.weixin.qq.com/s/x-ufc5MauRGfoY571WePFA" target="_blank" rel="noopener">十五期周报</a>正在审查的提案模块做了详细介绍。</p><h3 id="正在审查的提案"><a href="#正在审查的提案" class="headerlink" title="正在审查的提案"></a>正在审查的提案</h3><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0377-parameter-ownership-modifiers.md" title="SE-0377" target="_blank" rel="noopener">SE-0377</a> <strong>提出了新的 <code>borrow</code> 和 <code>take</code> 参数修饰符</strong> 正在审查。</p><p>本提案提出的 <code>borrow</code> 和 <code>take</code> 参数修饰符，允许开发人员自主选择函数，用于接收不可变参数的所有权约定。这样可以通过减少调用函数所需的 ARC 来优化性能，并为 <code>move-only</code> 类型提供了必要的先决条件，指定函数是否会消耗 <code>move-only</code> 值。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0376-function-back-deployment.md" title="SE-0376" target="_blank" rel="noopener">SE-0376</a> <strong>函数反向部署</strong> 提案正在审查。</p><p>弹性 Swift 资源库，例如 Apple 平台 SDK 中存在的库，作为动态库分发。这些库的作者使用 <code>@available</code> 注释来指示引入声明的操作系统版本。</p><p>函数反向部署可以避免下面的缺点：</p><ol><li>当原始库可用时，首选使用原始库的 API。</li><li>当客户端二进制文件永远不会使用时，API 实现的后备副本不存在。</li></ol><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0366-move-function.md" title="SE-0366" target="_blank" rel="noopener">SE-0366</a> <strong>代码上下文新增敏感关键字 move</strong> 修订后，重新审查。该提案已在<a href="https://mp.weixin.qq.com/s/i5a-jhRRdf36KUNRoMX_8w" target="_blank" rel="noopener">十一期周报</a>正在审查的提案模块做了详细介绍。</p><h2 id="Swift论坛"><a href="#Swift论坛" class="headerlink" title="Swift论坛"></a>Swift论坛</h2><p>1) 提议<a href="https://forums.swift.org/t/pitch-isolated-function-values-and-sendable/61046" title="隔离函数 Value 和 Sendable" target="_blank" rel="noopener">隔离函数 Value 和 Sendable</a></p><p>2) 提议<a href="https://forums.swift.org/t/pitch-swift-distributed-actors-cluster/61061" title="Swift 分布式 Actors (集群)" target="_blank" rel="noopener">Swift Distributed Actors (Cluster)</a></p><p><strong>提议动机:</strong> 在 Swift 5.7 中，分布式 Actor 被引入为名义类型。 与 Actors 类似，它们可以使用 <code>distributed actor</code> 关键字对来声明。 就它们自己而言，它们不能真正做任何事情， 所有分布式的行为比如 actor 的行为实际上都由给定 actor 类型相关联的 ActorSystem 处理。具体来说，一个 actor 必须声明它将与什么类型的 actor 系统一起使用，如下所示：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Distributed</span><br><span class="line"><span class="keyword">import</span> DistributedCluster</span><br><span class="line">distributed actor <span class="type">Greeter</span> &#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">ActorSystem</span> = <span class="type">ClusterSystem</span></span><br><span class="line">    distributed <span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(name: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello <span class="subst">\(name)</span>!"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的 Greeter 声明可以在集群分布式 actors 系统中使用此类。 也可以声明一个模块范围的默认分布式 actor 系统类型。有关更多信息，可以参考 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0344-distributed-actor-runtime.md" title="Swift Distributed Actor Runtime" target="_blank" rel="noopener">Swift Distributed Actor Runtime</a> 和 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0336-distributed-actor-isolation.md" title="Swift Distributed Actor Isolation" target="_blank" rel="noopener">Swift Distributed Actor Isolation</a> 这是大多数用户可能使用此功能的方式，如下所示：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">DefaultDistributedActorSystem</span> = <span class="type">ClusterSystem</span></span><br></pre></td></tr></table></figure><p>为了避免在每个分布式 actor 模块中重复声明 ActorSystem 类型别名。这里提出的包提供了 ClusterSystem 的实现。</p><p><strong>解决方案:</strong> DistributedCluster 中包括 ClusterSystem 类型，它是库的核心部分。 创建之后，它会绑定到主机/端口对并开始监听传入连接:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> async <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> system = await <span class="type">ClusterSystem</span>(<span class="string">"FirstSystem"</span>) &#123; settings <span class="keyword">in</span></span><br><span class="line">            settings.endpoint.host = <span class="string">"127.0.0.1"</span></span><br><span class="line">            settings.endpoint.port = <span class="number">7337</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> await system.terminated</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）提议<a href="https://forums.swift.org/t/pitch-package-registry-authentication/61047" title="Package Registry Authentication" target="_blank" rel="noopener">Package Registry Authentication</a></p><p>在<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0292-package-registry-service.md" target="_blank" rel="noopener">SE-0292</a>（API 规范）中提出的package registry服务可能需要对其部分或全部 API 进行身份验证，以便识别执行操作的用户并相应地授权请求。</p><p><strong>提议动机：</strong> Web 服务中常见的身份验证方法包括基本验证 (authentication), access token 和 OAuth。 SwiftPM 目前仅支持基本验证，这限制了它与包注册服务交互的能力。<br>建议的解决方案: 建议修改 swift package-registry 指令和 registry 的配置并且加入 token authentication 的支持。 这些更改还应确保将来可以灵活地添加其他验证方法。</p><p>4）提议<a href="https://forums.swift.org/t/pitch-convenience-async-throwing-stream-makestream-methods/61030" title="方便的 AsyncThrowingStream.makeStream 方法" target="_blank" rel="noopener">方便的 AsyncThrowingStream.makeStream 方法</a></p><p>在<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0314-async-stream.md" target="_blank" rel="noopener">SE-0314</a>中介绍了 AsyncStream 和 AsyncThrowingStream，它们充当标准库提供的 AsyncSequence。</p><p>提议动机：在使用 Async[Throwing]Stream 一段时间后，我们发现一个常见的用法是将 continuation 和 Async[Throwing]Stream 传递到不同的地方。这需要将 Async[Throwing]Stream.Continuation excaping 并且出传递给初始化程序的闭包。Escaping continuation 使用起来不方便，因为它需要对隐式 optional value 进行格外的操作。</p><p>建议的解决方案：为了填补这个不足，建议在 AsyncStream 和 AsyncThrowingStream 上添加一个新的静态方法 makeStream ，它返回 stream 和 continuation。</p><p>5) 讨论<a href="https://forums.swift.org/t/what-does-use-async-safe-scoped-locking-instead-even-mean/61029" title="围绕 Swift 6 lock 展开的讨论" target="_blank" rel="noopener">围绕 Swift 6 lock 展开的讨论</a></p><p>6) 讨论<a href="https://forums.swift.org/t/remove-digit-from-number-to-maximize-result/61049" title="围绕 leetcode 2259 题 Remove Digit From Number to Maximize Result 展开的讨论" target="_blank" rel="noopener">围绕 leetcode 2259 题 Remove Digit From Number to Maximize Result 展开的讨论</a></p><h2 id="推荐博文"><a href="#推荐博文" class="headerlink" title="推荐博文"></a>推荐博文</h2><p><a href="https://github.com/SwiftCommunityRes/article-ios/blob/main/resource/7个大型iOS项目的Xcode快捷方式.pdf" title="7 个大型 iOS 项目的 Xcode 快捷方式" target="_blank" rel="noopener">7 个大型 iOS 项目的 Xcode 快捷方式</a></p><p><strong>摘要：</strong> 分享的 7 个 Xcode 快捷方式，非常的实用。希望能对你的项目开发有所帮助。</p><p><a href="https://mp.weixin.qq.com/s/jYbRAJhhdE8H8xeoBnTEaA" target="_blank" rel="noopener">SwiftUI 锁屏小组件</a></p><p><strong>摘要：</strong> iOS 呼声最高的功能之一是可定制的锁屏。终于，在最新发布的 iOS 16 得以实现。我们可以用可浏览的小组件填充锁屏。</p><p><a href="https://mp.weixin.qq.com/s/84TG_7yFxpsXF7cHTbVbFw" target="_blank" rel="noopener">iOS16 中的 3 种新字体宽度样式</a></p><p><strong>摘要：</strong> 在 iOS 16 中，Apple 引入了三种新的宽度样式字体到 SF 字体库。1、Compressed，2、Condensed，3、Expend。</p><p><a href="https://mp.weixin.qq.com/s/MsFjb49JUtZlGn6XSJghyQ" target="_blank" rel="noopener">推荐 500+ 款 App UI 设计</a></p><p><strong>摘要：</strong> 500+ 款 App UI 设计，激发你的设计灵感。</p><p><a href="https://mp.weixin.qq.com/s/V1KLRAVK-DEWr7Gneatr1A" target="_blank" rel="noopener">Swift社区回馈读者</a></p><p><strong>摘要：</strong> Swift社区回馈读者 – 送书活动还在进行中，机会不要错过，马上参与吧。</p><h2 id="工具推荐"><a href="#工具推荐" class="headerlink" title="工具推荐"></a>工具推荐</h2><p><strong>妙言：</strong> 一个简洁好看的开源的 Mac Markdown 编辑器，没有任何多余的功能，使用原生 Swift 开发，轻量性能高，安全纯本地使用，具备语法高亮、黑暗模式、自动格式化、单独编辑、演示模式、图床等功能。</p><p><img src="https://user-images.githubusercontent.com/8736212/193432093-113a3667-c0b7-4711-9479-5679abed83af.png" alt=""></p><h2 id="话题讨论"><a href="#话题讨论" class="headerlink" title="话题讨论"></a>话题讨论</h2><p><strong>如果您年龄超过 35 岁被裁员，再入职时能接受降薪吗?</strong></p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p><strong>Swift社区</strong>是由 Swift 爱好者共同维护的公益组织，我们会分享以 <strong>Swift实战</strong>、<strong>SwiftUl</strong>、<strong>Swift基础</strong>为核心的技术内容，也整理收集优秀的学习资料。</p><p>特别感谢 Swift社区 编辑部的每一位编辑，感谢大家的辛苦付出，为 Swift社区 提供优质内容，为 Swift 语言的发展贡献自己的力量。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本期是 Swift 编辑组自主整理周报的第七期&lt;/strong&gt;，每个模块已初步成型。各位读者如果有好的提议，欢迎在文末留言。&lt;/p&gt;
&lt;p&gt;欢迎投稿或推荐内容。目前计划每两周周一发布，欢迎志同道合的朋友一起加入周报整理。&lt;/p&gt;
&lt;p&gt;当你来到双水村以外的大世界，你的人生目标便不单单是一名庄稼人了。&lt;strong&gt;Swift社区&lt;/strong&gt;陪你一起成长，一起创造更多可能！👊👊👊&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;周报精选&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新闻和社区：【挑战上岛】适配实时活动和灵动岛&lt;/p&gt;
&lt;p&gt;提案：函数反向部署&lt;/p&gt;
&lt;p&gt;Swift 论坛：围绕 Swift 6 lock 展开的讨论&lt;/p&gt;
&lt;p&gt;推荐博文：推荐 500+ 款 App UI 设计&lt;/p&gt;
&lt;p&gt;工具推荐：妙言&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;话题讨论：&lt;/strong&gt; 如果您年龄超过 35 岁被裁员，再入职时能接受降薪吗？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Swift 周报" scheme="https://fanbaoying.github.io/categories/Swift-%E5%91%A8%E6%8A%A5/"/>
    
    
      <category term="Swift" scheme="https://fanbaoying.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 周报 第十五期</title>
    <link href="https://fanbaoying.github.io/Swift-%E5%91%A8%E6%8A%A5-%E7%AC%AC%E5%8D%81%E4%BA%94%E6%9C%9F/"/>
    <id>https://fanbaoying.github.io/Swift-周报-第十五期/</id>
    <published>2022-10-17T03:29:52.000Z</published>
    <updated>2022-11-14T07:54:40.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本期是 Swift 编辑组自主整理周报的第六期</strong>，每个模块已初步成型。各位读者如果有好的提议，欢迎在文末留言。</p><p>欢迎投稿或推荐内容。目前计划每两周周一发布，欢迎志同道合的朋友一起加入周报整理。</p><p>果然，十一假期与新一轮疫情撞了个满怀，远方的你还好吗？<strong>Swift社区</strong>愿与你携手，一起尖叫一起笑，一起撑伞一起闹！👊👊👊</p><blockquote><p><strong>周报精选</strong></p><p>新闻和社区：iPhone14 车祸检测功能摆乌龙 坐过山车自动报警</p><p>提案：申请将 <code>sleep(for:)</code> 添加到 <code>Clock</code></p><p>Swift 论坛：Bug <code>@available</code> 在 <code>literal</code> 初始化中没有效果</p><p>推荐博文：<code>async/await</code> 系列代码示例详解</p><p><strong>话题讨论：</strong> 面对各厂新一轮裁员，你焦虑了吗？</p></blockquote><a id="more"></a><h2 id="新闻和社区"><a href="#新闻和社区" class="headerlink" title="新闻和社区"></a>新闻和社区</h2><h3 id="Apple-Entrepreneur-Camp-现已开放申请"><a href="#Apple-Entrepreneur-Camp-现已开放申请" class="headerlink" title="Apple Entrepreneur Camp 现已开放申请"></a>Apple Entrepreneur Camp 现已开放申请</h3><p>Apple Entrepreneur Camp 旨在为 App 驱动型组织中的少数群体创业者及开发者提供支持，助力其研发新一代的前沿 App 并开拓全球网络，鼓励这些创业者在技术领域不断探索并取得持续发展。</p><p>三组面向女性、黑人以及西班牙裔及拉丁裔创业者的在线课程将在 2023 年 1 月开展，欢迎选择合适的一组提交申请。课程期间，Apple 工程师将为学员提供编程指导，Apple 高层也将作为导师分享见解、启发灵感。申请截止日期为 2022 年 12 月 5 日。</p><p><img src="https://images.xiaozhuanlan.com/photo/2022/03fdd37a55a8a6506c6dccc39ac1855e.jpeg" alt=""></p><h3 id="iPhone14-车祸检测功能摆乌龙-坐过山车自动报警"><a href="#iPhone14-车祸检测功能摆乌龙-坐过山车自动报警" class="headerlink" title="iPhone14 车祸检测功能摆乌龙 坐过山车自动报警"></a>iPhone14 车祸检测功能摆乌龙 坐过山车自动报警</h3><p>据美国有线电视新闻网等多家媒体报道，近日有游客在携带苹果公司的新款手机 iPhone14 乘坐过山车时，手机会错误检测到遭遇车祸并自动报警。目前在美国游乐园，已发生多起类似事件，而造成这一切的原因是 iPhone14 自带的车祸检测功能存在问题。</p><p><img src="https://images.xiaozhuanlan.com/photo/2022/9206d54e5b8d1f780b3783c62a438b5a.png" alt=""></p><p>苹果在９月初发布了新款手机 iPhone14，其中一项“车祸检测”新功能颇为引人关注。该功能借助加速度传感器、陀螺仪、麦克风等多种传感器来感知四种碰撞场景，包括正面、侧面、追尾和翻车。一旦检测到车祸，系统会自动弹窗询问机主是否遭遇了紧急情况，在一定时间内若未收到回应，系统将自动报警。</p><p>不过，设计人员可能没有考虑到，乘坐过山车与汽车行驶状态容易混淆。据了解，iPhone14 上市以来，在美国多家游乐园的过山车上，都发生过报警乌龙。有的游乐园无奈之下只能提醒游客，坐过山车之前关闭车祸检测功能，或把手机调成飞行模式。(看看新闻Knews)</p><h3 id="苹果自研-5G-芯片或要等-2025-年"><a href="#苹果自研-5G-芯片或要等-2025-年" class="headerlink" title="苹果自研 5G 芯片或要等 2025 年"></a>苹果自研 5G 芯片或要等 2025 年</h3><p>此前爆料称，苹果将为未来的 iPhone 开发自主研发的 5G 基带芯片，但据预测，高通仍将是所有 iPhone 15 和 iPhone 16 系列机型的调制解调器供应商，这表明苹果的基带芯片至少要到 2025 年才会亮相。</p><p>海通国际证券分析师 Jeff Pu 在周五的研究报告中说，他预计 2024 年发布的 iPhone 机型（暂称 iPhone 16 系列）将使用高通尚未公布的骁龙 X75 调制解调器。与骁龙 X70 一样，X75 预计将基于台积电的 4nm 工艺制造，有助于提高能效。（IT之家)</p><h3 id="欧盟批准强制苹果使用-USB-C-接口"><a href="#欧盟批准强制苹果使用-USB-C-接口" class="headerlink" title="欧盟批准强制苹果使用 USB C 接口"></a>欧盟批准强制苹果使用 USB C 接口</h3><p>【欧盟将统一便携智能设备充电接口】据@央视新闻 ，欧洲议会 10 月 4 日通过一项新规，要求从 2024 年底开始，所有手机、平板电脑等便携智能设备新机都使用 USB Type-C 的充电接口。</p><p>欧洲议会当天以 602 票赞成、13 票反对的投票结果通过有关统一便携智能设备充电接口的法案。所有手机、平板电脑、数码相机、耳机、便携音箱、手持视频游戏机、电子阅读器、键盘、鼠标和便携式导航系统将在两年内统一充电接口。</p><h2 id="提案"><a href="#提案" class="headerlink" title="提案"></a>提案</h2><h3 id="正在审查的提案"><a href="#正在审查的提案" class="headerlink" title="正在审查的提案"></a>正在审查的提案</h3><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0375-opening-existential-optional.md" title="SE-0375" target="_blank" rel="noopener">SE-0375</a> <strong>允许非可选非空参数传递给可选类型的参数</strong> 提案正在审查。</p><p>在 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0352-implicit-open-existentials.md" title="SE-0352" target="_blank" rel="noopener">SE-0352</a> 提案中有一个限制，可选类型的参数不允许接受非可选参数。本提案申请更改这个限制，当非可选非空参数传递给可选类型的参数时，允许调用成功。示例代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">acceptOptional</span>&lt;T: P&gt;<span class="params">(<span class="number">_</span> x: T?)</span></span> &#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(p: any P, pOpt: <span class="params">(any P)</span></span></span>?) &#123;</span><br><span class="line">  acceptOptional(p) <span class="comment">// SE-0352 does not open "p"; this proposal will open "p" and bind "T" to its underlying type</span></span><br><span class="line">  acceptOptional(pOpt) <span class="comment">// does not open "pOpt", because there is no "T" to bind to when "pOpt" is "nil"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0374-clock-sleep-for.md" title="SE-0374" target="_blank" rel="noopener">SE-0374</a> <strong>将 <code>sleep(for:)</code> 添加到 <code>Clock</code></strong> 提案正在审查。</p><p>Swift 5.7 中引入的 Clock 协议提供了一种方法来暂停到未来的某个时刻，但没有提供一种方法来休眠一段时间。这与 Task 上的静态 sleep 方法不同，后者提供了一种方法来休眠到某一时刻或一段时间。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0373-vars-without-limits-in-result-builders.md" title="SE-0373" target="_blank" rel="noopener">SE-0373</a> <strong>取消 <code>result builders</code> 中对变量的所有限制</strong> 提案正在审查。</p><p><code>result builders</code> 转换的实现（由 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0289-result-builders.md" title="SE-0289" target="_blank" rel="noopener">SE-0289</a> 引入）对转换函数中的局部变量声明设置了许多限制。具体来说，局部变量需要有一个初始化表达式，它们不能被计算，它们不能有观察者，它们不能有附加的属性包装器。这些限制在 SE-0289 提案中都没有明确说明，但它们实际上是当前功能的一部分。</p><h2 id="Swift论坛"><a href="#Swift论坛" class="headerlink" title="Swift论坛"></a>Swift论坛</h2><p>1) 讨论<a href="https://forums.swift.org/t/should-apple-create-a-simple-programming-language/60746" title="苹果是否应该创造一个简单编程语言" target="_blank" rel="noopener">苹果是否应该创造一个简单编程语言</a></p><p>2) <strong>Bug</strong> <a href="https://github.com/apple/swift/issues/61564" title="@available 在 literal 初始化中没有效果" target="_blank" rel="noopener">@available 在 literal 初始化中没有效果</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> bar: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@available</span>(*, deprecated)</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Foo</span>: <span class="title">ExpressibleByStringLiteral</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span>(stringLiteral value: <span class="type">StringLiteralType</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.bar = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: <span class="type">Foo</span> = <span class="type">Foo</span>(stringLiteral: <span class="string">""</span>) <span class="comment">// warning: 'init(stringLiteral:)' is deprecated</span></span><br><span class="line"><span class="keyword">let</span> b: <span class="type">Foo</span> = <span class="string">""</span> <span class="comment">// no warning</span></span><br></pre></td></tr></table></figure><p>3) 讨论<a href="https://forums.swift.org/t/reconsider-inference-of-global-actor-based-on-property-wrappers/60821" title="重新考虑基于 property wrappers 的全局 actor 推断" target="_blank" rel="noopener">重新考虑基于 property wrappers 的全局 actor 推断</a><br>内容概括：</p><p>4) 提问<a href="https://forums.swift.org/t/splitting-information-elements/60835" title="拆分我的信息元素" target="_blank" rel="noopener">拆分我的信息元素</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Foo.swift</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x : <span class="type">Int</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> ();</span><br><span class="line">    <span class="keyword">init</span> (v: <span class="type">Int</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">bar</span> <span class="params">()</span></span> -&gt; <span class="type">Int</span>;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">bar</span> <span class="params">(u:Int, v:Int)</span></span> -&gt; <span class="type">Int</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span> () &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> (v: <span class="type">Int</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">bar</span> <span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">bar</span> <span class="params">(u:Int, v:Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决</strong>使用 <code>convenience</code> 初始化方法, <code>designated</code> 初始化方法必须写在 class 的主体中但 <code>convenience</code> 初始化方法可以在 <code>extension</code> 中使用。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Note that this is a designated init because it doesn't have the</span></span><br><span class="line">    <span class="comment">// `convenience` keyword.</span></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(v: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>()</span><br><span class="line">        x = v</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">(u:Int, v:Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x + u + v</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5) 讨论 <a href="https://forums.swift.org/t/iphone-picture-taking-and-lidar-data-acquisition/60799" title="iPhone 拍照和激光雷达数据采集" target="_blank" rel="noopener">iPhone 拍照和激光雷达数据采集</a></p><p>6) 讨论<a href="https://forums.swift.org/t/using-mainactor-to-ensure-execution-on-the-main-thread/60764" title="使用 @MainActor 确保在主线程上执行" target="_blank" rel="noopener">使用 @MainActor 确保在主线程上执行</a></p><p>7) 讨论 <a href="https://forums.swift.org/t/an-alternative-to-the-switch-statement/60714/10" title="switch 语句的替代方法" target="_blank" rel="noopener">switch 语句的替代方法</a></p><p>8) 讨论<a href="https://forums.swift.org/t/accumulating-http-request-body-parts-is-storing-bytebuffer-s-a-good-idea/60813" title="累积 HTTP 请求nody部分：存储 ByteBuffer 是个好主意吗？" target="_blank" rel="noopener">累积 HTTP 请求 body 部分：存储 ByteBuffer 是个好主意吗？</a></p><h2 id="推荐博文"><a href="#推荐博文" class="headerlink" title="推荐博文"></a>推荐博文</h2><p><a href="https://mp.weixin.qq.com/s/IA9CgMjZf63_RFwNBB9QqQ" title="Sendable 和 @Sendable 闭包代码实例详解" target="_blank" rel="noopener">Sendable 和 @Sendable 闭包 —— 代码实例详解</a></p><p><strong>摘要：</strong> Sendable 和 @Sendable 是 Swift 5.5 中的并发修改的一部分，解决了结构化的并发结构体和执行者消息之间传递的类型检查的挑战性问题。</p><p><a href="https://github.com/SwiftCommunityRes/article-ios/blob/main/resource/19+Swift+中的async:await+——代码实例详解.md" title="Swift 中的 async/await —— 代码实例详解" target="_blank" rel="noopener">Swift 中的 async/await —— 代码实例详解</a></p><p><strong>摘要：</strong> async-await 是在 WWDC 2021 期间的 Swift 5.5 中的结构化并发变化的一部分。Swift中的并发性意味着允许多段代码同时运行。这是一个非常简化的描述，但它应该让你知道 Swift 中的并发性对你的应用程序的性能是多么重要。有了新的 async 方法和 await 语句，我们可以定义方法来进行异步工作。</p><p><a href="https://github.com/SwiftCommunityRes/article-ios/blob/main/resource/20+Swift+AsyncSequence+——+代码实例详解.md" title="Swift AsyncSequence —— 代码实例详解" target="_blank" rel="noopener">Swift AsyncSequence —— 代码实例详解</a></p><p><strong>摘要：</strong> <code>AsyncSequence</code> 是并发性框架和 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0298-asyncsequence.md" title="SE-298" target="_blank" rel="noopener">SE-298</a> 提案的一部分。它的名字意味着它是一个提供异步、顺序和迭代访问其元素的类型。换句话说：它是我们在 Swift 中熟悉的常规序列的一个异步变体。</p><p><a href="https://github.com/SwiftCommunityRes/article-ios/blob/main/resource/21+Swift+AsyncThrowingStream+和+AsyncStream+———+代码实例详解.md" title="Swift AsyncThrowingStream 和 AsyncStream ——— 代码实例详解" target="_blank" rel="noopener">Swift AsyncThrowingStream 和 AsyncStream ——— 代码实例详解</a></p><p><strong>摘要：</strong> <code>AsyncThrowingStream</code> 和 <code>AsyncStream</code>是 Swift 5.5 中由 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0314-async-stream.md" title="SE-314" target="_blank" rel="noopener">SE-314</a> 引入的并发框架的一部分。异步流允许你替换基于闭包或 Combine 发布器的现有代码。</p><p><a href="https://github.com/SwiftCommunityRes/article-ios/blob/main/resource/22+Swift+中的+MainActor使用和主线程调度.md" title="Swift 中的 MainActor 使用和主线程调度" target="_blank" rel="noopener">Swift 中的 MainActor 使用和主线程调度</a></p><p><strong>摘要：</strong> MainActor 是 Swift 5.5 中引入的一个新属性，它是一个全局 actor，提供一个在主线程上执行任务的执行器。在构建应用程序时，在主线程上执行UI更新任务是很重要的，在使用几个后台线程时，这有时会很有挑战性。使用 <code>@MainActor</code> 属性将帮助你确保你的UI总是在主线程上更新。</p><h2 id="话题讨论"><a href="#话题讨论" class="headerlink" title="话题讨论"></a>话题讨论</h2><p><strong>面对各厂新一轮裁员，你焦虑了吗？</strong></p><p><img src="https://images.xiaozhuanlan.com/photo/2022/298cf3a660c84134793cdbfa1886c079.png" alt=""></p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p><strong>Swift社区</strong>是由 Swift 爱好者共同维护的公益组织，我们会分享以 <strong>Swift实战</strong>、<strong>SwiftUl</strong>、<strong>Swift基础</strong>为核心的技术内容，也整理收集优秀的学习资料。</p><p>特别感谢 Swift社区 编辑部的每一位编辑，感谢大家的辛苦付出，为 Swift社区 提供优质内容，为 Swift 语言的发展贡献自己的力量。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本期是 Swift 编辑组自主整理周报的第六期&lt;/strong&gt;，每个模块已初步成型。各位读者如果有好的提议，欢迎在文末留言。&lt;/p&gt;
&lt;p&gt;欢迎投稿或推荐内容。目前计划每两周周一发布，欢迎志同道合的朋友一起加入周报整理。&lt;/p&gt;
&lt;p&gt;果然，十一假期与新一轮疫情撞了个满怀，远方的你还好吗？&lt;strong&gt;Swift社区&lt;/strong&gt;愿与你携手，一起尖叫一起笑，一起撑伞一起闹！👊👊👊&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;周报精选&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新闻和社区：iPhone14 车祸检测功能摆乌龙 坐过山车自动报警&lt;/p&gt;
&lt;p&gt;提案：申请将 &lt;code&gt;sleep(for:)&lt;/code&gt; 添加到 &lt;code&gt;Clock&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Swift 论坛：Bug &lt;code&gt;@available&lt;/code&gt; 在 &lt;code&gt;literal&lt;/code&gt; 初始化中没有效果&lt;/p&gt;
&lt;p&gt;推荐博文：&lt;code&gt;async/await&lt;/code&gt; 系列代码示例详解&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;话题讨论：&lt;/strong&gt; 面对各厂新一轮裁员，你焦虑了吗？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Swift 周报" scheme="https://fanbaoying.github.io/categories/Swift-%E5%91%A8%E6%8A%A5/"/>
    
    
      <category term="Swift" scheme="https://fanbaoying.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 周报 第十四期</title>
    <link href="https://fanbaoying.github.io/Swift-%E5%91%A8%E6%8A%A5-%E7%AC%AC%E5%8D%81%E5%9B%9B%E6%9C%9F/"/>
    <id>https://fanbaoying.github.io/Swift-周报-第十四期/</id>
    <published>2022-09-26T03:56:55.000Z</published>
    <updated>2022-09-26T03:59:21.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本期是 Swift 编辑组自主整理周报的第五期</strong>，每个模块已初步成型。各位读者如果有好的提议，欢迎在文末留言。</p><p>欢迎投稿或推荐内容。目前计划每两周周一发布，欢迎志同道合的朋友一起加入周报整理。</p><p>小时候幸福很简单，长大后简单很幸福。<strong>Swift社区</strong>有你未领取的小幸福，等你简简单单来开启！👊👊👊</p><blockquote><p><strong>周报精选</strong></p><p>新闻和社区：iPhone灵动岛无法适配大部分应用</p><p>提案：Swift 5.8 实现的提案</p><p>Swift 论坛：<code>conformance</code> 关键字</p><p>推荐博文：SwiftUI 新功能 Layout 协议</p><p><strong>话题讨论：</strong> 大厂养老，你会选择谁</p></blockquote><a id="more"></a><h2 id="新闻和社区"><a href="#新闻和社区" class="headerlink" title="新闻和社区"></a>新闻和社区</h2><h3 id="iPhone-灵动岛无法适配大部分应用"><a href="#iPhone-灵动岛无法适配大部分应用" class="headerlink" title="iPhone 灵动岛无法适配大部分应用"></a>iPhone 灵动岛无法适配大部分应用</h3><p>近日，有海外程序员小哥哥曝光了灵动岛的开发代码，并配文称原本想安装完 Xcode 14.1 Beta 版（iOS 开发程序）去了解下 iPhone 14 Pro 的灵动岛 API 接口情况，但没想到，苹果并未开放 API，也就是说第三方开发人员很难自行适配灵动岛这个系统级的交互功能。如果想要适配灵动岛恐怕只能向苹果官方申请开放 API 接口。这也是为什么很多 App 至今都没能适配灵动岛的情况出现。（新浪数码）</p><p><img src="https://images.xiaozhuanlan.com/photo/2022/f12e107a5e43e5852d5a2c820448799a.gif" alt=""></p><h3 id="App-和-App-内购买项目即将实行价格和税率调整"><a href="#App-和-App-内购买项目即将实行价格和税率调整" class="headerlink" title="App 和 App 内购买项目即将实行价格和税率调整"></a>App 和 App 内购买项目即将实行价格和税率调整</h3><p>最早于 2022 年 10 月 5 日起，下列地区 App Store 上的 App 及 App 内购买项目 (自动续期订阅除外) 价格将有所提高：智利、埃及、日本、马来西亚、巴基斯坦、波兰、韩国、瑞典、越南和所有使用欧元货币的地区。在越南，相关的价格提升反映了要求 Apple 代扣代缴适用税款的新规定，其中适用税款包括 5% 的增值税 (VAT) 和 5% 的企业所得税 (CIT)。</p><p>您的收益将随之进行调整，并会根据不含税的价格来进行计算。《付费 App 协议》的附录 B 将会更新，表明 Apple 在越南征收和汇付适用税款。</p><p>以上调整生效后，在“我的 App”中“价格与销售范围”部分会随即更新。您可以随时在 App Store Connect 中更改您的 App 和 App 内购买项目的价格 (包括自动续期订阅)。如果您有提供订阅项目，您可以选择为现有订阅者保留当前价格。</p><h3 id="苹果确认-iOS16-存漏洞影响新机激活"><a href="#苹果确认-iOS16-存漏洞影响新机激活" class="headerlink" title="苹果确认 iOS16 存漏洞影响新机激活"></a>苹果确认 iOS16 存漏洞影响新机激活</h3><p>据 MacRumors 看到的一份备忘录，苹果称，“iOS 16 有一个已知的问题，可能会影响到使用开放的 Wi-Fi 网络的设备激活”。为了解决这个问题，苹果表示，用户应该在初始化 iOS 时，在提示连接到 Wi-Fi 网络时选择“用 iTunes 连接到 Mac 或 PC”，然后返回到之前的屏幕，使用 Wi-Fi 再次尝试，直到激活成功。</p><h3 id="使用-iOS-16-1-Beta-版和-Xcode-14-1-Beta-版，开发实时活动功能"><a href="#使用-iOS-16-1-Beta-版和-Xcode-14-1-Beta-版，开发实时活动功能" class="headerlink" title="使用 iOS 16.1 Beta 版和 Xcode 14.1 Beta 版，开发实时活动功能"></a>使用 iOS 16.1 Beta 版和 Xcode 14.1 Beta 版，开发实时活动功能</h3><p>新的 ActivityKit 框架现已在 iOS 16.1 Beta 版和 Xcode 14.1 Beta 版中推出，探索如何通过这一框架为您的 App 构建实时活动。借由实时更新，实时活动能帮助用户跟踪您的 App 内容。App 的实时活动会显示在锁定屏幕和灵动岛中 — “灵动岛”作为一项全新设计，可以让用户直观、愉悦地体验 iPhone 14 Pro 和 iPhone 14 Pro Max。</p><p>实时活动功能和 ActivityKit 将包含在今年晚些时候推出的 iOS 16.1 中。当 iOS 16.1 发布候选版本可用时，您即可将配置了实时活动功能的 App 提交至 App Store。</p><h2 id="提案"><a href="#提案" class="headerlink" title="提案"></a>提案</h2><h3 id="Swift-5-8-实现的提案"><a href="#Swift-5-8-实现的提案" class="headerlink" title="Swift 5.8 实现的提案"></a>Swift 5.8 实现的提案</h3><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0372-document-sorting-as-stable.md" title="SE-0372" target="_blank" rel="noopener">SE-0372</a> <strong>更新稳定排序文档</strong> 该提案已在 十三期周报 正在审查的提案模块做了详细介绍。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0369-add-customdebugdescription-conformance-to-anykeypath.md" title="SE-0369" target="_blank" rel="noopener">SE-0369</a> <strong>同步 CustomDebugString 协议到 AnyKeyPath</strong> </p><p>此提案主要目的是将 <code>CustomDebugStringConvertible</code> 的协议添加到 <code>AnyKeyPath</code>。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0367-conditional-attributes.md" title="SE-0367" target="_blank" rel="noopener">SE-0367</a> <strong>优化新属性的条件编译</strong> 。该提案已在 十二期周报 已通过的提案模块做了详细介绍。</p><h2 id="Swift论坛"><a href="#Swift论坛" class="headerlink" title="Swift论坛"></a>Swift论坛</h2><p>1) Swift 5.7 发布! 🥳 新增功能详见：<a href="https://www.swift.org/blog/swift-5.7-released/" title="Swift Evolution" target="_blank" rel="noopener">Swift Evolution</a> </p><p>2) <a href="https://forums.swift.org/t/initiative-swift-platform-work-group/60340" title="Swift Platform Work Group" target="_blank" rel="noopener">Swift Platform Work Group</a></p><p>Swift community 工作组将努力提高 Swift 的平台可用性</p><p>工作组内容包括：</p><ul><li>拓展 Swift 可用的目标平台</li><li>拓展 Swift 可用的主机平台</li><li>提高 Swift 现有平台上的 Toolchain</li><li>让 Swift 编译器可以在现有的平台上工作比如 Linux 和 Windows</li><li>努力打造更好的跨平台 Swift 生态系统</li></ul><p>工作组不涉及的内容有：</p><ul><li>涉及 Apple 已经支持的平台</li><li>涉及低资源和裸机平台</li></ul><p>3) 提议<a href="https://forums.swift.org/t/pre-pitch-explicit-protocol-fulfilment-with-the-conformance-keyword/60246" title="使用 conformance 关键字的让协议符合要求" target="_blank" rel="noopener">使用 conformance 关键字的让协议符合要求</a></p><p><code>conformance</code> 关键字的意思是：<strong>此声明由程序员定义并满足协议要求</strong>。<code>conformance</code> 不是 protocol 必须有的关键字。 但是，当 conformance 存在时，除非声明确实符合协议要求，否则程序格式错误。</p><p>栗子🌰：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Program</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HelloWorld</span>: <span class="title">Program</span> </span>&#123;</span><br><span class="line">    <span class="comment">// OK</span></span><br><span class="line">    conformance <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123; ... &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// error: function crash() does not fulfill any requirement of the protocol 'Program'.</span></span><br><span class="line">    conformance <span class="function"><span class="keyword">func</span> <span class="title">crash</span><span class="params">()</span></span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4) 提议<a href="https://forums.swift.org/t/pitch-clock-sleep-for/60376" title="clock.sleep(for:)" target="_blank" rel="noopener">clock.sleep(for:)</a></p><p>5) 框架<a href="https://forums.swift.org/t/html-framework-for-swift/60241" title="用于web和swift server交互的框架" target="_blank" rel="noopener">用于web和swift server交互的框架</a></p><ul><li><a href="https://github.com/vapor/leaf" target="_blank" rel="noopener">vapor/leaf 8</a></li><li><a href="https://github.com/vapor-community/HTMLKit" target="_blank" rel="noopener">vapor-community/HTMLKit 9</a></li><li><a href="https://github.com/JohnSundell/Plot" target="_blank" rel="noopener">Plot 13</a></li></ul><p>6) 讨论<a href="https://forums.swift.org/t/call-an-async-function-in-an-initializer/60396" title="在init方法中使用async function" target="_blank" rel="noopener">在init方法中使用async function</a></p><p>7）讨论<a href="https://forums.swift.org/t/asyncsequence-stream-version-of-passthroughsubject-or-currentvaluesubject/60395" title="PassthroughSubject 和 CurrentValueSubject" target="_blank" rel="noopener">PassthroughSubject 和 CurrentValueSubject</a></p><h2 id="推荐博文"><a href="#推荐博文" class="headerlink" title="推荐博文"></a>推荐博文</h2><p><a href="https://swiftui-lab.com/layout-protocol-part-1/" title="SwiftUI Layout 协议——第 1 部分" target="_blank" rel="noopener">SwiftUI Layout 协议——第 1 部分</a></p><p><strong>摘要：</strong> 今年 SwiftUI 新增比较实用的功能当属 Layout 协议。本篇文章主要介绍 Layout 协议的基础知识和常用功能使用。</p><p><a href="https://swiftui-lab.com/layout-protocol-part-2/" title="SwiftUI Layout 协议——第 2 部分" target="_blank" rel="noopener">SwiftUI Layout 协议——第 2 部分</a></p><p><strong>摘要：</strong> 本篇文章是 SwiftUI Layout 协议的第二部分介绍，主要讲述 Layout 协议的高级布局包含自定义动画、递归布局等功能。</p><p><a href="https://mp.weixin.qq.com/s/C739cypR-npGt7F8NLtQgQ" target="_blank" rel="noopener">SwiftUI 之 HStack 和 VStack 的切换</a></p><p><strong>摘要：</strong> 本文介绍了当涉及到水平和垂直的变体时( HStack 和 VStack )，我们需要如何在这两者之间动态的切换。</p><p><a href="https://mp.weixin.qq.com/s/QOB5alijsV5Gg8pi4lg03g" target="_blank" rel="noopener">App Store 已上架项目打开瞬闪问题</a></p><p><strong>摘要：</strong> 用户反馈 iPhone11 iOS14.7 下载安装 App Store 已上架项目后，点击图标，App 闪一下就回到了桌面。</p><p><a href="https://mp.weixin.qq.com/s/8fPJbPNA7kIZhnv3I8m4tg" target="_blank" rel="noopener">实现模块化应用的本地化</a></p><p><strong>摘要：</strong> 本文详细的介绍了本地化上线的过程，建议收藏，以后新开项目作为参考。</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p><strong>Swift社区</strong>是由 Swift 爱好者共同维护的公益组织，我们会分享以 <strong>Swift实战</strong>、<strong>SwiftUl</strong>、<strong>Swift基础</strong>为核心的技术内容，也整理收集优秀的学习资料。</p><p>特别感谢 Swift社区 编辑部的每一位编辑，感谢大家的辛苦付出，为 Swift社区 提供优质内容，为 Swift 语言的发展贡献自己的力量。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本期是 Swift 编辑组自主整理周报的第五期&lt;/strong&gt;，每个模块已初步成型。各位读者如果有好的提议，欢迎在文末留言。&lt;/p&gt;
&lt;p&gt;欢迎投稿或推荐内容。目前计划每两周周一发布，欢迎志同道合的朋友一起加入周报整理。&lt;/p&gt;
&lt;p&gt;小时候幸福很简单，长大后简单很幸福。&lt;strong&gt;Swift社区&lt;/strong&gt;有你未领取的小幸福，等你简简单单来开启！👊👊👊&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;周报精选&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新闻和社区：iPhone灵动岛无法适配大部分应用&lt;/p&gt;
&lt;p&gt;提案：Swift 5.8 实现的提案&lt;/p&gt;
&lt;p&gt;Swift 论坛：&lt;code&gt;conformance&lt;/code&gt; 关键字&lt;/p&gt;
&lt;p&gt;推荐博文：SwiftUI 新功能 Layout 协议&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;话题讨论：&lt;/strong&gt; 大厂养老，你会选择谁&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Swift 周报" scheme="https://fanbaoying.github.io/categories/Swift-%E5%91%A8%E6%8A%A5/"/>
    
    
      <category term="Swift" scheme="https://fanbaoying.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>实现模块化应用的本地化</title>
    <link href="https://fanbaoying.github.io/%E5%AE%9E%E7%8E%B0%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BA%94%E7%94%A8%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%8C%96/"/>
    <id>https://fanbaoying.github.io/实现模块化应用的本地化/</id>
    <published>2022-09-26T03:56:33.000Z</published>
    <updated>2022-09-26T03:59:50.417Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我已经有一段时间没有从头开始一个需要支持多种语言的新项目了。当然不是从头开始，而是在代码库中通过使用 Swift 包将代码分成不同模块。</p><p>我想提醒自己记住许多在本地化实行中的过程，所以我认为最好写一篇文章，以便下次开始同类型项目时可以参考。</p><a id="more"></a><h2 id="开始吧！"><a href="#开始吧！" class="headerlink" title="开始吧！"></a>开始吧！</h2><p>让我们看看代码库的一个简化版本。它包含一个 Xcode 项目，一个单独的 app target（即将运行的那个）和一个名为 <code>Features</code> 的 Swift 包。后者将包含 app 中所有页面的代码，每一页将被定义为自己的产品：</p><p><strong>Package.swift</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift-tools-version: 5.6</span></span><br><span class="line"><span class="keyword">import</span> PackageDescription</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> package = <span class="type">Package</span>(</span><br><span class="line">    name: <span class="string">"Features"</span>,</span><br><span class="line">    products: [</span><br><span class="line">        .library(</span><br><span class="line">            name: <span class="string">"Home"</span>,</span><br><span class="line">            targets: [<span class="string">"Home"</span>]),</span><br><span class="line">        .library(</span><br><span class="line">            name: <span class="string">"Detail"</span>,</span><br><span class="line">            targets: [<span class="string">"Detail"</span>]</span><br><span class="line">        )</span><br><span class="line">    ],</span><br><span class="line">    dependencies: [</span><br><span class="line">    ],</span><br><span class="line">    targets: [</span><br><span class="line">        .target(</span><br><span class="line">            name: <span class="string">"Home"</span></span><br><span class="line">        ),</span><br><span class="line">        .target(</span><br><span class="line">            name: <span class="string">"Detail"</span></span><br><span class="line">        )</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这个 app target 将会作为 app 的组合层，其唯一的目的是导入每个功能，实例化它们并协调导航。所有的 UI ，演示和业务逻辑将留在各自的 “模块” 中（<code>Features Swift Package</code> 中的一个 target）。这将允许每个功能独立开发并完全的与其他功能隔离。</p><p>为了简单起见，这个例子里仅有两个功能：主页和详情，他们代表 app 中仅有的两个页面。</p><p>主页有一个按钮允许用户导航到详情页面，还有一个标签展示用户当前所在区域的语言代码。详情页只展示一个标签，和主页标签展示的信息一致：</p><p><img src="https://www.polpiella.dev/assets/posts/modularised-app-localisation/detail-home-en.png" alt="Images of both screens with english selected as the language"></p><h2 id="添加字符串！"><a href="#添加字符串！" class="headerlink" title="添加字符串！"></a>添加字符串！</h2><p>看起来不错，但是现在展示的信息是用英文通过硬编码编写的字符串。app 需要内容被翻译成另外两种语言：加泰罗尼亚语和西班牙语。</p><p>虽然有多种实现方式，我更倾向每个功能（或页面）只包含它所需要的本地化字符串，这样可以增加功能的可移植性和可重用性。</p><p>这可以在 Swift 包中完成，通过将所有必需的 <code>.lproj</code> 文件和所有需要本地化的内容（当前例子中只有 <code>Localizable.strings</code> 文件）放在目标文件夹下 - 我的习惯是放在父 <code>Resources/</code> 文件夹下，并将这些资源定义为 <code>Package.swift</code> 的特定 target。</p><p>添加文件之后构建该功能将导致编译器抛出如下错误：</p><p><img src="https://www.polpiella.dev/assets/posts/modularised-app-localisation/default-localisation-error.png" alt="Error thrown by Xcode when no default localisation is set"></p><p>这是因为 <code>defaultLocalization</code> 必须由 <code>Package.swift</code> 提供。所有功能的 target 来自一个包，所以只能有一个 <code>defaultLocalization</code> 。以下是 <code>Package.swift</code> 添加本地化内容之后的样子：</p><p><strong>Package.swift</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift-tools-version: 5.6</span></span><br><span class="line"><span class="keyword">import</span> PackageDescription</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> package = <span class="type">Package</span>(</span><br><span class="line">    name: <span class="string">"Features"</span>,</span><br><span class="line">    defaultLocalization: <span class="string">"en"</span>,</span><br><span class="line">    platforms: [.iOS(.v15)],</span><br><span class="line">    products: [</span><br><span class="line">        .library(</span><br><span class="line">            name: <span class="string">"Home"</span>,</span><br><span class="line">            targets: [<span class="string">"Home"</span>]),</span><br><span class="line">        .library(</span><br><span class="line">            name: <span class="string">"Detail"</span>,</span><br><span class="line">            targets: [<span class="string">"Detail"</span>]</span><br><span class="line">        )</span><br><span class="line">    ],</span><br><span class="line">    dependencies: [</span><br><span class="line">    ],</span><br><span class="line">    targets: [</span><br><span class="line">        .target(</span><br><span class="line">            name: <span class="string">"Home"</span>,</span><br><span class="line">            dependencies: [],</span><br><span class="line">            resources: [.process(<span class="string">"Resources/"</span>)]</span><br><span class="line">        ),</span><br><span class="line">        .target(</span><br><span class="line">            name: <span class="string">"Detail"</span>,</span><br><span class="line">            resources: [.process(<span class="string">"Resources/"</span>)]</span><br><span class="line">        )</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果没有为默认的本地化代码提供本地化的内容，编译器会显示警告。这对于确保你不会发布包含基本本地化内容的软件包版本非常有帮助。</p><p><img src="https://www.polpiella.dev/assets/posts/modularised-app-localisation/missing-default-localisation.png" alt="Xcode warning shown when default localisation is missing."></p></blockquote><h2 id="支持本地化"><a href="#支持本地化" class="headerlink" title="支持本地化"></a>支持本地化</h2><p>可能与你的想法正好相反，把设备系统语言设置为加泰罗尼亚语或西班牙语并且运行 app 内容仍然用英文展示。原因是 Swift 包需要额外的信息去决定使用哪些本地化的内容，就目前来看，如果包里有目标内容，它们将只使用目标的基本本地化，否则使用包的默认本地化。</p><p>现在有两种方式我们可以实现本地化：使新的本地化在 app target 中可用或启用混合本地化。</p><h3 id="在-app-target-中添加新的本地化内容"><a href="#在-app-target-中添加新的本地化内容" class="headerlink" title="在 app target 中添加新的本地化内容"></a>在 app target 中添加新的本地化内容</h3><p>在 <code>Features</code>  Swift 包中启用新的本地化的一种方式是将它们添加到导入功能的 Xcode 项目中。这可以通过进入 Xcode 项目，在项目设置中的 “Info” 一栏，添加本地化支持：</p><p><img src="https://images.xiaozhuanlan.com/photo/2022/dfb90c005ba10bc3797eddaf4032e348.gif" alt=""></p><blockquote><p>需要注意的是，本地化需要至少一个文件（例如一个空的 <code>Localizable.strings</code> 文件）。在本例中，因为 app target 是用 UIKit 构建的，并且在添加新的本地化时选择了启动 storyboard 进行本地化（如上视频所示），所以已经有一个本地化文件。</p></blockquote><p>现在这将允许包从主包中获取支持的本地化，并选择相应的要使用的资源。</p><p>值得注意的是，如果设备有被 app 支持但是包不支持的语言，则后者将会回退到 <code>Package.swift</code> 中提供的 <code>defaultLocalization</code> .</p><p>同样的，如果 app 不支持该语言，同样会回退到相同的值。这也是为什么将 <code>defaultLocalization</code> 设置为与主目标基础语言相同，以确保所有页面上的一致性是非常重要的。这也是我更倾向于所有功能分组在一个 Swift 包之下的原因，这样所有页面上的 <code>defaultLocalization</code> 就有了单一真正的来源。</p><h3 id="允许混合本地化"><a href="#允许混合本地化" class="headerlink" title="允许混合本地化"></a>允许混合本地化</h3><p>虽然采用 app target 的本地化是首选方法，因为他确保了所有页面的一致性，并且只允许少数受支持的地方使用，但还有另一种方法允许包内容被本地化，而不必在主项目之外。</p><p>可以通过将 app 的 <code>Info.plist</code> 文件中的 <code>CFBundleAllowMixedLocalizations</code> 值设置为 <code>YES</code> 来实现。</p><p>这个设置将会告诉 app target 在不同的 target 或功能使用不同本地化是可以的，当添加新的本地化资源时， app 本地化会自动工作。</p><p><img src="https://www.polpiella.dev/assets/posts/modularised-app-localisation/enable-mixed-localizations.png" alt="Enabling mixed localisations in the app target"></p><p>使用这种方法需要注意以下几点：</p><p>1.不再需要将本地化添加到 app target，添加带有本地化内容的 <code>lproj</code> 到包资源就可以了。当用户修改区域时，如果你的资源包存在该语言包或默认提供 <code>Package.swift</code> ，软件包也会展示该区域的语言内容。</p><p>2.支持多少个区域就会有多少个本地化资源。这意味着没有一个单一的真实来源来确定整个 app 支持哪些本地化。这可能会导致一些问题，例如，某个功能有本地化资源内容，而该内容的本地化资源还未被应用。在本例中，除了删除资源，没有办法隐藏它。</p><video autoplay loop><br>  <source src="https://www.polpiella.dev/assets/posts/modularised-app-localisation/mixed-localisations.mp4" type="video/mp4"><br></video><p>第二点如上面的视频中所示，当用户把设备语言设置为法语。混合来源导致了不一致，因为主屏幕没有 <code>fr.lproj</code> –因此它又回到了默认本地化资源，英语。另一方面，在详情页面，有可用的本地化内容，这是正确翻译字符串的原因，正是这个原因，我喜欢将 app target 作为所有支持本地化的真实来源。</p><h2 id="额外提示-自动化"><a href="#额外提示-自动化" class="headerlink" title="额外提示 - 自动化"></a>额外提示 - 自动化</h2><p>我一直鼓励尽可能地自动化检索特定包的本地化字符串的流程。如果你的 app 有很多页面，希望使添加本地化字符串的过程尽可能简单和简便。</p><p>我一直在使用的一款工具 <a href="https://github.com/SwiftGen/SwiftGen" target="_blank" rel="noopener">SwiftGen</a>，它可以为各种资源生成 Swift 接口，例如 <code>Localizable.strings</code> 文件。</p><p>创建一个利用这个可执行文件的构建工具插件，可以使支持新本地化过程变得容易一点，并在各功能之间保持一致。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我已经有一段时间没有从头开始一个需要支持多种语言的新项目了。当然不是从头开始，而是在代码库中通过使用 Swift 包将代码分成不同模块。&lt;/p&gt;
&lt;p&gt;我想提醒自己记住许多在本地化实行中的过程，所以我认为最好写一篇文章，以便下次开始同类型项目时可以参考。&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://fanbaoying.github.io/categories/Swift/"/>
    
    
      <category term="iOS" scheme="https://fanbaoying.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI 之 HStack 和 VStack 的切换</title>
    <link href="https://fanbaoying.github.io/SwiftUI-%E4%B9%8B-HStack-%E5%92%8C-VStack-%E7%9A%84%E5%88%87%E6%8D%A2/"/>
    <id>https://fanbaoying.github.io/SwiftUI-之-HStack-和-VStack-的切换/</id>
    <published>2022-09-26T03:56:25.000Z</published>
    <updated>2022-09-26T03:58:04.704Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>SwiftUI</code> 的各种堆栈是许多框架中最基本的布局工具，能够让我们定义组视图，这些组视图可以按照水平、垂直或覆盖视图对齐。</p><p>当涉及到水平和垂直的变体时( <code>HStack</code> 和 <code>VStack</code> )，我们需要在这两者之间动态的切换。举个例子，假如我们正在构建一个 <code>app</code> 其中包含 <code>LoginActionsView</code> ，一个让用户登录时在列表中选择操作的类：</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LoginActionsView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Login"</span>) &#123; ... &#125;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Reset password"</span>) &#123; ... &#125;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Create account"</span>) &#123; ... &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .buttonStyle(<span class="type">ActionButtonStyle</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ActionButtonStyle</span>: <span class="title">ButtonStyle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeBody</span><span class="params">(configuration: Configuration)</span></span> -&gt; some <span class="type">View</span> &#123;</span><br><span class="line">        configuration.label</span><br><span class="line">            .fixedSize()</span><br><span class="line">            .frame(maxWidth: .infinity)</span><br><span class="line">            .padding()</span><br><span class="line">            .foregroundColor(.white)</span><br><span class="line">            .background(<span class="type">Color</span>.blue)</span><br><span class="line">            .cornerRadius(<span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上代码中，我们用到了 <code>fixedSize</code> 防止按钮文本被截断，这仅是在我们确信给定的内容视图不会比视图本身更大的情况。想了解更多信息，可以查看我的文章 -  <a href="https://www.swiftbysundell.com/articles/swiftui-layout-system-guide-part-3/#fixed-dimensions" target="_blank" rel="noopener">SwiftUI 布局系统第三章</a></p></blockquote><p>目前，我们的按钮是垂直排列的，并且填满了水平线上的可用空间（你可以用以上示例代码预览按钮的样子），虽然这在竖向的 iPhone 上看起来很好，但假设我们现在想要在横向模式下让 <code>UI</code> 横向排列。</p><h2 id="GeometryReader-能实现吗？"><a href="#GeometryReader-能实现吗？" class="headerlink" title="GeometryReader 能实现吗？"></a>GeometryReader 能实现吗？</h2><p>一种方式是用 <code>GeometryReader</code> 测量当前可用空间，并根据宽度是否大于其高度，可以选择使用 <code>HStack</code> 或  <code>VStack</code> 来渲染内容。</p><p>虽然可以在 <code>LoginActionsView</code> 中放入该逻辑，但我们希望以后能复用代码，因此需要重新创建一个专门的视图，作为一个独立的组件来实现动态堆栈的切换逻辑。</p><p>为了使代码可用性更高，我们不会硬编码让两个堆栈变体使用对齐或间距什么的。相反，让我们像 <code>SwiftUI</code> 一样，对这些属性参数化，同时设定框架所使用的默认值 — 就像这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DynamicStack</span>&lt;<span class="title">Content</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> horizontalAlignment = <span class="type">HorizontalAlignment</span>.center</span><br><span class="line"><span class="keyword">var</span> verticalAlignment = <span class="type">VerticalAlignment</span>.center</span><br><span class="line"><span class="keyword">var</span> spacing: <span class="type">CGFloat</span>?</span><br><span class="line">    @<span class="type">ViewBuilder</span> <span class="keyword">var</span> content: () -&gt; <span class="type">Content</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">GeometryReader</span> &#123; proxy <span class="keyword">in</span></span><br><span class="line">            <span class="type">Group</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> proxy.size.width &gt; proxy.size.height &#123;</span><br><span class="line">                    <span class="type">HStack</span>(</span><br><span class="line">                        alignment: verticalAlignment,</span><br><span class="line">                        spacing: spacing,</span><br><span class="line">                        content: content</span><br><span class="line">                    )</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">VStack</span>(</span><br><span class="line">                        alignment: horizontalAlignment,</span><br><span class="line">                        spacing: spacing,</span><br><span class="line">                        content: content</span><br><span class="line">                    )</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们使新的 <code>DynamicStack</code> 使用了与 <code>HStack</code>  和 <code>VStack</code> 相同的 <code>API</code> ，现在可以在 <code>LoginActionsView</code> 中直接将以前的 <code>VStack</code> 换成新的自定义的实例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LoginActionsView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">DynamicStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Login"</span>) &#123; ... &#125;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Reset password"</span>) &#123; ... &#125;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Create account"</span>) &#123; ... &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .buttonStyle(<span class="type">ActionButtonStyle</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优秀！然而，就像上面的代码展示的那样，使用 <code>GeometeryReader</code> 来展示动态切换有一个相当明显的缺点，在几何图形阅读器中总是会填充水平和垂直方向的所有可用空间（以便测量实际空间）。在我们的例子中，<code>LoginActionsView</code> 不再只是水平方向的排列，它现在也能移动到屏幕的顶部。</p><p>虽然我们也有很多方法能解决这些问题（例如使用类似在<a href="https://swiftbysundell.com/questions/syncing-the-width-or-height-of-two-swiftui-views/" target="_blank" rel="noopener">这篇 Q&amp;A </a>中用来使多个视图具有相同宽度和高度的技术），但真正的问题是当我们要动态的确定方向时，测量可用空间是否是一个好的方法。</p><h2 id="一个使用尺寸类的例子"><a href="#一个使用尺寸类的例子" class="headerlink" title="一个使用尺寸类的例子"></a>一个使用尺寸类的例子</h2><p>相反，让我们使用 <code>Apple</code> 的尺寸类系统来决定 <code>DynamicStack</code> 应该在底层使用 <code>HStack</code> 还是 <code>VStack</code> 。这样做的好处不仅仅是在引入 <code>GeometeryReader</code> 之前保留同样紧凑的布局，并且会使 <code>DynamicStack</code> 在开始的时候以一种和系统组件类似的方式在所有设备和方向上构建。</p><p>为了观察当前水平方向的尺寸，我们需要用到 <a href="https://swiftbysundell.com/articles/swiftui-state-management-guide/#observing-and-modifying-the-environment" target="_blank" rel="noopener">SwiftUI 环境系统</a>  —  通过在 <code>DynamicStack</code> 中声明 <code>@Environment</code> - 标记属性（带有  <code>horizontalSizeClass</code> <a href="https://swiftbysundell.com/articles/the-power-of-key-paths-in-swift/" target="_blank" rel="noopener">关键路径</a>），将会使我们在视图内容中切换到当前 <code>sizeClass</code> 的值：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DynamicStack</span>&lt;<span class="title">Content</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    @<span class="type">Environment</span>(\.horizontalSizeClass) <span class="keyword">private</span> <span class="keyword">var</span> sizeClass</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> sizeClass &#123;</span><br><span class="line">        <span class="keyword">case</span> .regular:</span><br><span class="line">            hStack</span><br><span class="line">        <span class="keyword">case</span> .compact, .<span class="keyword">none</span>:</span><br><span class="line">            vStack</span><br><span class="line">        @unknown <span class="keyword">default</span>:</span><br><span class="line">            vStack</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">extension</span> <span class="title">DynamicStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hStack: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span>(</span><br><span class="line">            alignment: verticalAlignment,</span><br><span class="line">            spacing: spacing,</span><br><span class="line">            content: content</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> vStack: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(</span><br><span class="line">            alignment: horizontalAlignment,</span><br><span class="line">            spacing: spacing,</span><br><span class="line">            content: content</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过以上操作，<code>LoginActionsView</code> 将可以在常规的尺寸渲染时动态切换成水平布局（例如在大尺寸的 <code>iPhone</code> 使用横屏，或者全屏 <code>iPad</code> 上的任一方向），而其它所有尺寸的配置使用垂直布局。所有这些仍然使用紧凑垂直布局，它使用的空间不超过渲染其内容所需的空间。</p><h2 id="使用布局协议"><a href="#使用布局协议" class="headerlink" title="使用布局协议"></a>使用布局协议</h2><p>虽然我们最后已经用了非常棒的解决方案，可以在所有支持 <code>SwiftUI</code>  的 <code>iOS</code> 版本中使用，但也让我们来探索一下在 <code>iOS 16</code> 中引入的一些新的布局工具（在写这篇文章时，它作为 <code>Xcode 14</code> 的一部分仍在测试阶段） </p><p>其中一个工具是新的 <code>Layout</code> 协议，它既能让我们创建完整的自定义布局，直接集成到 <code>SwiftUI</code>  的布局系统中，同时也提供给我们一种更丝滑更动画的方式在各种布局之间动态切换 。</p><p>这都是因为事实证明 <code>Layout</code> 不仅仅是我们第三方开发者的 <code>API</code> ，<code>Apple</code> 也让 <code>SwiftUI</code> 自己的布局容器使用这个新协议 。所以，与其直接使用 <code>HStack</code> 和 <code>VStack</code> 作为容器视图，不如将它们作为符合 <code>Layout</code> 的实例，使用 <code>AnyLayout</code> 类型进行包装 — 就像这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">extension</span> <span class="title">DynamicStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> currentLayout: <span class="type">AnyLayout</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> sizeClass &#123;</span><br><span class="line">        <span class="keyword">case</span> .regular, .<span class="keyword">none</span>:</span><br><span class="line">            <span class="keyword">return</span> horizontalLayout</span><br><span class="line">        <span class="keyword">case</span> .compact:</span><br><span class="line">            <span class="keyword">return</span> verticalLayout</span><br><span class="line">        @unknown <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> verticalLayout</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> horizontalLayout: <span class="type">AnyLayout</span> &#123;</span><br><span class="line">        <span class="type">AnyLayout</span>(<span class="type">HStack</span>(</span><br><span class="line">            alignment: verticalAlignment,</span><br><span class="line">            spacing: spacing</span><br><span class="line">        ))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> verticalLayout: <span class="type">AnyLayout</span> &#123;</span><br><span class="line">        <span class="type">AnyLayout</span>(<span class="type">VStack</span>(</span><br><span class="line">            alignment: horizontalAlignment,</span><br><span class="line">            spacing: spacing</span><br><span class="line">        ))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的操作是可行的，因为当 <code>HStack</code> 和 <code>VStack</code> 的内容类型是 <code>EmptyView</code> 时，它们都符合新的 <code>Layout</code> 协议（当内容为空时就是这种情况），让我们来看一下<code>SwiftUI</code>  的 公共接口</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DynamicStack</span>&lt;<span class="title">Content</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        currentLayout(content)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  注意：由于回归， <code>Xcode 14 beta 3</code> 中省略了以上条件的一致性，根据 <code>SwiftUI</code> 团队的 <a href="https://twitter.com/ricketson_/status/1544784314453282817" target="_blank" rel="noopener">Matt Ricketson 的说法</a>，可以直接使用底层的 <code>_HStackLayout</code> 和 <code>_VStackLayout</code> 类型作为临时的解决方法。并希望能在未来测试版本中修复。    </p></blockquote><p>现在我们能通过使用新的 <code>currentLayout</code> 解决使用什么布局，现在我们来更新 <code>body</code> 的实现，简单调用从该属性返回的 <code>AnyLayout</code> ，就像函数一样 — 像这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DynamicStack</span>&lt;<span class="title">Content</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        currentLayout(content)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  我们之所以能像一个函数一样调用布局方法（尽管它实际上是一个结构）是因为 <code>Layout</code> 协议使用了 <code>Swift</code> <a href="https://swiftbysundell.com/articles/exploring-swift-5-2s-new-functional-features/#calling-types-as-functions" target="_blank" rel="noopener">”像函数一样调用“ 的特性</a></p></blockquote><p>那么我们之前的方案和上面基于布局的方案有什么区别呢？关键的区别在于（除了后者需要 <code>iOS 16</code> ）切换布局可以保留正在渲染的底层视图的标识，而在 <code>HStack</code> 和 <code>VStack</code> 之间切换就不会这样。这样做会令动画更流畅，例如在切换设备方向时，我们也有可能在执行此类更改时获得小幅的性能提升（因为 <code>SwiftUI</code> 总是在其视图层次结构为静态时尽可能表现最佳）</p><h2 id="选择合适的视图"><a href="#选择合适的视图" class="headerlink" title="选择合适的视图"></a>选择合适的视图</h2><p>但我们还没有结束，因为 <code>iOS 16</code> 也给了我们其他有趣的新的布局工具，它有可能也能用于实现 <code>DynamicStack</code>  — 一种全新的视图类型，名字叫做 <code>ViewThatFits</code> 。就像字面意思一样，这种新的容器将会在我们初始化时传递的候选列表中，基于当前上下文挑选出最优视图。</p><p>在我们的例子中，这意味着我们能同时把 <code>HStack</code> 和 <code>VStack</code> 传递给它，并且代表我们在它们中间自动切换。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DynamicStack</span>&lt;<span class="title">Content</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ViewThatFits</span> &#123;</span><br><span class="line">            <span class="type">HStack</span>(</span><br><span class="line">                alignment: verticalAlignment,</span><br><span class="line">                spacing: spacing,</span><br><span class="line">                content: content</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="type">VStack</span>(</span><br><span class="line">                alignment: horizontalAlignment,</span><br><span class="line">                spacing: spacing,</span><br><span class="line">                content: content</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：在这种情况下，我们首先放置 <code>HStack</code> 是很重要的，因为 <code>VStack</code> 可能总是合适的，即使在我们希望布局是横向的情况下（例如 <code>iPad</code> 的全屏模式）。同样重要的是要指出，上述基于 <code>ViewThatFits</code> 的技术将会始终尝试 <code>HStack</code> ，即使在用紧凑尺寸渲染布局时也是如此，只有在 <code>HStack</code> 不适合时才会选择基于<code>VStack</code> 的布局。  </p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上就是通过四种不同的方式实现 <code>DynamicStack</code> 视图，它可以根据当前内容在 <code>HStack</code> 和 <code>VStack</code> 之间动态切换。</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;SwiftUI&lt;/code&gt; 的各种堆栈是许多框架中最基本的布局工具，能够让我们定义组视图，这些组视图可以按照水平、垂直或覆盖视图对齐。&lt;/p&gt;
&lt;p&gt;当涉及到水平和垂直的变体时( &lt;code&gt;HStack&lt;/code&gt; 和 &lt;code&gt;VStack&lt;/code&gt; )，我们需要在这两者之间动态的切换。举个例子，假如我们正在构建一个 &lt;code&gt;app&lt;/code&gt; 其中包含 &lt;code&gt;LoginActionsView&lt;/code&gt; ，一个让用户登录时在列表中选择操作的类：&lt;/p&gt;
    
    </summary>
    
      <category term="SwiftUI" scheme="https://fanbaoying.github.io/categories/SwiftUI/"/>
    
    
      <category term="iOS" scheme="https://fanbaoying.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>第三方库并不是必须的</title>
    <link href="https://fanbaoying.github.io/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%B9%B6%E4%B8%8D%E6%98%AF%E5%BF%85%E9%A1%BB%E7%9A%84/"/>
    <id>https://fanbaoying.github.io/第三方库并不是必须的/</id>
    <published>2022-09-26T03:56:17.000Z</published>
    <updated>2022-09-26T04:00:17.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我在Lyft的八年间，很多产品经理以及工程师经常想往我们 app 里添加第三方库。有时候集成一个特定的库（比如 <strong>PayPal</strong>）是必须的，有时候是避免去开发一些非常复杂的功能，有时候仅仅只是避免c重复造轮子。</p><p>虽然这些都是合理的考量，但使用第三方库的风险和相关成本往往被忽视或误解。在某些情况下，风险是值得的，但是在决定冒险之前，首先要能够明确的定义风险。为了使风险评估更加的透明和一致，我们制定了一个流程来衡量我们将其集成到app有多大的风险。</p><a id="more"></a><h2 id="风险"><a href="#风险" class="headerlink" title="风险"></a>风险</h2><p>大多数大型组织，包括我们，都有某种形式的代码审查，作为开发实践的一部分。对这些团队来说，添加一个第三方库就相当于添加了一堆由不属于团队成员开发，未经审查的代码。这破坏了团队一直坚持的代码审查原则，交付了质量未知的代码。这给app的运行方式以及长期开发带来了风险，对于大型团队而言，更是对整体业务带来了风险。</p><h3 id="运行时风险"><a href="#运行时风险" class="headerlink" title="运行时风险"></a>运行时风险</h3><p>库代码通常来说，对于系统资源，和app拥有相同级别的访问权限，但它们不一定应用团队为管理这些资源而制定的最佳实践。这意味着它们可以在没有限制的情况下访问磁盘，网络，内存，CPU等等，因此，它们可以（过度）将文件写入磁盘，使用未优化的代码占用内存或CPU，导致死锁或主线程延迟，下载（和上传！）大量数据等等。更糟糕的是他们会导致崩溃，甚至崩溃循环</p><p>其中许多情况直到 app 已经上架才被发现，在这种情况下，修复它需要创建一个新版本，并通过审核，这通常需要大量时间和成本。这种风险可以通过一个变量控制是否调用来进行一定程度的控制，但是这种方法也并非万无一失（看下文）。</p><h3 id="开发风险"><a href="#开发风险" class="headerlink" title="开发风险"></a>开发风险</h3><p>引用一个同事的话：“每一行代码都是一种负担”，对不是你自己写的代码而言，这句话更甚。库在适配新技术或API时可能很慢，这阻碍了代码开发，或者太快，导致开发的版本过高。</p><p>库在采用新技术或API时可能很慢，阻碍了代码库，或者太快，导致部署目标太高。每当 Apple 和 Google 每年发布一个新 OS 版本时，他们通常要求开发人员根据SDK的变化更新代码，库开发人员也必须这样做。这需要协调一致的努力、优先事项的一致性以及及时完成工作的能力。</p><p>随着移动平台的不断变化，以及团队（成员）也不是一成不变，这将会成为一个持续不断的风险。当被集成的库不存在了，而库又需要更新时，会花很多时间来决定谁来做。事实证明一旦一个库存在，就很少也很难被移除，因此我们将其视为长期维护成本。</p><h3 id="商业风险"><a href="#商业风险" class="headerlink" title="商业风险"></a>商业风险</h3><p>如同我上面所说，现代的操作系统并没有对 app 代码和库代码进行区分，因此除了系统资源之外，它们还可以访问用户信息。作为 app 的开发者，我们负责恰当的使用这部分信息，也需要为任何第三方库负责。</p><p>如果用户给了 Lyft app 地理位置授权，任何第三方库也将自动得获得授权。他们可以将那些（地理位置）数据上传到自己服务器，竞对服务器，或者谁知道还有什么地方。当一个库需要我们没有的权限时，那问题就更大了。</p><p>同样，一个系统的安全取决于其最薄弱的环节，但如果其中包含未经审核的代码，那么你就不知道它到底有多安全。你精心设计的安全编码实践可能会被一个行为不当的库所破坏。苹果和谷歌实施的任何政策都是如此，例如“你不得对用户追踪”。</p><h2 id="减少风险"><a href="#减少风险" class="headerlink" title="减少风险"></a>减少风险</h2><p>当对一个库（是否）进行使用评估时，我们首先要问几个问题，以了解对库的需求。</p><h3 id="我们内部能做么？"><a href="#我们内部能做么？" class="headerlink" title="我们内部能做么？"></a>我们内部能做么？</h3><p>有时候我们只需要简单的粘贴复制真正需要的部分。在更复杂的场景中，库与自定义后端通信，我们对该API进行了逆向，并自己构建了一个迷你SDK（同样，只构建了我们需要的部分）。在90%的情况下，这是首选，但在与非常特定的供应商或需求集成时并不总是可行。</p><h3 id="有多少用户从该库中受益？"><a href="#有多少用户从该库中受益？" class="headerlink" title="有多少用户从该库中受益？"></a>有多少用户从该库中受益？</h3><p>在一种情况下，我们正在考虑添加一个风险很大的库（根据下面的标准），旨在为一小部分用户提供服务，同时将我们的所有用户都暴露在该库中。 对于我们认为会从中受益的一小部分客户，我们冒了为我们所有用户带来问题的风险。</p><h3 id="这个库有什么传递依赖？"><a href="#这个库有什么传递依赖？" class="headerlink" title="这个库有什么传递依赖？"></a>这个库有什么传递依赖？</h3><p>我们还需要评估库的所有依赖项的以下标准。</p><h3 id="退出标准是什么？"><a href="#退出标准是什么？" class="headerlink" title="退出标准是什么？"></a>退出标准是什么？</h3><p>如果集成成功，是否有办法将其转移到内部？ 如果不成功，是否有办法删除？</p><h2 id="评价标准"><a href="#评价标准" class="headerlink" title="评价标准"></a>评价标准</h2><p>如果此时团队仍然希望集成库，我们要求他们根据一组标准对库进行“评分”。下面的列表并不全面，但应该能很好地说明我们希望看到的。</p><h3 id="阻断标准"><a href="#阻断标准" class="headerlink" title="阻断标准"></a>阻断标准</h3><p>这些标准将阻止我们从技术上或者公司政策上集成此库，在进行下一步之前，我们必须解决：</p><p><strong>过高的</strong> <strong>deployment target/target SDKs。</strong> 我们支持过去4年主流的操作系统（版本），所以第三方库至少也需要支持一样多。</p><p><strong>许可证不正确/缺失。</strong> 我们将许可文件与应用捆绑在一起，以确保我们可以合法使用代码并将其归属于许可持有人。</p><p><strong>没有冲突的传递依赖关系。</strong> 一个库不能有一个我们已经包含但版本不同的传递依赖项。</p><p><strong>不显示它自己的 UI 。</strong> 我们非常小心地使我们的产品看起来尽可能统一，定制用户界面对此不利。</p><p><strong>它不使用私有 API 。</strong> 我们不愿意冒 app 因使用私有 API 而被拒绝的风险。</p><h3 id="主要关注点"><a href="#主要关注点" class="headerlink" title="主要关注点"></a>主要关注点</h3><p><strong>闭源。</strong> 访问源代码意味着我们可以选择我们想要包含的库的哪些部分，以及如何将该源代码与应用程序的其余部分捆绑在一起。 对于我们来说，一个封闭源代码的二进制发行版更难集成。</p><p><strong>编译时有警告。</strong> 我们启用了“警告视为错误”，具有编译警告的库是库整体质量（下降）的良好指示。</p><p><strong>糟糕的文档。</strong> 我们希望有高质量的内联文档，外部”如何使用“文档，以及有意义的更新日志。</p><p><strong>二进制体积。</strong> 这个库有多大？一些库提供了很多功能，而我们只需要其中的一小部分。尤其是在没有访问源码权限的情况下，这通常是一个全有或全无的情况。</p><p><strong>外部的网络流量。</strong> 与我们无法控制的上游服务器/端点通信的库可能会在服务器关闭、错误数据被发回等时关闭整个应用程序。这也与我上面提到的隐私问题相同。</p><p><strong>技术支持。</strong> 当事情不能正常工作时，我们需要能够报告/上报问题，并在合理的时间内解决问题。开源项目通常由志愿者维护，也很难有一个时间线，但至少我们可以自己进行修改。这在闭源项目是不可能的。</p><p><strong>无法禁用。</strong> 虽然大多数库特别要求我们初始化它，但有些库在实例化时更“主动”，并且在我们不调用它的情况下可以自己执行工作。这意味着当库导致问题时，我们无法通过功能变量或其他机制将其关闭。</p><p>我们为所有这些（和其他一些）标准分配了点数，并要求工程师为他们想要集成的库汇总这些点数。虽然默认情况下，低分数并不难被拒绝，但我们通常会要求更多的理由来继续前进。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>虽然这个过程看起来非常严格，在许多情况下，潜在风险是假设的，但我们有我在这篇博文中描述的每个场景的实际例子。将评估记录下来并公开，也有助于将相对风险传达给不熟悉移动平台工作方式的人，并证明我们没有随意评估风险。</p><p>此外，我不想声称每一个第三方库本质上都是坏的。事实上，我们在Lyft使用了很多：<code>RxSwift</code>和<code>RxJava</code>、<code>Bugsnag</code>的<code>SDK</code>、<code>Google Maps</code>、<code>Tensorflow</code>，以及一些较小的用于非常特定的用例。但所有这些要么都经过了充分审查，要么我们已经决定风险值得收益，同时对这些风险和收益的真正含义有了清晰的认识。</p><p>最后，作为一个专业开发人员提示：始终在库的<code>API</code>之上创建自己的抽象，不要直接调用它们的<code>API</code>。这使得将来替换（或删除）底层库更加容易，再次减轻了与长期开发相关的一些风险。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我在Lyft的八年间，很多产品经理以及工程师经常想往我们 app 里添加第三方库。有时候集成一个特定的库（比如 &lt;strong&gt;PayPal&lt;/strong&gt;）是必须的，有时候是避免去开发一些非常复杂的功能，有时候仅仅只是避免c重复造轮子。&lt;/p&gt;
&lt;p&gt;虽然这些都是合理的考量，但使用第三方库的风险和相关成本往往被忽视或误解。在某些情况下，风险是值得的，但是在决定冒险之前，首先要能够明确的定义风险。为了使风险评估更加的透明和一致，我们制定了一个流程来衡量我们将其集成到app有多大的风险。&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://fanbaoying.github.io/categories/Swift/"/>
    
    
      <category term="iOS" scheme="https://fanbaoying.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>使用 SwiftUI 的 Eager Grids</title>
    <link href="https://fanbaoying.github.io/%E4%BD%BF%E7%94%A8-SwiftUI-%E7%9A%84-Eager-Grids/"/>
    <id>https://fanbaoying.github.io/使用-SwiftUI-的-Eager-Grids/</id>
    <published>2022-09-26T03:56:08.000Z</published>
    <updated>2022-09-26T03:58:30.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>早在 2020 年，我们就拥有了在 SwiftUI（LazyVGrid 和 LazyHGrid）中绘制网格的新视图控件。两年后，我们又获得了另一种在网格（Grid）中显示视图的视图控件。但是，这些新增功能非常不同，不仅在您使用它的方式上，而且在它内部的行为方式上。 2020 年的观点很懒惰。这些新人很热心。</p><a id="more"></a><p><code>lazy grids</code>不会渲染甚至实例化屏幕外的视图。单元格视图仅在它们被滚动时创建，并且在它们滚动时停止计算。</p><p>这篇文章的主题 Eager Grids 正好相反。 SwiftUI 不在乎它们是在屏幕上还是在屏幕外。所有视图都被同等对待。这可能会出现大量单元的性能问题。然而，多少是一个很大的数字是一个不可能回答的问题。这将取决于您的单元格视图的复杂性。</p><p>所以如果<code>lazy grids</code>表现更好，这就引出了一个问题，我为什么要使用<code>Eager Grids</code>？事实是，<code>Eager Grids</code>比<code>lazy grids</code>更有优势，反之亦然。例如，<code>Eager Grids</code>支持列跨越，而<code>lazy grids</code>不支持。归根结底，性能并不是唯一需要考虑的因素。在本文中，我们将探索这些新网格，以便您在选择其中一个时做出明智的决定。</p><h2 id="关于容器视图的一句话"><a href="#关于容器视图的一句话" class="headerlink" title="关于容器视图的一句话"></a>关于容器视图的一句话</h2><p>在我们开始探索 Grid 视图之前，让我先谈谈容器视图。也就是说，接收视图构建器并以特定方式呈现其内容的视图（HStack、VStack、ZStack、Lazy*Grid、Group、List、ForEach 等）。请耐心等待，这将在以后有所帮助。</p><p>有两种类型的容器视图。我认为这些类型没有正式名称。我只会称它们为“有布局的容器”和“没有布局的容器”。用几个例子可以更好地解释这一点：</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-group.png" alt="eagergrids-group"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">Group</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Hello"</span>)</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"World"</span>)</span><br><span class="line">                <span class="type">Image</span>(systemName: <span class="string">"network"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .padding(<span class="number">10</span>)</span><br><span class="line">            .border(.red)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样可以这么写:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"Hello"</span>)</span><br><span class="line">                .padding(<span class="number">10</span>)</span><br><span class="line">                .border(.red)</span><br><span class="line">            </span><br><span class="line">            <span class="type">Text</span>(<span class="string">"World"</span>)</span><br><span class="line">                .padding(<span class="number">10</span>)</span><br><span class="line">                .border(.red)</span><br><span class="line">            </span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="string">"network"</span>)</span><br><span class="line">                .padding(<span class="number">10</span>)</span><br><span class="line">                .border(.red)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从示例中可以看出，Group 修饰符分别应用于每个包含的视图。此外，Group 视图本身没有提供任何布局，也没有任何自己的几何图形。所有布局都由其父级执行：HStack。</p><p>但是，具有布局的容器（例如 HStack）上的修饰符应用于容器，该容器确实具有自己的几何形状：</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-hstack.png" alt="eagergrids-hstack"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"Hello"</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"World"</span>)</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="string">"network"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding(<span class="number">10</span>)</span><br><span class="line">        .border(.red)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可能会问，当 Group 没有父级时会发生什么。这不是问题。当没有布局容器存在时，SwiftUI 会隐式使用 VStack。这就是为什么这也有效：</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-nocontainer.png" alt="eagergrids-nocontainer"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;        </span><br><span class="line">        <span class="type">Text</span>(<span class="string">"Hello"</span>)</span><br><span class="line">        <span class="type">Text</span>(<span class="string">"World"</span>)</span><br><span class="line">        <span class="type">Image</span>(systemName: <span class="string">"network"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一个没有布局的容器示例是 <code>ForEach</code>：</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-foreach.png" alt="eagergrids-foreach"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">ForEach</span>(<span class="number">0</span>..&lt;<span class="number">5</span>) &#123; idx <span class="keyword">in</span></span><br><span class="line">                <span class="type">Text</span>(<span class="string">"<span class="subst">\(idx)</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .padding(<span class="number">10</span>)</span><br><span class="line">            .border(.blue)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这与网格有什么关系？我们将在下一节中找到答案。</p><h2 id="我们的第一个网格"><a href="#我们的第一个网格" class="headerlink" title="我们的第一个网格"></a>我们的第一个网格</h2><p>让我们建立我们的第一个网格。语法非常简单。您使用 Grid 容器视图，然后通过对 GridRow 容器内的单元格视图进行分组来定义其行。</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-first-grid.png" alt="eagergrids-first-grid"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Grid</span> &#123;</span><br><span class="line">            <span class="type">GridRow</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Cell #1"</span>)</span><br><span class="line">                    .padding(<span class="number">20</span>)</span><br><span class="line">                    .border(.red)</span><br><span class="line"></span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Cell #2"</span>)</span><br><span class="line">                    .padding(<span class="number">20</span>)</span><br><span class="line">                    .border(.red)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">GridRow</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Cell #3"</span>)</span><br><span class="line">                    .padding(<span class="number">20</span>)</span><br><span class="line">                    .border(.green)</span><br><span class="line"></span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Cell #4"</span>)</span><br><span class="line">                    .padding(<span class="number">20</span>)</span><br><span class="line">                    .border(.green)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .padding(<span class="number">10</span>)</span><br><span class="line">        .border(.blue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是我们谈论容器的地方。如果我告诉你 Grid 是一个带有布局的容器，但 GridRow 不是。这意味着我们可以重写我们的代码并获得相同的结果：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Grid</span> &#123;</span><br><span class="line">            <span class="type">GridRow</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Cell #1"</span>)</span><br><span class="line"></span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Cell #2"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .padding(<span class="number">20</span>)</span><br><span class="line">            .border(.red)</span><br><span class="line"></span><br><span class="line">            <span class="type">GridRow</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Cell #3"</span>)</span><br><span class="line"></span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Cell #4"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .padding(<span class="number">20</span>)</span><br><span class="line">            .border(.green)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding(<span class="number">10</span>)</span><br><span class="line">        .border(.blue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，并非所有行都具有相同数量的单元格。尽管这里的大多数示例都可以，但每一行可以包含任意数量的单元格。</p><h2 id="探索网格选项"><a href="#探索网格选项" class="headerlink" title="探索网格选项"></a>探索网格选项</h2><p>在以下部分中，我们将探讨不同的网格大小、对齐和跨越选项。但为了让事情变得更容易，我创建了一个名为 Grid Trainer 的小应用程序。该应用程序可让您以交互方式使用所有这些网格参数。当您更改网格时，该应用程序还将向您显示生成您创建的网格的代码。</p><p>整个应用程序位于一个 swift 文件中，因此只需几秒钟即可完成设置。只需创建一个新的 Xcode 项目，将 ContentView.swift 文件替换为此 gist 文件中的文件，就可以开始了。请注意，虽然我在设计应用程序时主要考虑了 macOS，但该应用程序在 iPad 上也能流畅运行。无需更改。</p><p>当您阅读以下部分时，最好运行 Grid Trainer 应用程序并测试您对网格的理解。试着看看你是否可以预测当你改变参数时网格会做什么。每次你得到你所期望的不同结果时，你都会学到一些关于网格的新东西。如果你得到你所期望的，你会重申你已经知道的。</p><h3 id="空间"><a href="#空间" class="headerlink" title="空间"></a>空间</h3><p>与 HStack 和 VStack 类似，Grid 容器具有用于间距的垂直和水平参数。如果未指定，则将使用系统默认值。</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-spacing.png" alt="eagergrids-spacing"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Grid</span>(horizontalSpacing: <span class="number">5.0</span>, verticalSpacing: <span class="number">15.0</span>) &#123;</span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.20</span>).gradient)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.40</span>).gradient)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.60</span>).gradient)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.80</span>).gradient)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.80</span>).gradient)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.60</span>).gradient)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.40</span>).gradient)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.20</span>).gradient)</span><br><span class="line">    &#125;</span><br><span class="line">    .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="列宽，行高"><a href="#列宽，行高" class="headerlink" title="列宽，行高"></a>列宽，行高</h3><p>网格中的单元格是视图，视图会适应父级提供的大小。在这种情况下，父级是网格。通常，列与其中最宽的单元格一样宽。在下面的示例中，橙色列的宽度由第二行中最宽的单元格决定。身高也是如此。在示例中，第二行与行中最高的紫色单元格一样高。</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-widths.png" alt="eagergrids-widths"></p><h3 id="未定义大小的单元"><a href="#未定义大小的单元" class="headerlink" title="未定义大小的单元"></a>未定义大小的单元</h3><p>默认情况下，网格将为单元格提供尽可能多的空间。那么如果一个网格是由一个 Rectangle() 视图组成的，会发生什么呢？如您所知，没有框架修饰符的形状喜欢增长以填充父级提供的所有空间。在这种情况下，网格将增长以填充其父级提供的所有空间。</p><p>在下面的示例中，绿色单元格在其水平维度上不受限制，因此它使用了所有可用空间。网格尽可能地增长，绿色单元格填充空间。然而，蓝色单元格被框架修改器限制为 50.0 pt 宽度。虚线表示网格边界。</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-parent.png" alt="eagergrids-parent"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dash = <span class="type">StrokeStyle</span>(lineWidth: <span class="number">1.0</span>, lineCap: .round, lineJoin: .miter, dash: [<span class="number">5</span>, <span class="number">5</span>], dashPhase: <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HStack</span>(spacing: <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Circle</span>().fill(.yellow).frame(width: <span class="number">30</span>, height: <span class="number">30</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="type">Grid</span>(horizontalSpacing: <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">GridRow</span> &#123;</span><br><span class="line">                    <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">15.0</span>)</span><br><span class="line">                        .fill(.green.gradient)</span><br><span class="line">                        .frame(height: <span class="number">50</span>)</span><br><span class="line">                    </span><br><span class="line">                    <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">15.0</span>)</span><br><span class="line">                        .fill(.blue.gradient)</span><br><span class="line">                        .frame(width: <span class="number">50</span>, height: <span class="number">50</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .overlay &#123; <span class="type">Rectangle</span>().stroke(style: dash) &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Circle</span>().fill(.yellow).frame(width: <span class="number">30</span>, height: <span class="number">30</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到目前为止，没有什么太令人惊讶的。这与我们从使用 HStack 容器的第一天起就看到的行为相同。但是，Grids 在这里为我们提供了一个选择。我们可以让单元格避免让网格增长以获得额外的空间。例如，对于水平维度，单元格只会增长到与其列中最宽的单元格一样多的空间。这样的单元格在确定列宽方面没有任何作用。这是通过应用于相关单元格的 gridCellUnsizedAxes() 修饰符来完成的。它接收一个 Axis.Set 值。它可以是 .horizontal、.vertical 或两者的组合：[.horizontal, .vertical]。这告诉网格给定单元格选择不要求额外空间的维度。</p><p>如果您还没有，现在是开始使用 Grid Trainer 应用程序并挑战您迄今为止的知识的好时机。</p><p>在下面的示例中，红色单元格在水平轴上未调整大小，使其仅与绿色单元格一样大。即使父母提供更多，红细胞也不会接受。</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-unsized.png" alt="eagergrids-unsized"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Grid</span> &#123;</span><br><span class="line">  <span class="type">GridRow</span> &#123;</span><br><span class="line">    <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>)</span><br><span class="line">      .fill(.green.gradient)</span><br><span class="line">      .frame(width: <span class="number">160.0</span>, height: <span class="number">80.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>)</span><br><span class="line">      .fill(.blue.gradient)</span><br><span class="line">      .frame(width: <span class="number">80.0</span>, height: <span class="number">80.0</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">GridRow</span> &#123;</span><br><span class="line">    <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>)</span><br><span class="line">      .fill(.red.gradient)</span><br><span class="line">      .frame(height: <span class="number">80.0</span>)</span><br><span class="line">      .gridCellUnsizedAxes(.horizontal)</span><br><span class="line"></span><br><span class="line">    <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>)</span><br><span class="line">      .fill(.yellow.gradient)</span><br><span class="line">      .frame(width: <span class="number">80.0</span>, height: <span class="number">80.0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对齐路线"><a href="#对齐路线" class="headerlink" title="对齐路线"></a>对齐路线</h3><h4 id="网格对齐"><a href="#网格对齐" class="headerlink" title="网格对齐"></a>网格对齐</h4><p>当单元格的视图小于可用空间时，对齐方式将取决于几个参数。第一个要考虑的参数是 Grid(alignment: Alignment)。它影响网格中的所有单元格，除非被下一个参数之一覆盖。如果未指定，则默认为 .center。</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-grid-alignment.gif" alt="eagergrid-grid-alignment"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Grid</span>(alignment: .topLeading) &#123;</span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>().fill(.yellow.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="type">Rectangle</span>().fill(.green.gradient)</span><br><span class="line">            .frame(width: <span class="number">100.0</span>, height: <span class="number">100.0</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>().fill(.orange.gradient)</span><br><span class="line">            .frame(width: <span class="number">100.0</span>, height: <span class="number">100.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(.red.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="行垂直对齐"><a href="#行垂直对齐" class="headerlink" title="行垂直对齐"></a>行垂直对齐</h4><p>您还可以使用 GridRow(alignment: VerticalAlignment) 指定行对齐方式。请注意，在这种情况下，对齐方式只是垂直的。此行中的单元格将结合 Grid 参数和 GridRow 参数。行的垂直对齐将优先于对齐的网格垂直组件。在下面的示例中，具有 .topTrailing 值的网格与 .bottom 垂直行值相结合，会导致第二行中的单元格以 .bottomTrailing 对齐。其他行将使用网格对齐方式（即 .topTrailing）。</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-row-alignment-1.png" alt="eagergrid-row-alignment-1"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Grid</span>(alignment: .topTrailing) &#123;</span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.25</span>).gradient)</span><br><span class="line">            .frame(width: <span class="number">120.0</span>, height: <span class="number">100.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.50</span>).gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.50</span>).gradient)</span><br><span class="line">            .frame(width: <span class="number">120.0</span>, height: <span class="number">100.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">GridRow</span>(alignment: .bottom) &#123;</span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.25</span>).gradient)</span><br><span class="line">            .frame(width: <span class="number">120.0</span>, height: <span class="number">100.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.50</span>).gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.50</span>).gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.25</span>).gradient)</span><br><span class="line">            .frame(width: <span class="number">120.0</span>, height: <span class="number">100.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.50</span>).gradient)</span><br><span class="line">            .frame(width: <span class="number">120.0</span>, height: <span class="number">100.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(<span class="type">Color</span>(white: <span class="number">0.50</span>).gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="列水平对齐"><a href="#列水平对齐" class="headerlink" title="列水平对齐"></a>列水平对齐</h4><p>除了指定垂直行对齐方式外，您还可以指定列水平对齐方式。与行对齐的情况一样，该值将与行垂直值和网格的对齐值合并。您使用修饰符 gridColumnAlignment() 指示列的对齐方式</p><p>注意：文档非常清楚。 gridColumnAlignment 只能在每列一个单元格中使用。否则行为未定义。</p><p>在以下示例中，您可以看到所有对齐组合：</p><p>单元格 (1,1)：对齐顶部前导。 （网格对齐）<br>单元格 (1, 2)：对齐的 topTrailing。 （网格对齐+列对齐）<br>单元格（2,1）：对齐的底部前导（网格对齐+行对齐）<br>单元格 (2,2)：对齐的底部尾随（网格对齐 + 行对齐 + 列对齐）</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-column-alignment.png" alt="eagergrids-column-alignment"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Grid</span>(alignment: .topLeading, horizontalSpacing: <span class="number">5.0</span>, verticalSpacing: <span class="number">5.0</span>) &#123;</span><br><span class="line">            <span class="type">GridRow</span> &#123;</span><br><span class="line">                <span class="type">CellView</span>(color: .green, width: <span class="number">80</span>, height: <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">                <span class="type">CellView</span>(color: .yellow, width: <span class="number">80</span>, height: <span class="number">80</span>)</span><br><span class="line">                    .gridColumnAlignment(.trailing)</span><br><span class="line"></span><br><span class="line">                <span class="type">CellView</span>(color: .orange, width: <span class="number">80</span>, height: <span class="number">120</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">GridRow</span>(alignment: .bottom) &#123;</span><br><span class="line">                <span class="type">CellView</span>(color: .green, width: <span class="number">80</span>, height: <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">                <span class="type">CellView</span>(color: .yellow, width: <span class="number">80</span>, height: <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">                <span class="type">CellView</span>(color: .orange, width: <span class="number">80</span>, height: <span class="number">120</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">GridRow</span> &#123;</span><br><span class="line">                <span class="type">CellView</span>(color: .green, width: <span class="number">120</span>, height: <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">                <span class="type">CellView</span>(color: .yellow, width: <span class="number">120</span>, height: <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">                <span class="type">CellView</span>(color: .orange, width: <span class="number">80</span>, height: <span class="number">80</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CellView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> color: <span class="type">Color</span></span><br><span class="line">        <span class="keyword">let</span> width: <span class="type">CGFloat</span></span><br><span class="line">        <span class="keyword">let</span> height: <span class="type">CGFloat</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">            <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>)</span><br><span class="line">                .fill(color.gradient)</span><br><span class="line">                .frame(width: width, height: height)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单元格对齐"><a href="#单元格对齐" class="headerlink" title="单元格对齐"></a>单元格对齐</h4><p>最后，您还可以使用 .gridCellAnchor(_: anchor: UnitPoint) 修饰符为单元格指定单独的对齐方式。此对齐方式将覆盖给定单元格的任何网格、列和行对齐方式。注意参数类型不是Alignment，而是UnitPoint。这意味着除了使用预定义的点 .topLeading、.center 等之外，您还可以创建任意点，例如 UnitPoint(x: 0.25, y: 0.75)：</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-cell-alignment.png" alt="eagergrid-cell-alignment"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Grid</span>(alignment: .topTrailing) &#123;</span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>().fill(.green.gradient)</span><br><span class="line">            .frame(width: <span class="number">120.0</span>, height: <span class="number">100.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(.blue.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">            .gridCellAnchor(<span class="type">UnitPoint</span>(x: <span class="number">0.25</span>, y: <span class="number">0.75</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>().fill(.blue.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span>().fill(.green.gradient)</span><br><span class="line">            .frame(width: <span class="number">120.0</span>, height: <span class="number">100.0</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文本基线对齐"><a href="#文本基线对齐" class="headerlink" title="文本基线对齐"></a>文本基线对齐</h4><p>除了常见的对齐方式，请记住您还可以使用文本基线对齐方式。对于 Grid 和 GridRow：</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-text-alignment.png" alt="eagergrid-text-alignment"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Grid</span>(alignment: .centerFirstTextBaseline) &#123;</span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">"Align"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="type">Rectangle</span>()</span><br><span class="line">            .fill(.green.gradient.opacity(<span class="number">0.7</span>))</span><br><span class="line">            .frame(width: <span class="number">50</span>, height: <span class="number">50</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.font(.system(size: <span class="number">36</span>))</span><br></pre></td></tr></table></figure><h4 id="没有-GridRow-的行"><a href="#没有-GridRow-的行" class="headerlink" title="没有 GridRow 的行"></a>没有 GridRow 的行</h4><p>如果 Grid 在 GridRow 容器之外有一个视图，则它被用作跨越所有列的单个单元格行。这种类型的单元格的常见用途是创建分隔符。例如，您可以使用 Divider() 视图，或者更复杂的视图，如下例所示。请注意，我们通常不希望分隔线使网格增长到最大值，因此我们使视图在水平轴上未调整大小。这将使分隔线与最宽的行一样宽，但不会更宽。</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-divider.png" alt="eagergrid-divider"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Grid</span>(horizontalSpacing: <span class="number">5.0</span>, verticalSpacing: <span class="number">5.0</span>) &#123;</span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.green.gradient)</span><br><span class="line">        </span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.purple.gradient)</span><br><span class="line">        </span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.blue.gradient)</span><br><span class="line">    &#125;</span><br><span class="line">    .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="type">Rectangle</span>()</span><br><span class="line">        .fill(<span class="type">LinearGradient</span>(colors: [.gray, .clear, .gray], startPoint: .leading, endPoint: .trailing))</span><br><span class="line">        .frame(height: <span class="number">2.0</span>)</span><br><span class="line">        .gridCellUnsizedAxes(.horizontal)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.green.gradient)</span><br><span class="line">        </span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.purple.gradient)</span><br><span class="line">        </span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.blue.gradient)</span><br><span class="line">    &#125;</span><br><span class="line">    .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="列跨越"><a href="#列跨越" class="headerlink" title="列跨越"></a>列跨越</h4><p><code>Eager Grids</code>优于<code>Lazy Grids</code>的优点之一是所有单元几何形状始终是已知的。这使得有一个跨越多列的单元格成为可能。要将单元格配置为跨越，请使用 .gridCellColumns(_ count: Int)</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-spanning.png" alt="eagergrid-spanning"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Grid</span> &#123;</span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.green.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.yellow.gradient)</span><br><span class="line">            .frame(height: <span class="number">50.0</span>)</span><br><span class="line">            .gridCellColumns(<span class="number">3</span>)</span><br><span class="line">            .gridCellUnsizedAxes(.horizontal)</span><br><span class="line">        </span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.purple.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">GridRow</span> &#123;</span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.green.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.yellow.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.orange.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.red.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>).fill(.purple.gradient)</span><br><span class="line">            .frame(width: <span class="number">50.0</span>, height: <span class="number">50.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意歧义"><a href="#注意歧义" class="headerlink" title="注意歧义"></a>注意歧义</h4><p>考虑以下示例。我们每行有 4 个单元格。除了第一行的第二个单元格和第二行的第三个单元格之外，每个单元格都是 50.0 pt 宽。这些将尽可能地增长（不扩大网格）。这两个单元格也分别跨越两列。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Grid</span>(horizontalSpacing: <span class="number">20.0</span>, verticalSpacing: <span class="number">20.0</span>) &#123;</span><br><span class="line">            <span class="type">GridRow</span> &#123;</span><br><span class="line">                <span class="type">CellView</span>(width: <span class="number">50.0</span>, color: .green)</span><br><span class="line"></span><br><span class="line">                <span class="type">CellView</span>(color: .purple)</span><br><span class="line">                    .gridCellColumns(<span class="number">2</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="type">CellView</span>(width: <span class="number">50.0</span>, color: .blue)</span><br><span class="line">                </span><br><span class="line">                <span class="type">CellView</span>(width: <span class="number">50.0</span>, color: .yellow)</span><br><span class="line">            &#125;</span><br><span class="line">            .gridCellUnsizedAxes([.horizontal, .vertical])</span><br><span class="line"></span><br><span class="line">            <span class="type">GridRow</span> &#123;</span><br><span class="line">                <span class="type">CellView</span>(width: <span class="number">50.0</span>, color: .green)</span><br><span class="line"></span><br><span class="line">                <span class="type">CellView</span>(width: <span class="number">50.0</span>, color: .purple)</span><br><span class="line">                </span><br><span class="line">                <span class="type">CellView</span>(color: .blue)</span><br><span class="line">                    .gridCellColumns(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">                <span class="type">CellView</span>(width: <span class="number">50.0</span>, color: .yellow)</span><br><span class="line">            &#125;</span><br><span class="line">            .gridCellUnsizedAxes([.horizontal, .vertical])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CellView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> width: <span class="type">CGFloat</span>? = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">let</span> color: <span class="type">Color</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">            <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">5.0</span>)</span><br><span class="line">                .fill(color.gradient)</span><br><span class="line">                .frame(width: width, height: <span class="number">50.0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你认为应该发生什么？如果仔细看，这是“先有鸡还是先有蛋的问题”。如果您查看第一行中的第二个单元格，它应该跨越到以下列。但是第二行中的以下列应该扩展到第三列。那是什么？我们可以满足一个条件或另一个条件，但不能同时满足这两个条件。这是因为第一行查看第二行以确定下一列，而第二行查看第一行以执行相同操作。 SwiftUI 需要以某种方式解决这个问题，如果你运行代码，你会得到以下结果：</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-ambiguity1.png" alt="eagergrid-ambiguity1"></p><p>为了打破平局，一个简单的解决方案是添加第三行：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GridRow</span> &#123;</span><br><span class="line">    <span class="type">CellView</span>(width: <span class="number">50</span>, color: .green)</span><br><span class="line"></span><br><span class="line">    <span class="type">CellView</span>(width: <span class="number">50</span>, color: .purple)</span><br><span class="line"></span><br><span class="line">    <span class="type">CellView</span>(width: <span class="number">50</span>, color: .blue)</span><br><span class="line"></span><br><span class="line">    <span class="type">CellView</span>(width: <span class="number">50</span>, color: .yellow)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三排打破平局，这就是它的样子：</p><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrid-ambiguity2.png" alt="eagergrid-ambiguity2"></p><p>如果您不需要第三行，则无论如何都可以添加一个，但高度为零。不过，您可能仍需要处理间距。幸运的是，这并不常见，但我会提到以防您遇到这种情况。</p><h2 id="蜂窝再访"><a href="#蜂窝再访" class="headerlink" title="蜂窝再访"></a>蜂窝再访</h2><p>在文章 <a href="https://swiftui-lab.com/impossible-grids/" target="_blank" rel="noopener">Impossible Grids</a> 中，我们是否探索了<code>Lazy Grid</code>，我写了一个示例，说明如何使用这些网格来呈现蜂窝中的单元格。创建这样的网格是测试网格可能的极限的好方法，所以我想我会重复这个练习，但这次使用<code>Eager Grids</code>。</p><p>此<a href="https://gist.github.com/swiftui-lab/d38440a2281b2e069f81a94baa741073" target="_blank" rel="noopener">gist file</a>中提供了完整的工作网格。如果需要图片来测试代码，可以访问 <a href="https://this-person-does-not-exist.com。您可以下载带有随机面孔的不存在的人的方形图片！它们是人工智能生成的。" target="_blank" rel="noopener">https://this-person-does-not-exist.com。您可以下载带有随机面孔的不存在的人的方形图片！它们是人工智能生成的。</a> 😲 视频中使用的图片来自该网站。</p><h3 id="从方形到六边形的步骤"><a href="#从方形到六边形的步骤" class="headerlink" title="从方形到六边形的步骤"></a>从方形到六边形的步骤</h3><p>我们必须从某个地方开始，所以我们将创建一个方形图像网格，然后逐渐添加代码将我们的简单网格转换为蜂窝。</p><p>到现在为止，您应该具备实现转换所需的所有知识。我将为您提供一个起点和您需要执行的一系列步骤，以便成功实现转换。但是，如果您没有时间，或者遇到困难，您可以检查上述 gist 文件中的代码。该代码有注释，指示它执行的每个步骤的位置。</p><p>请注意，单元格的翻转并不是练习的一部分，但我也将其包含在要点中。</p><p>以下视频显示了起点以及它如何变成蜂窝：</p><p>步骤#1：我们从方形图片网格开始。<br>步骤#2：六边形没有 1:1 的尺寸比。它的高度等于宽度 * cos(.pi/6)。如果您想知道原因，请查看 Impossible Grids，我在其中解释了原因。<br>步骤#3：用提供的六边形剪裁图像。<br>步骤#4：将偶数行和奇数行移动到相对的两侧。偏移量是六边形宽度的一半 + 网格水平间距。<br>第 5 步：行需要重叠，因此您需要将行高减少到四分之三 (3/4)。为什么是 3/4？，再次检查 Impossible Grids，我解释了原因。<br>第 6 步：要删除空白区域，请剪裁网格边框（或将其放在 ScrollView 中，它会为您进行剪裁）。<br>步骤#7：如果使垂直间距等于水平间距，则单元格将均匀分布。</p><h3 id="初始点"><a href="#初始点" class="headerlink" title="初始点"></a>初始点</h3><p>为了让你开始，这里有一些代码。首先，我们需要一些数据：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> image: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> color: <span class="type">Color</span> = .accentColor</span><br><span class="line">    <span class="keyword">var</span> flipped: <span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataModel</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> people: [<span class="type">Person</span>] = [</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Peter"</span>, image: <span class="string">"image-1"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Carlos"</span>, image: <span class="string">"image-2"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Jennifer"</span>, image: <span class="string">"image-3"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Paul"</span>, image: <span class="string">"image-4"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Charlotte"</span>, image: <span class="string">"image-5"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Thomas"</span>, image: <span class="string">"image-6"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Sophia"</span>, image: <span class="string">"image-7"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Isabella"</span>, image: <span class="string">"image-8"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Ivan"</span>, image: <span class="string">"image-9"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Laura"</span>, image: <span class="string">"image-10"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Scott"</span>, image: <span class="string">"image-11"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Henry"</span>, image: <span class="string">"image-12"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Laura"</span>, image: <span class="string">"image-13"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Abigail"</span>, image: <span class="string">"image-14"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"James"</span>, image: <span class="string">"image-15"</span>),</span><br><span class="line">        <span class="type">Person</span>(name: <span class="string">"Amelia"</span>, image: <span class="string">"image-16"</span>),</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> colors: [<span class="type">Color</span>] = [.yellow, .orange, .red, .purple, .blue, .pink, .green, .indigo]</span><br><span class="line"></span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> rows: [[<span class="type">Person</span>]] = <span class="type">DataModel</span>.buildDemoCells()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> columns: <span class="type">Int</span> &#123; rows.first?.<span class="built_in">count</span> ?? <span class="number">0</span> &#125;    </span><br><span class="line">    <span class="keyword">var</span> colCount: <span class="type">CGFloat</span> &#123; <span class="type">CGFloat</span>(columns) &#125;</span><br><span class="line">    <span class="keyword">var</span> rowCount: <span class="type">CGFloat</span> &#123; <span class="type">CGFloat</span>(rows.<span class="built_in">count</span>) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">buildDemoCells</span><span class="params">()</span></span> -&gt; [[<span class="type">Person</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> array = [[<span class="type">Person</span>]]()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add 7 rows</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">7</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> a = [<span class="type">Person</span>]()</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Add 6 cells per row</span></span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">6</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> idx = (r*<span class="number">6</span> + <span class="built_in">c</span>)</span><br><span class="line">                <span class="keyword">var</span> person = people[idx % people.<span class="built_in">count</span>]</span><br><span class="line">                person.color = colors[idx % colors.<span class="built_in">count</span>]</span><br><span class="line">                a.append(person)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            array.append(a)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="您还需要一个六边形："><a href="#您还需要一个六边形：" class="headerlink" title="您还需要一个六边形："></a>您还需要一个六边形：</h3><p><img src="https://swiftui-lab.com/wp-content/uploads/2022/07/eagergrids-hexagon.png" alt="eagergrids-hexagon"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HexagonShape</span>: <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">path</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span> -&gt; <span class="type">Path</span> &#123;</span><br><span class="line">        <span class="type">Path</span> &#123; path <span class="keyword">in</span></span><br><span class="line">        </span><br><span class="line">            <span class="keyword">let</span> height = rect.height</span><br><span class="line">            <span class="keyword">let</span> width = rect.height * cos(.pi/<span class="number">6</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">let</span> h = height / <span class="number">4</span></span><br><span class="line">            <span class="keyword">let</span> w = width / <span class="number">2</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">let</span> pt1 = <span class="type">CGPoint</span>(x: rect.midX, y: rect.minY)</span><br><span class="line">            <span class="keyword">let</span> pt2 = <span class="type">CGPoint</span>(x: rect.midX + w, y: h + rect.minY)</span><br><span class="line">            <span class="keyword">let</span> pt3 = <span class="type">CGPoint</span>(x: rect.midX + w, y: h * <span class="number">3</span> + rect.minY)</span><br><span class="line">            <span class="keyword">let</span> pt4 = <span class="type">CGPoint</span>(x: rect.midX, y: rect.maxY)</span><br><span class="line">            <span class="keyword">let</span> pt5 = <span class="type">CGPoint</span>(x: rect.midX - w, y: h * <span class="number">3</span> + rect.minY)</span><br><span class="line">            <span class="keyword">let</span> pt6 = <span class="type">CGPoint</span>(x: rect.midX - w, y: h + rect.minY)</span><br><span class="line">            </span><br><span class="line">            path.addLines([pt1, pt2, pt3, pt4, pt5, pt6])</span><br><span class="line">            </span><br><span class="line">            path.closeSubpath()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，你开始设置网格:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">StateObject</span> <span class="keyword">private</span> <span class="keyword">var</span> model = <span class="type">DataModel</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> cellWidth: <span class="type">CGFloat</span> = <span class="number">100</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> cellHeight: <span class="type">CGFloat</span> = <span class="number">100</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Grid</span>(alignment: .center, horizontalSpacing: <span class="number">2</span>, verticalSpacing: <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="type">ForEach</span>(model.rows.<span class="built_in">indices</span>, id: \.<span class="keyword">self</span>) &#123; rowIdx <span class="keyword">in</span></span><br><span class="line">                    <span class="type">GridRow</span> &#123;</span><br><span class="line">                        <span class="type">ForEach</span>(model.rows[rowIdx].<span class="built_in">indices</span>, id: \.<span class="keyword">self</span>) &#123; personIdx <span class="keyword">in</span></span><br><span class="line">                            </span><br><span class="line">                            <span class="keyword">let</span> person = model.rows[rowIdx][personIdx]</span><br><span class="line">                            </span><br><span class="line">                            <span class="type">Image</span>(person.image)</span><br><span class="line">                                .resizable()</span><br><span class="line">                                .frame(width: cellWidth, height: cellHeight)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(maxWidth: .infinity, maxHeight: .infinity)</span><br><span class="line">        .background(<span class="type">Color</span>.white)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p>今年添加的 Grid 视图使用起来非常简单，并且添加到我们已经拥有的现有布局容器视图中。然而，今年还引入了一个新的布局协议，在将我们的视图放置在屏幕上时，它提供了更多的选择。我们将在以后的文章中对此进行探讨。同时，我希望您喜欢这篇文章和 Grid 教练应用程序。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;早在 2020 年，我们就拥有了在 SwiftUI（LazyVGrid 和 LazyHGrid）中绘制网格的新视图控件。两年后，我们又获得了另一种在网格（Grid）中显示视图的视图控件。但是，这些新增功能非常不同，不仅在您使用它的方式上，而且在它内部的行为方式上。 2020 年的观点很懒惰。这些新人很热心。&lt;/p&gt;
    
    </summary>
    
      <category term="SwiftUI" scheme="https://fanbaoying.github.io/categories/SwiftUI/"/>
    
    
      <category term="iOS" scheme="https://fanbaoying.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 80 删除有序数组中的重复项 II</title>
    <link href="https://fanbaoying.github.io/LeetCode-80-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9-II/"/>
    <id>https://fanbaoying.github.io/LeetCode-80-删除有序数组中的重复项-II/</id>
    <published>2022-09-26T03:46:25.000Z</published>
    <updated>2022-09-26T03:49:49.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 79 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：中等</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给你一个有序数组 <code>nums</code> ，请你 <strong>原地</strong> 删除重复出现的元素，使每个元素 <strong>最多出现两次</strong> ，返回删除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在 <code>原地</code> <strong>修改输入数组</strong> 并在使用 O(1) 额外空间的条件下完成。</p><p><strong>说明：</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢？</p><p>请注意，输入数组是以 <strong>「引用」</strong> 方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span><br><span class="line">int len = removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,1,2,2,3]</span><br><span class="line">输出：5, nums = [1,1,2,2,3]</span><br><span class="line">解释：函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。 不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,0,1,1,1,1,2,3,3]</span><br><span class="line">输出：7, nums = [0,0,1,1,2,3,3]</span><br><span class="line">解释：函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3 。 不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 10^4</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li><li><code>nums</code> 已按升序排列</li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoveDuplicatesFromSortedArrayII</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">inout</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> nums.<span class="built_in">count</span> &gt; <span class="number">2</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> nums.<span class="built_in">count</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> index = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">2</span>..&lt;nums.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[index] != nums[index - <span class="number">1</span>] || nums[index] != nums[i] &#123;</span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">                nums[index] = nums[i]</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> index + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：保留一个索引，比较该索引处的元素、索引- 1处的元素以及向前移动的元素。</li><li>时间复杂度： O(n)</li><li>空间复杂度： O(1)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 79 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：中等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 79 单词搜索（Top 100）</title>
    <link href="https://fanbaoying.github.io/LeetCode-79-%E5%8D%95%E8%AF%8D%E6%90%9C%E7%B4%A2%EF%BC%88Top-100%EF%BC%89/"/>
    <id>https://fanbaoying.github.io/LeetCode-79-单词搜索（Top-100）/</id>
    <published>2022-09-26T03:46:09.000Z</published>
    <updated>2022-09-26T03:50:15.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本题为 LeetCode 前 100 高频题</strong></p><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 78 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：中等</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给定一个 <code>m x n</code> 二维字符网格 <code>board</code> 和一个字符串单词 <code>word</code> 。如果 <code>word</code> 存在于网格中，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><p><img src="https://images.xiaozhuanlan.com/photo/2022/01dc86a2e8777fa372b18296e334142b.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCCED&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><p><img src="https://images.xiaozhuanlan.com/photo/2022/07d5e0146bf7c3eeb14504736ed338c0.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;SEE&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 3</strong></p><p><img src="https://files.mdnice.com/user/17787/5d692bd2-0e4b-42cc-8bba-474a600acc8f.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCB&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>m == board.length</code></li><li><code>n = board[i].length</code></li><li><code>1 &lt;= m, n &lt;= 6</code></li><li><code>1 &lt;= word.length &lt;= 15</code></li><li><code>board</code> 和 <code>word</code> 仅由大小写英文字母组成</li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordSearch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">exist</span><span class="params">(board: [[Character]], <span class="number">_</span> word: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> board.<span class="built_in">count</span> &gt; <span class="number">0</span> &amp;&amp; board[<span class="number">0</span>].<span class="built_in">count</span> &gt; <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> m = board.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">let</span> n = board[<span class="number">0</span>].<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">var</span> visited = <span class="type">Array</span>(<span class="built_in">count</span>: m, repeatedValue: <span class="type">Array</span>(<span class="built_in">count</span>: n, repeatedValue: <span class="literal">false</span>))</span><br><span class="line">        <span class="keyword">var</span> wordContent = [<span class="type">Character</span>](word.characters)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;m &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;n &#123;</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == wordContent[<span class="number">0</span>] &amp;&amp; _dfs(board, wordContent, m, n, i, j, &amp;visited, <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">_dfs</span><span class="params">(board: [[Character]], <span class="number">_</span> wordContent: [Character], <span class="number">_</span> m: Int, <span class="number">_</span> n: Int, <span class="number">_</span> i: Int, <span class="number">_</span> j: Int, <span class="keyword">inout</span> <span class="number">_</span> visited: [[Bool]], <span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index == wordContent.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">guard</span> i &gt;= <span class="number">0</span> &amp;&amp; i &lt; m &amp;&amp; j &gt;= <span class="number">0</span> &amp;&amp; j &lt; n <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">guard</span> !visited[i][j] &amp;&amp; board[i][j] == wordContent[index] <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        visited[i][j] = <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> _dfs(board, wordContent, m, n, i + <span class="number">1</span>, j, &amp;visited, index + <span class="number">1</span>) || _dfs(board, wordContent, m, n, i - <span class="number">1</span>, j, &amp;visited, index + <span class="number">1</span>) || _dfs(board, wordContent, m, n, i, j + <span class="number">1</span>, &amp;visited, index + <span class="number">1</span>) || _dfs(board, wordContent, m, n, i, j - <span class="number">1</span>, &amp;visited, index + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        visited[i][j] = <span class="literal">false</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：经典深度优先搜索，上，下，左，右四个方向。</li><li>时间复杂度： O(mn * 4^(k - 1))， m和n分别代表矩阵的宽和高，k为单词大小</li><li>空间复杂度： O(mn)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/word-search/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本题为 LeetCode 前 100 高频题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 78 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：中等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 78 子集（Top 100）</title>
    <link href="https://fanbaoying.github.io/LeetCode-78-%E5%AD%90%E9%9B%86%EF%BC%88Top-100%EF%BC%89/"/>
    <id>https://fanbaoying.github.io/LeetCode-78-子集（Top-100）/</id>
    <published>2022-09-26T03:45:57.000Z</published>
    <updated>2022-09-26T03:50:40.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本题为 LeetCode 前 100 高频题</strong></p><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 77 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：中等</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p><p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：[[],[0]]</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code> 中的所有元素 <strong>互不相同</strong></li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subsets</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">subsets</span><span class="params">(nums: [Int])</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> res = [[<span class="type">Int</span>]]()</span><br><span class="line">        <span class="keyword">var</span> path = [<span class="type">Int</span>]()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> nums = nums.sorted(by: &lt;)</span><br><span class="line">        </span><br><span class="line">        _dfs(&amp;res, &amp;path, nums, <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">_dfs</span><span class="params">(<span class="keyword">inout</span> res: [[Int]], <span class="keyword">inout</span> <span class="number">_</span> path: [Int], <span class="number">_</span> nums: [Int], <span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        <span class="comment">// termination case</span></span><br><span class="line">        res.append(path)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> index..&lt;nums.<span class="built_in">count</span> &#123;</span><br><span class="line">            path.append(nums[i])</span><br><span class="line">            _dfs(&amp;res, &amp;path, nums, i + <span class="number">1</span>)</span><br><span class="line">            path.removeLast()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：桶排序。</li><li>时间复杂度： O(n^n)</li><li>空间复杂度： O(n)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/subsets/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本题为 LeetCode 前 100 高频题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 77 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：中等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 77 组合</title>
    <link href="https://fanbaoying.github.io/LeetCode-77-%E7%BB%84%E5%90%88/"/>
    <id>https://fanbaoying.github.io/LeetCode-77-组合/</id>
    <published>2022-09-26T03:45:45.000Z</published>
    <updated>2022-09-26T03:51:03.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 76 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：中等</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p><p>你可以按 <strong>任何顺序</strong> 返回答案。</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4, k = 2</span><br><span class="line">输出：</span><br><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1, k = 1</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>1 &lt;= n &lt;= 20</code></li><li><code>1 &lt;= k &lt;= n</code></li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Combinations</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">combine</span><span class="params">(n: Int, <span class="number">_</span> k: Int)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</span><br><span class="line">        <span class="keyword">var</span> res = [[<span class="type">Int</span>]]()</span><br><span class="line">        <span class="keyword">var</span> path = [<span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">let</span> nums = [<span class="type">Int</span>](<span class="number">1</span>...n)</span><br><span class="line">        </span><br><span class="line">        _dfs(nums, &amp;res, &amp;path, <span class="number">0</span>, k)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">_dfs</span><span class="params">(nums: [Int], <span class="keyword">inout</span> <span class="number">_</span> res: [[Int]], <span class="keyword">inout</span> <span class="number">_</span> path: [Int], <span class="number">_</span> index: Int, <span class="number">_</span> k: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> path.<span class="built_in">count</span> == k &#123;</span><br><span class="line">            res.append([<span class="type">Int</span>](path))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> index..&lt;nums.<span class="built_in">count</span> &#123;</span><br><span class="line">            path.append(nums[i])</span><br><span class="line">            _dfs(nums, &amp;res, &amp;path, i + <span class="number">1</span>, k)</span><br><span class="line">            path.removeLast()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：经典深度优先搜索，子集的另一个版本。</li><li>时间复杂度： O(n^n)</li><li>空间复杂度： O(n)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/combinations/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 76 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：中等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 76 最小覆盖子串（Top 100）</title>
    <link href="https://fanbaoying.github.io/LeetCode-76-%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2%EF%BC%88Top-100%EF%BC%89/"/>
    <id>https://fanbaoying.github.io/LeetCode-76-最小覆盖子串（Top-100）/</id>
    <published>2022-09-26T03:45:27.000Z</published>
    <updated>2022-09-26T03:51:25.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本题为 LeetCode 前 100 高频题</strong></p><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 75 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：困难</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p><p><strong>注意：</strong></p><ul><li>对于 <code>t</code> 中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code> 中该字符数量。</li><li>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</li></ul><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;</span><br><span class="line">输出：&quot;BANC&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a&quot;, t = &quot;a&quot;</span><br><span class="line">输出：&quot;a&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 3</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;a&quot;, t = &quot;aa&quot;</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line">解释: t 中两个字符 &apos;a&apos; 均应包含在 s 的子串中，</span><br><span class="line">因此没有符合条件的子字符串，返回空字符串。</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>1 &lt;= s.length, t.length &lt;= 10^5</code></li><li><code>s</code> 和 <code>t</code> 由英文字母组成</li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinimumWindowSubsequence</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">minWindow</span><span class="params">(<span class="number">_</span> S: String, <span class="number">_</span> T: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> m = <span class="type">T</span>.<span class="built_in">count</span>, n = <span class="type">S</span>.<span class="built_in">count</span>, sChars = <span class="type">Array</span>(<span class="type">S</span>), tChars = <span class="type">Array</span>(<span class="type">T</span>)</span><br><span class="line">        <span class="keyword">var</span> dp = <span class="type">Array</span>(repeating: <span class="type">Array</span>(repeating: <span class="number">0</span>, <span class="built_in">count</span>: n + <span class="number">1</span>), <span class="built_in">count</span>: m + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">var</span> start = <span class="number">0</span>, len = n + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...n &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = i + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...m &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1</span>...n &#123;</span><br><span class="line">                <span class="keyword">if</span> tChars[i - <span class="number">1</span>] == sChars[j - <span class="number">1</span>] &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">1</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...n &#123;</span><br><span class="line">            <span class="keyword">if</span> dp[m][i] != <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> i - dp[m][i] + <span class="number">1</span> &lt; len &#123;</span><br><span class="line">                    len = i - dp[m][i] + <span class="number">1</span></span><br><span class="line">                    start = dp[m][i] - <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> len == n + <span class="number">1</span> ? <span class="string">""</span> : <span class="type">String</span>(sChars[start..&lt;start + len])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：桶排序。</li><li>时间复杂度： O(mn)</li><li>空间复杂度： O(mn)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/minimum-window-substring/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本题为 LeetCode 前 100 高频题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 75 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：困难&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 75 颜色分类（Top 100）</title>
    <link href="https://fanbaoying.github.io/LeetCode-75-%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB%EF%BC%88Top-100%EF%BC%89/"/>
    <id>https://fanbaoying.github.io/LeetCode-75-颜色分类（Top-100）/</id>
    <published>2022-09-26T03:45:16.000Z</published>
    <updated>2022-09-26T03:51:48.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本题为 LeetCode 前 100 高频题</strong></p><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 74 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：中等</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给定一个包含红色、白色和蓝色、共 <code>n</code> 个元素的数组 <code>nums</code> ，<strong>原地</strong>对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p><p>我们使用整数 <code>0</code>、 <code>1</code> 和 <code>2</code> 分别表示红色、白色和蓝色。</p><p>必须在不使用库的 sort 函数的情况下解决这个问题。</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,0,2,1,1,0]</span><br><span class="line">输出：[0,0,1,1,2,2]</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,0,1]</span><br><span class="line">输出：[0,1,2]</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 300</code></li><li><code>nums[i]</code> 为 <code>0</code>、<code>1</code> 或 <code>2</code></li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortColors</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sortColors</span><span class="params">(<span class="number">_</span> nums: <span class="keyword">inout</span> [Int])</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> red = <span class="number">0</span>, blue = nums.<span class="built_in">count</span> - <span class="number">1</span>, i = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> i &lt;= blue &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] == <span class="number">0</span> &#123;</span><br><span class="line">                _swap(&amp;nums, i, red)</span><br><span class="line">                red += <span class="number">1</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[i] == <span class="number">1</span> &#123;</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                _swap(&amp;nums, i, blue)</span><br><span class="line">                blue -= <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">_swap</span>&lt;T&gt;<span class="params">(<span class="number">_</span> nums: <span class="keyword">inout</span> [T], <span class="number">_</span> p: Int, <span class="number">_</span> q: Int)</span></span> &#123;</span><br><span class="line">        (nums[p], nums[q]) = (nums[q], nums[p])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：桶排序。</li><li>时间复杂度： O(n)</li><li>空间复杂度： O(1)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/sort-colors/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本题为 LeetCode 前 100 高频题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 74 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：中等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 74 搜索二维矩阵</title>
    <link href="https://fanbaoying.github.io/LeetCode-74-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/"/>
    <id>https://fanbaoying.github.io/LeetCode-74-搜索二维矩阵/</id>
    <published>2022-09-26T03:44:53.000Z</published>
    <updated>2022-09-26T03:52:12.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 73 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：中等</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>编写一个高效的算法来判断 <code>m x n</code> 矩阵中，是否存在一个目标值。该矩阵具有如下特性：</p><ul><li>每行中的整数从左到右按升序排列。</li><li>每行的第一个整数大于前一行的最后一个整数。</li></ul><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><p><img src="https://images.xiaozhuanlan.com/photo/2022/06c35690518617675c110e41424111a0.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><p><img src="https://images.xiaozhuanlan.com/photo/2022/b2d0c81496e82f7135f7b27cb45e0ca6.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>m == matrix.length</code></li><li><code>n == matrix[i].length</code></li><li><code>1 &lt;= m, n &lt;= 100</code></li><li><code>-10^4 &lt;= matrix[i][j], target &lt;= 10^4</code></li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Search2DMatrix</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">searchMatrix</span><span class="params">(<span class="number">_</span> matrix: [[Int]], <span class="number">_</span> target: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> matrix.<span class="built_in">count</span> == <span class="number">0</span> || matrix[<span class="number">0</span>].<span class="built_in">count</span> == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> rowNum = searchRow(matrix, target)</span><br><span class="line">        <span class="keyword">return</span> searchCol(matrix[rowNum], target)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">searchRow</span><span class="params">(<span class="number">_</span> matrix: [[Int]], <span class="number">_</span> target: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">left</span> = <span class="number">0</span>, <span class="keyword">right</span> = matrix.<span class="built_in">count</span> - <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">left</span> + <span class="number">1</span> &lt; <span class="keyword">right</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = (<span class="keyword">right</span> - <span class="keyword">left</span>) / <span class="number">2</span> + <span class="keyword">left</span></span><br><span class="line">            <span class="keyword">if</span> matrix[mid][<span class="number">0</span>] == target &#123;</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> matrix[mid][<span class="number">0</span>] &lt; target &#123;</span><br><span class="line">                <span class="keyword">left</span> = mid</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">right</span> = mid</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> matrix[<span class="keyword">right</span>][<span class="number">0</span>] &lt;= target ? <span class="keyword">right</span> : <span class="keyword">left</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">searchCol</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> target: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">left</span> = <span class="number">0</span>, <span class="keyword">right</span> = nums.<span class="built_in">count</span> - <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">left</span> &lt;= <span class="keyword">right</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> mid = (<span class="keyword">right</span> - <span class="keyword">left</span>) / <span class="number">2</span> + <span class="keyword">left</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &lt; target &#123;</span><br><span class="line">                <span class="keyword">left</span> = mid + <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">right</span> = mid - <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：搜索col，然后二分查找row。</li><li>时间复杂度： O(log(m + n))</li><li>空间复杂度： O(1)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/search-a-2d-matrix/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 73 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：中等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 73 矩阵置零</title>
    <link href="https://fanbaoying.github.io/LeetCode-73-%E7%9F%A9%E9%98%B5%E7%BD%AE%E9%9B%B6/"/>
    <id>https://fanbaoying.github.io/LeetCode-73-矩阵置零/</id>
    <published>2022-09-26T03:44:10.000Z</published>
    <updated>2022-09-26T03:52:35.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 72 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：中等</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给定一个 <code>m x n</code> 的矩阵，如果一个元素为 <code>0</code> ，则将其所在行和列的所有元素都设为 <code>0</code> 。请使用 <strong>原地</strong> 算法。</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><p><img src="https://images.xiaozhuanlan.com/photo/2022/75e47e2b4f10b8996e790a45330093a7.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,1,1],[1,0,1],[1,1,1]]</span><br><span class="line">输出：[[1,0,1],[0,0,0],[1,0,1]]</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><p><img src="https://images.xiaozhuanlan.com/photo/2022/f82ec2407d00d8f53e61dff637d9c711.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]</span><br><span class="line">输出：[[0,0,0,0],[0,4,5,0],[0,3,1,0]]</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>m == matrix.length</code></li><li><code>n == matrix[0].length</code></li><li><code>1 &lt;= m, n &lt;= 200</code></li><li>-2^31 &lt;= matrix[i][j] &lt;= 2^31 - 1`</li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SetMatrixZeroes</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setZeroes</span><span class="params">(<span class="number">_</span> matrix: <span class="keyword">inout</span> [[Int]])</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> rowHasZero = <span class="literal">false</span>, colHasZero = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">let</span> m = matrix.<span class="built_in">count</span>, n = matrix[<span class="number">0</span>].<span class="built_in">count</span></span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;m <span class="keyword">where</span> matrix[i][<span class="number">0</span>] == <span class="number">0</span> &#123;</span><br><span class="line">            colHasZero = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;n <span class="keyword">where</span> matrix[<span class="number">0</span>][i] == <span class="number">0</span> &#123;</span><br><span class="line">            rowHasZero = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;m &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1</span>..&lt;n &#123;</span><br><span class="line">                <span class="keyword">if</span> matrix[i][j] == <span class="number">0</span> &#123;</span><br><span class="line">                    matrix[<span class="number">0</span>][j] = <span class="number">0</span></span><br><span class="line">                    matrix[i][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;m &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1</span>..&lt;n &#123;</span><br><span class="line">                <span class="keyword">if</span> matrix[<span class="number">0</span>][j] == <span class="number">0</span> || matrix[i][<span class="number">0</span>] == <span class="number">0</span> &#123;</span><br><span class="line">                    matrix[i][j] = <span class="number">0</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> rowHasZero &#123;</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;n &#123;</span><br><span class="line">                matrix[<span class="number">0</span>][i] = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> colHasZero &#123;</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;m &#123;</span><br><span class="line">                matrix[i][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：使用第一行和 col 来跟踪行和 col 是否应该设置为 0，记住它们应该与矩阵的其他部分分开。</li><li>时间复杂度： O(n^2)</li><li>空间复杂度： O(1)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/set-matrix-zeroes/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 72 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：中等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 72 编辑距离（Top 100）</title>
    <link href="https://fanbaoying.github.io/LeetCode-72-%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB%EF%BC%88Top-100%EF%BC%89/"/>
    <id>https://fanbaoying.github.io/LeetCode-72-编辑距离（Top-100）/</id>
    <published>2022-09-26T03:43:58.000Z</published>
    <updated>2022-09-26T03:49:20.696Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本题为 LeetCode 前 100 高频题</strong></p><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 71 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：困难</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给你两个单词 <code>word1</code> 和 <code>word2</code>， 请返回将 <code>word1</code> 转换成 <code>word2</code> 所使用的最少操作数  。</p><p>你可以对一个单词进行如下三种操作：</p><ul><li>插入一个字符</li><li>删除一个字符</li><li>替换一个字符</li></ul><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：word1 = &quot;horse&quot;, word2 = &quot;ros&quot;</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">horse -&gt; rorse (将 &apos;h&apos; 替换为 &apos;r&apos;)</span><br><span class="line">rorse -&gt; rose (删除 &apos;r&apos;)</span><br><span class="line">rose -&gt; ros (删除 &apos;e&apos;)</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：word1 = &quot;intention&quot;, word2 = &quot;execution&quot;</span><br><span class="line">输出：5</span><br><span class="line">解释：</span><br><span class="line">intention -&gt; inention (删除 &apos;t&apos;)</span><br><span class="line">inention -&gt; enention (将 &apos;i&apos; 替换为 &apos;e&apos;)</span><br><span class="line">enention -&gt; exention (将 &apos;n&apos; 替换为 &apos;x&apos;)</span><br><span class="line">exention -&gt; exection (将 &apos;n&apos; 替换为 &apos;c&apos;)</span><br><span class="line">exection -&gt; execution (插入 &apos;u&apos;)</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>0 &lt;= word1.length, word2.length &lt;= 500</code></li><li><code>word1</code> 和 <code>word2</code> 由小写英文字母组成</li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EditDistance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">minDistance</span><span class="params">(word1: String, <span class="number">_</span> word2: String)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> aChars = [<span class="type">Character</span>](word1.characters)</span><br><span class="line">        <span class="keyword">let</span> bChars = [<span class="type">Character</span>](word2.characters)</span><br><span class="line">        <span class="keyword">let</span> aLen = aChars.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">let</span> bLen = bChars.<span class="built_in">count</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> dp = <span class="type">Array</span>(<span class="built_in">count</span>: aLen + <span class="number">1</span>, repeatedValue:(<span class="type">Array</span>(<span class="built_in">count</span>: bLen + <span class="number">1</span>, repeatedValue: <span class="number">0</span>)))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...aLen &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>...bLen &#123;</span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">                    dp[i][j] = j</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> j == <span class="number">0</span> &#123;</span><br><span class="line">                    dp[i][j] = i</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> aChars[i - <span class="number">1</span>] == bChars[j - <span class="number">1</span>] &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]) + <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[aLen][bLen]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：2D动态编程，从插入，删除或替换一个字符中找到最小步骤。</li><li>时间复杂度： O(mn)</li><li>空间复杂度： O(mn)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/edit-distance/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本题为 LeetCode 前 100 高频题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 71 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：困难&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 71 简化路径</title>
    <link href="https://fanbaoying.github.io/LeetCode-71-%E7%AE%80%E5%8C%96%E8%B7%AF%E5%BE%84/"/>
    <id>https://fanbaoying.github.io/LeetCode-71-简化路径/</id>
    <published>2022-09-26T03:43:45.000Z</published>
    <updated>2022-09-26T03:48:57.714Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 70 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：中等</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给你一个字符串 <code>path</code> ，表示指向某一文件或目录的 Unix 风格 <strong>绝对路径</strong> （以 <code>&#39;/&#39;</code> 开头），请你将其转化为更加简洁的规范路径。</p><p>在 Unix 风格的文件系统中，一个点（<code>.</code>）表示当前目录本身；此外，两个点 （<code>..</code>） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，<code>&#39;//&#39;</code>）都被视为单个斜杠 <code>&#39;/&#39;</code> 。 对于此问题，任何其他格式的点（例如，<code>&#39;...&#39;</code>）均被视为文件/目录名称。</p><p>请注意，返回的 <strong>规范路径</strong> 必须遵循下述格式：</p><ul><li>始终以斜杠 <code>&#39;/&#39;</code> 开头。</li><li>两个目录名之间必须只有一个斜杠 <code>&#39;/&#39;</code> 。</li><li>最后一个目录名（如果存在）不能 以 <code>&#39;/&#39;</code> 结尾。</li><li>此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 <code>&#39;.&#39;</code> 或 <code>&#39;..&#39;</code>）。</li></ul><p>返回简化后得到的 <strong>规范路径</strong> 。</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：path = &quot;/home/&quot;</span><br><span class="line">输出：&quot;/home&quot;</span><br><span class="line">解释：注意，最后一个目录名后面没有斜杠。</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：path = &quot;/../&quot;</span><br><span class="line">输出：&quot;/&quot;</span><br><span class="line">解释：从根目录向上一级是不可行的，因为根目录是你可以到达的最高级。</span><br></pre></td></tr></table></figure><p><strong>示例 3</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：path = &quot;/home//foo/&quot;</span><br><span class="line">输出：&quot;/home/foo&quot;</span><br><span class="line">解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。</span><br></pre></td></tr></table></figure><p><strong>示例 4</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：path = &quot;/a/./b/../../c/&quot;</span><br><span class="line">输出：&quot;/c&quot;</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>1 &lt;= path.length &lt;= 3000</code></li><li><code>path</code> 由英文字母，数字，<code>&#39;.&#39;</code>，<code>&#39;/&#39;</code> 或 <code>&#39;_&#39;</code> 组成。</li><li><code>path</code> 是一个有效的 Unix 风格绝对路径。</li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimplifyPath</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">simplifyPath</span><span class="params">(<span class="number">_</span> path: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> directories = [<span class="type">String</span>]()</span><br><span class="line">        <span class="keyword">let</span> components = path.<span class="built_in">split</span>(separator: <span class="string">"/"</span>)</span><br><span class="line">        <span class="keyword">for</span> component <span class="keyword">in</span> components &#123;</span><br><span class="line">            <span class="keyword">switch</span> component &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">""</span>: <span class="keyword">break</span> <span class="comment">// do nothing</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"."</span>: <span class="keyword">break</span> <span class="comment">// do nothing, pointing to the current directory</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">".."</span>:</span><br><span class="line">                directories.popLast() <span class="comment">// if empty, does nothing</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                directories.append(<span class="type">String</span>(component))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/"</span> + <span class="type">String</span>(directories.joined(separator: <span class="string">"/"</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：使用堆栈，正常 push， ..流行。</li><li>时间复杂度： O(n)</li><li>空间复杂度： O(n)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/simplify-path/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 70 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：中等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 70 爬楼梯（Top 100）</title>
    <link href="https://fanbaoying.github.io/LeetCode-70-%E7%88%AC%E6%A5%BC%E6%A2%AF%EF%BC%88Top-100%EF%BC%89/"/>
    <id>https://fanbaoying.github.io/LeetCode-70-爬楼梯（Top-100）/</id>
    <published>2022-09-26T03:43:33.000Z</published>
    <updated>2022-09-26T03:48:31.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本题为 LeetCode 前 100 高频题</strong></p><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 69 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：简单</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。</p><p>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：2</span><br><span class="line">解释：有两种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶</span><br><span class="line">2. 2 阶</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：3</span><br><span class="line">解释：有三种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶 + 1 阶</span><br><span class="line">2. 1 阶 + 2 阶</span><br><span class="line">3. 2 阶 + 1 阶</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>1 &lt;= n &lt;= 45</code></li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClimbingStairs</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">climbStairs</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span> || n == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> prev = <span class="number">0</span>, post = <span class="number">1</span>, total = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...n &#123;</span><br><span class="line">            total = prev + post</span><br><span class="line">            </span><br><span class="line">            prev = post</span><br><span class="line">            post = total</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> total</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：动态编程，<code>dp = dp + dp[i - 2]</code>。</li><li>时间复杂度： O(n)</li><li>空间复杂度： O(1)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/climbing-stairs/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本题为 LeetCode 前 100 高频题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 69 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：简单&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
</feed>
