<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Swift社区</title>
  
  <subtitle>做最好的 Swift 社区</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fanbaoying.github.io/"/>
  <updated>2022-08-29T03:31:19.979Z</updated>
  <id>https://fanbaoying.github.io/</id>
  
  <author>
    <name>Swift社区</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Swift 周报 第十二期</title>
    <link href="https://fanbaoying.github.io/Swift-%E5%91%A8%E6%8A%A5-%E7%AC%AC%E5%8D%81%E4%BA%8C%E6%9C%9F/"/>
    <id>https://fanbaoying.github.io/Swift-周报-第十二期/</id>
    <published>2022-08-29T03:29:50.000Z</published>
    <updated>2022-08-29T03:31:19.979Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/SwiftCommunityRes/image/blob/main/weekly/SwiftBanner.png?raw=true" alt=""></p><p>周报仓库：<a href="https://github.com/SwiftCommunityRes" target="_blank" rel="noopener">https://github.com/SwiftCommunityRes</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本期是 Swift 编辑组自主整理周报的第三期</strong>，每个模块还在调整磨合期。各位读者如果有好的提议，欢迎在文末留言。</p><p>Swift 周报在 <a href="https://github.com/SwiftCommunityRes/SwiftWeekly" title="SwiftWeekly" target="_blank" rel="noopener">GitHub 开源</a>，欢迎提交 issue，投稿或推荐内容。目前计划每两周周一发布，欢迎志同道合的朋友一起加入周报整理。</p><p>夏夜恬静月色柔，绵绵思绪埋心头，<strong>Swift社区</strong>常逗留，今夕明朝百事欧。欧拉欧拉👊👊👊</p><blockquote><p><strong>周报精选</strong></p><p>新闻和社区：苹果曝出严重安全漏洞！黑客或可完全接管设备</p><p>提案：改进指针系列初始化和缓冲区</p><p>Swift 论坛：使用 Swift 5.5 / Xcode 14 构建后崩溃</p><p>推荐博文：iOS16 引入 SwiftUI Charts</p></blockquote><a id="more"></a><h2 id="新闻和社区"><a href="#新闻和社区" class="headerlink" title="新闻和社区"></a>新闻和社区</h2><h3 id="苹果曝出严重安全漏洞！黑客或可完全接管设备"><a href="#苹果曝出严重安全漏洞！黑客或可完全接管设备" class="headerlink" title="苹果曝出严重安全漏洞！黑客或可完全接管设备"></a>苹果曝出严重安全漏洞！黑客或可完全接管设备</h3><p>当地时间 8 月 19 日（周五），苹果公司（Apple）呼吁用户立刻下载最新更新。就在两天前，该公司报告了一个重大的安全漏洞，据称可以让黑客接管苹果设备。<br>在周三发布的安全更新中，苹果表示该漏洞可能已被用于攻击行为。</p><p>“这就是我们所说的零日漏洞，也就是在公司发现并能够做出回应之前，已经被黑客所使用过的漏洞，” 美国麦迪安网络安全公司（Mandiant）的高级威胁情报顾问杰米·科利尔（Jamie Collier）介绍道。</p><p>据介绍，受本次漏洞影响的设备涵盖了几乎所有的苹果产品。其中，手机包括 iPhone 6S 及以后的型号；平板包括第五代及以后的 iPad，所有 iPad Pro，以及 iPad Air 2；电脑则是运行 MacOS Monterey 的 Mac。此外，该漏洞还能影响到部分型号的 iPod。@看看新闻</p><h3 id="App-和-app-内购买项目即将实行税率和价格调整"><a href="#App-和-app-内购买项目即将实行税率和价格调整" class="headerlink" title="App 和 app 内购买项目即将实行税率和价格调整"></a>App 和 app 内购买项目即将实行税率和价格调整</h3><p>2022 年 8 月 19 日的下周开始，加纳和土耳其 App Store 的 App 及 App 内购买项目 (自动续期订阅除外) 的价格将有所提高。加纳的价格提升将包含 <strong>12.5%</strong> 的新增值税和 <strong>6%</strong> 的附加税。</p><p>您的收益将随之进行调整，并会根据不含税的价格来进行计算。《付费 App 协议》的附录 B 已更新，表明 Apple 在加纳征收和汇付适用税款。</p><p>此外，如果您在 App Store Connect. 中选择了适当的税收类别，爱沙尼亚的电子出版物的收益已经进行了调整，以反映增值税从 <strong>9%</strong> 下调至 5%。</p><p>以上调整生效后，在“我的 App”中“价格与销售范围”部分会随即更新。您可以随时在 App Store Connect 中更改您的 App 和 App 内购买项目的价格 (包括自动续期订阅)。如果您有提供订阅项目，您可以选择为现有订阅者保留当前价格。</p><p>苹果发言人没有立即透露这个电池百分比调整是否会延续到 iOS 16 的最终版本。这次更新目前只出现在开发者版和公测版。新 iOS 系统将于今年秋天发布，可能是在 9 月份，届时苹果预计将发布 <strong>iPhone 14</strong>。@凤凰网科技</p><h3 id="苹果-AppleOne-将捆绑销售电话套餐：英国运营商EE是第一家"><a href="#苹果-AppleOne-将捆绑销售电话套餐：英国运营商EE是第一家" class="headerlink" title="苹果 AppleOne 将捆绑销售电话套餐：英国运营商EE是第一家"></a>苹果 AppleOne 将捆绑销售电话套餐：英国运营商EE是第一家</h3><p>英国运营商 EE 近日宣布，它将成为第一家将苹果 Apple One 与电话套餐捆绑在一起的运营商。EE表示，苹果 Apple One 将从 8 月 31 日起包含在其 Full Works 计划中。该计划将包括 Apple One 的个人版订阅，每月费用为 14.95 英镑（约 122.44 元人民币）。</p><p>苹果 Apple One 订阅包将最多六项苹果服务捆绑到一个订阅中，个人版单独订阅价格为每月 14.95 美元（约 101.51 元人民币），包括四项苹果服务：50GB 的 iCloud+、Apple Music、Apple TV+ 和 Apple Arcade 订阅。</p><p>iPhone13 系列成美国最畅销手机机型# 2022 年 Q2 美国最畅销的 10 款智能手机机型，包括苹果、三星、联想三个品牌。其中，苹果 iPhone 13、iPhone 13 Pro Max、iPhone 13 Pro 包揽前三位。三星 Galaxy S21、Galaxy S22 / Ultra 等 5 款新机进入畅销榜前十，Galaxy S22 Ultra 5G 为 2022 年 Q2 美国最畅销的安卓机型。(来源：(来源： 极目新闻))</p><h3 id="赔偿-2-亿元！苹果因搜包耽误员工下班，遭-1-万多人集体起诉"><a href="#赔偿-2-亿元！苹果因搜包耽误员工下班，遭-1-万多人集体起诉" class="headerlink" title="赔偿 2 亿元！苹果因搜包耽误员工下班，遭 1 万多人集体起诉"></a>赔偿 2 亿元！苹果因搜包耽误员工下班，遭 1 万多人集体起诉</h3><p>据路透社 8 月 15 日报道消息，当地时间 13 日，美国加州一名法官已经签署了苹果公司的 3050 万美元（约合人民币 2 亿元）的和解协议。该诉讼持续 9 年，诉讼称苹果公司没有为下班时检查员工行李的时间付费。</p><p>起诉源于苹果之前的一项规定，这项规定要求在下班时检查苹果员工的包和个人物品。2013 年，一群苹果公司员工因被迫接受行李检查起诉苹果公司，称公司没有为搜包的时间付费。原告称，苹果零售员工在下班后通常要等几分钟，有时甚至更长时间，才能检查完他们的行李，然后才能离开他们工作的商店。在被提起诉讼后，苹果不再对员工下班前进行搜包检查。</p><p>据纽约邮报 2015 年 6 月的报道，公布的一份法庭文件显示，至少有两名苹果零售店员工直接向首席执行官库克投诉，称该公司将检查零售员工行李作为安全预防措施的规定令人尴尬和有辱人格。</p><p>集体诉讼于 2015 年被驳回，随后他们决定上诉。州法院在 2020 年对苹果作出裁决，称期望员工不带个人物品上班是不切实际的。联邦法院随后恢复了此案，美国地方法院法官威廉·阿尔苏普去年表示，他计划对原告作出简易判决，并下令对损害赔偿进行审判。</p><p>8 月 13 日，阿尔苏普在集体诉讼中批准了和解协议。这标志着该州历史上最大的安全搜查案和解。3050 万美元的和解金将支付给包括居住在加州的 14683 名苹果员工在内的一个群体，平均每位员工获得 1328 美元赔偿金。(来源：极目新闻)</p><h2 id="提案"><a href="#提案" class="headerlink" title="提案"></a>提案</h2><h3 id="通过的提案"><a href="#通过的提案" class="headerlink" title="通过的提案"></a>通过的提案</h3><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0367-conditional-attributes.md" title="SE-0367" target="_blank" rel="noopener">SE-0367</a> <strong>优化新属性的条件编译</strong> 提案已通过。该提案已在上期周报正在审查的提案模块做了详细介绍。</p><h3 id="正在审查的提案"><a href="#正在审查的提案" class="headerlink" title="正在审查的提案"></a>正在审查的提案</h3><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0371-isolated-synchronous-deinit.md" title="SE-0371" target="_blank" rel="noopener">SE-0371</a> <strong>Isolated synchronous deinit</strong> 提案正在审查。</p><p>此功能允许 <code>deinit</code> 中 <code>actor</code> 和 <code>global-actor</code> 的 <code>isolated</code> 类型 (GAIT)， 访问 <code>non-sendable</code> 的 <code>isolated</code> 状态，从而解除 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0327-actor-initializers.md" title="SE-0327" target="_blank" rel="noopener">SE-0327</a> 施加的限制。这是通过在 <code>__deallocating_deinit()</code> 中实现，为跳转到执行程序提供运行时支持。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0370-pointer-family-initialization-improvements.md" title="SE-0370" target="_blank" rel="noopener">SE-0370</a> <strong>改进指针系列初始化和缓冲区</strong> 提案正在审查。</p><p><code>UnsafeMutablePointer</code> 系列中的类型通常需要手动管理内存分配，包括管理其初始化状态。但是，并非该系列中的每个相关类型都具有一定的功能来管理内存的初始化状态。分配后涉及的状态如下：</p><ol><li>没有绑定和没有初始化（从 <code>UnsafeMutableRawPointer.allocate()</code> 返回）</li><li>绑定到类型，没有未初始化（从 <code>UnsafeMutablePointer&lt;T&gt;.allocate()</code> 返回）</li><li>绑定到类型，并初始化</li></ol><p>只要内存未初始化，就可以安全地释放内存。</p><p>我们打算完善该系列中每个相关成员的初始化功能：<code>UnsafeMutablePointer</code>、<code>UnsafeMutableRawPointer</code>、<code>UnsafeMutableBufferPointer</code>、<code>UnsafeMutableRawBufferPointer</code>、<code>Slice&lt;UnsafeMutableBufferPointer&gt;</code> 和 <code>Slice&lt;UnsafeMutableRawBufferPointer&gt;</code>。该功能将允许在更多种类的情况下管理初始化状态，包括更轻松地处理部分初始化的缓冲区。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0365-implicit-self-weak-capture.md" title="SE-0365" target="_blank" rel="noopener">SE-0365</a> <strong>增加对协议 CustomDebugStringConvertible 到 AnyKeyPath 的一致性</strong> 提案正在审查。</p><h2 id="Swift论坛"><a href="#Swift论坛" class="headerlink" title="Swift论坛"></a>Swift论坛</h2><p>1) 围绕 <a href="https://forums.swift.org/t/pitch-async-buffered-channel/59854" title="Async buffered channel" target="_blank" rel="noopener">提议 Async buffered channel</a> 进行的讨论</p><p>内容概括：创建一个总集 channel 可以在 Tasks 之间交流，主要用于一个 task 产生的 value 可以被另一个 task 使用。</p><p>2) <a href="https://forums.swift.org/t/new-crash-after-building-with-swift-5-5-xcode-14/59798" title="使用 Swift 5.5 / Xcode 14 构建后崩溃" target="_blank" rel="noopener">新问题：使用 Swift 5.5 / Xcode 14 构建后崩溃</a></p><p>内容概括：swift 代码使用地址引用传入 NSMutableArray 类型给 Objective-C，Objective-C会返回 Array 的地址给 Swift 代码，当 iteration loop 返回的 array 时发生崩溃。可能原因：Swift ARC 内存优化释放指针引起的崩溃。</p><p>3) <a href="https://forums.swift.org/t/a-new-swift-parser-for-swiftsyntax/59813" title="用于 SwiftSyntax 的新 Swift 解析器" target="_blank" rel="noopener">用于 SwiftSyntax 的新 Swift 解析器</a></p><p>内容概括：SwiftSyntax 是一个 Swift Package，它可以解析 Swift 代码成一个树状的语义，可以对树进行操控也可以将树状的语义变回 Swift 代码。目前 SwiftSyntaxParser 是一个基于 C++ 库并且 Swift compiler 非常依赖于 C++ 库。<br>项目目标：完全取代 Swift parser 对 C++ 库的依赖</p><p>4) 围绕 <a href="https://forums.swift.org/t/pitch-pointer-family-initialization-improvements-better-buffer-slices/55689" target="_blank" rel="noopener">SE-0370 pointer family initialization improvements and better buffer slice</a> 展开的讨论</p><p>5) <a href="https://forums.swift.org/t/pitch-document-sorting-as-stable/59880" title="提议：标准库的稳定排序" target="_blank" rel="noopener">提议：标准库的稳定排序</a></p><p>稳定排序是：在比较相同元素的情况下保持输入的顺序：例子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> roster = [</span><br><span class="line">   <span class="type">Player</span>(first: <span class="string">"Sam"</span>, last: <span class="string">"Coffey"</span>),</span><br><span class="line">   <span class="type">Player</span>(first: <span class="string">"Ashley"</span>, last: <span class="string">"Hatch"</span>),</span><br><span class="line">   <span class="type">Player</span>(first: <span class="string">"Kristie"</span>, last: <span class="string">"Mewis"</span>),</span><br><span class="line">   <span class="type">Player</span>(first: <span class="string">"Ashley"</span>, last: <span class="string">"Sanchez"</span>),</span><br><span class="line">   <span class="type">Player</span>(first: <span class="string">"Sophia"</span>, last: <span class="string">"Smith"</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">roster.<span class="built_in">sort</span>(by: &#123; $<span class="number">0</span>.first &lt; $<span class="number">1</span>.first &#125;)</span><br><span class="line"><span class="comment">// roster == [</span></span><br><span class="line"><span class="comment">//    Player(first: "Ashley", last: "Hatch"),</span></span><br><span class="line"><span class="comment">//    Player(first: "Ashley", last: "Sanchez"),</span></span><br><span class="line"><span class="comment">//    Player(first: "Kristie", last: "Mewis"),</span></span><br><span class="line"><span class="comment">//    Player(first: "Sam", last: "Coffey"),</span></span><br><span class="line"><span class="comment">//    Player(first: "Sophia", last: "Smith"),</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><p>从例子中看出有两个一样的 first: “Ashley”, 由于输入 “Hatch” 在 “Sanchez” 之前, 稳定排序之后顺序不变。</p><p>6) <a href="https://www.reddit.com/r/swift/comments/wwgblk/best_way_to_run_a_function_only_once_while/" title="访问变量时只运行一次函数的最佳方法" target="_blank" rel="noopener">访问变量时只运行一次函数的最佳方法</a></p><p>7) <a href="https://www.reddit.com/r/swift/comments/wvpxmn/what_is_the_best_way_to_make_sure_a_nested/" title="确保 viewDidLoad 中的嵌套闭包在函数运行之前完成的最佳方法" target="_blank" rel="noopener">确保 viewDidLoad 中的嵌套闭包在函数运行之前完成的最佳方法</a></p><h2 id="推荐博文"><a href="#推荐博文" class="headerlink" title="推荐博文"></a>推荐博文</h2><p><a href="https://swdevnotes.com/swift/2022/create-a-line-chart-with-swiftui-charts-in-ios-16/" title="在 iOS 16 中使用 SwiftUI Charts 创建折线图" target="_blank" rel="noopener">在 iOS 16 中使用 SwiftUI Charts 创建折线图</a></p><p><strong>摘要：</strong> Apple 在 <code>WWWDC 2022</code> 上推出了 <code>SwiftUI Charts</code>，在 <code>SwiftUI</code> 视图中实现图表功能变得非常容易。如下图：</p><p><img src="https://files.mdnice.com/user/17787/67441474-df56-42c8-8ce4-ec4e3a1f1a25.png" alt=""></p><p><a href="https://swdevnotes.com/swift/2022/customise-a-line-chart-with-swiftui-charts-in-ios-16/" title="在 iOS 16 中使用 SwiftUI Charts 自定义折线图" target="_blank" rel="noopener">在 iOS 16 中使用 SwiftUI Charts 自定义折线图</a></p><p><strong>摘要：</strong> iOS 16 中引入的 SwiftUI Charts，可以快速的实现各种统计图，通过图表直观的呈现数据。本文介绍了几种自定义的折线统计图。</p><p><a href="https://swdevnotes.com/swift/2021/how-to-create-bar-chart-swiftui/" title="如何在 SwiftUI 中创建条形图" target="_blank" rel="noopener">如何在 SwiftUI 中创建条形图</a></p><p><strong>摘要：</strong> 本文展示了如何创建一个垂直条形图，其中 Y 轴表示每个类型的值。如下图：</p><p><img src="https://files.mdnice.com/user/17787/369e7b63-cf7c-40bc-816d-d33e2bb6d137.png" alt=""></p><p><a href="https://swdevnotes.com/swift/2021/horizontal-bar-chart-in-swiftui/" title="货拉拉 iOS 司机端线程治理总结" target="_blank" rel="noopener">如何在 SwiftUI 中创建水平条形图</a></p><p><strong>摘要：</strong> 根据 UI 设计以及交互需求，有时候统计图需要调整 X 和 Y 轴。本文主要介绍了如何创建水平的条形图，如下图：</p><p><img src="https://files.mdnice.com/user/17787/190c7254-5ee2-4f01-a298-4594d21acfb3.gif" alt=""></p><p><a href="https://github.com/SwiftCommunityRes/article-ios/blob/main/resource/%E4%BD%BF%E7%94%A8%20SwiftUI%20%E7%9A%84%20Eager%20Grids.md" title="使用 SwiftUI 的 Eager Grids" target="_blank" rel="noopener">使用 SwiftUI 的 Eager Grids</a></p><p><strong>摘要：</strong> 本篇文章主要讲解如何使用 <code>Eager Grids</code> 绘制网格视图，其中讲解了十几种网格的实现方法，并详细介绍了网格的实现原理。</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p><strong>Swift社区</strong>是由 Swift 爱好者共同维护的公益组织，我们在国内以微信公众号的运营为主，我们会分享以 <strong>Swift实战</strong>、<strong>SwiftUl</strong>、<strong>Swift基础</strong>为核心的技术内容，也整理收集优秀的学习资料。</p><p>欢迎关注公众号:Swift社区，后台点击进群，可以进入我们社区的交流讨论群。希望我们Swift社区是大家在网络空间中的另一份共同的归属。</p><p><img width="500" alt="Swift社区" src="https://user-images.githubusercontent.com/24238160/132703149-34121c6c-fd18-491c-a697-58a0fabf3060.png"></p><p>特别感谢 Swift社区 编辑部的每一位编辑，感谢大家的辛苦付出，为 Swift社区 提供优质内容，为 Swift 语言的发展贡献自己的力量。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/SwiftCommunityRes/image/blob/main/weekly/SwiftBanner.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;周报仓库：&lt;a href=&quot;https://github.com/SwiftCommunityRes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/SwiftCommunityRes&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本期是 Swift 编辑组自主整理周报的第三期&lt;/strong&gt;，每个模块还在调整磨合期。各位读者如果有好的提议，欢迎在文末留言。&lt;/p&gt;
&lt;p&gt;Swift 周报在 &lt;a href=&quot;https://github.com/SwiftCommunityRes/SwiftWeekly&quot; title=&quot;SwiftWeekly&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub 开源&lt;/a&gt;，欢迎提交 issue，投稿或推荐内容。目前计划每两周周一发布，欢迎志同道合的朋友一起加入周报整理。&lt;/p&gt;
&lt;p&gt;夏夜恬静月色柔，绵绵思绪埋心头，&lt;strong&gt;Swift社区&lt;/strong&gt;常逗留，今夕明朝百事欧。欧拉欧拉👊👊👊&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;周报精选&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新闻和社区：苹果曝出严重安全漏洞！黑客或可完全接管设备&lt;/p&gt;
&lt;p&gt;提案：改进指针系列初始化和缓冲区&lt;/p&gt;
&lt;p&gt;Swift 论坛：使用 Swift 5.5 / Xcode 14 构建后崩溃&lt;/p&gt;
&lt;p&gt;推荐博文：iOS16 引入 SwiftUI Charts&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Swift 周报" scheme="https://fanbaoying.github.io/categories/Swift-%E5%91%A8%E6%8A%A5/"/>
    
    
      <category term="Swift" scheme="https://fanbaoying.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 周报 第十一期</title>
    <link href="https://fanbaoying.github.io/Swift-%E5%91%A8%E6%8A%A5%E7%AC%AC%E5%8D%81%E4%B8%80%E6%9C%9F/"/>
    <id>https://fanbaoying.github.io/Swift-周报第十一期/</id>
    <published>2022-08-25T03:43:01.000Z</published>
    <updated>2022-08-25T04:14:01.884Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/SwiftCommunityRes/image/blob/main/weekly/SwiftBanner.png?raw=true" alt=""></p><p>周报仓库：<a href="https://github.com/SwiftCommunityRes" target="_blank" rel="noopener">https://github.com/SwiftCommunityRes</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本期是 Swift 编辑组自主整理周报的第二期</strong>，每个模块还在调整磨合期。各位读者如果有好的提议，欢迎在文末留言。</p><p>Swift 周报在 <a href="https://github.com/SwiftCommunityRes/SwiftWeekly" title="SwiftWeekly" target="_blank" rel="noopener">GitHub 开源</a>，欢迎提交 issue，投稿或推荐内容。目前计划每两周周一发布，欢迎志同道合的朋友一起加入周报整理。</p><p>平凡的八月，不平凡的世界，你若落后，必定挨打，你若前进，方得始终！<strong>Swift社区</strong>，给你最新的指引，给你最真的铠甲！</p><blockquote><p><strong>周报精选</strong></p><p>新闻和社区：已消失 5 年 iPhone 电量百分比为何现在回归</p><p>提案：和脚本语言相媲美的字符串算法</p><p>Swift 论坛：你是否希望支持在 Windows 上构建 Swift</p><p>推荐博文：Swift社区 成立文章仓库</p></blockquote><a id="more"></a><h2 id="新闻和社区"><a href="#新闻和社区" class="headerlink" title="新闻和社区"></a>新闻和社区</h2><h3 id="已消失-5-年-iPhone-电量百分比为何现在回归？"><a href="#已消失-5-年-iPhone-电量百分比为何现在回归？" class="headerlink" title="已消失 5 年 iPhone 电量百分比为何现在回归？"></a>已消失 5 年 iPhone 电量百分比为何现在回归？</h3><p>2017年，iPhone X 以后，电量百分比一直隐藏在下拉通知栏，而现在，在最新测试版的 iOS 16系统中，电量百分比以数字形式被写入电池图标内。</p><p><img src="https://github.com/SwiftCommunityRes/image/blob/main/weekly/weekly1101.png?raw=true" alt=""></p><p>如果苹果在下一代 iPhone 上增加一个常亮显示功能，那么这种电池百分比调整也会很有用，因为用户可以在不碰手机的情况下就可查看电池状态。还有传言称，iPhone14 系列将会在 Pro 机型上采用挖孔屏，顶部更大的显示面积或许也是苹果复活百分比显示的原因之一。</p><p>苹果发言人没有立即透露这个电池百分比调整是否会延续到 iOS 16 的最终版本。这次更新目前只出现在开发者版和公测版。新iOS系统将于今年秋天发布，可能是在 9 月份，届时苹果预计将发布iPhone 14。@凤凰网科技</p><h3 id="线上讲座：App-内购买的新功能"><a href="#线上讲座：App-内购买的新功能" class="headerlink" title="线上讲座：App 内购买的新功能"></a>线上讲座：App 内购买的新功能</h3><p>诚挚邀请您参加我们于 2022 年 8 月 18 日(周四)在线举办的“线上讲座：App 内购买的新功能”。 </p><p>建议参会对象：开发人员。</p><p>注册成功并收到活动确认函后方可参会。名额有限，报满即止。<br>设计开发加速器活动注册指南：<br><a href="https://essentials.applesurveys.com/WRQualtricsControlPanel_rel/File.php?F=F_a4rFfRXziNGhoAm" target="_blank" rel="noopener">https://essentials.applesurveys.com/WRQualtricsControlPanel_rel/File.php?F=F_a4rFfRXziNGhoAm</a></p><p>请持续关注 Apple 开发者官网：<a href="https://developer.apple.com/cn/accelerator/" target="_blank" rel="noopener">https://developer.apple.com/cn/accelerator/</a><br>我们会不定期地发布下期活动信息，届时可自行申请，获得批准后即可参加活动。 </p><p>了解如何使您的 App 内购买体验更加完美, 并探索 StoreKit 2 和 App Store Server API 的增强功能和 App Store Server 通知的改进。了解如何利用 App Transaction API 验证 App 的购买，为 StoreKit 模型添加属性，并在交易中保留 App 的 applicationUsername。如果您是服务器端开发人员，我们将向您展示如何充分利用 App Store 服务器通知、检索用户交易历史的其他方法，以及当您的服务器出现故障时如何进行恢复。了解如何迁移到最新的 App Store Server API 并整合 App Store 服务器通知。</p><p>在线活动议程：<br>10:00-10:30 StoreKit 2 的新功能<br>10:30-11:00 App Store 服务器 API 和服务器通知新功能 </p><h3 id="外媒：苹果要供应商从台湾地区向中国大陆供货时严格遵守中方规定"><a href="#外媒：苹果要供应商从台湾地区向中国大陆供货时严格遵守中方规定" class="headerlink" title="外媒：苹果要供应商从台湾地区向中国大陆供货时严格遵守中方规定"></a>外媒：苹果要供应商从台湾地区向中国大陆供货时严格遵守中方规定</h3><p>【环球时报综合报道】在美国众议院议长佩洛西窜访台湾遭谴责之际，美国科技巨头苹果公司已要求其供应商从台湾地区向中国大陆供货时严格遵守中国海关有关规定。截至记者 5 日发稿时，苹果方面尚未就有关报道予以置评。</p><p>《日经亚洲》5 日引述消息人士的说法报道称，苹果公司告诉其供应商，中国海关要求台湾地区生产的元件进入大陆时必须标注产地为“中国台湾”或“中国台北”。苹果公司敦促供应商严肃对待此事，避免因违规导致供货受影响。报道称，苹果公司供应商目前正在为新款iPhone和今秋其他苹果新品的元件供货做准备。消息人士称，如在进口文件、表格中或包装箱上将商品生产地标注为“台湾”，中国海关可能将商品扣留检查，违规商品将被处以 4000 元人民币罚款，或被拒绝通关。</p><h3 id="Apple-Entrepreneur-Camp-已开放申请，欢迎女性、黑人和西班牙裔-拉丁裔创业者参加"><a href="#Apple-Entrepreneur-Camp-已开放申请，欢迎女性、黑人和西班牙裔-拉丁裔创业者参加" class="headerlink" title="Apple Entrepreneur Camp 已开放申请，欢迎女性、黑人和西班牙裔/拉丁裔创业者参加"></a>Apple Entrepreneur Camp 已开放申请，欢迎女性、黑人和西班牙裔/拉丁裔创业者参加</h3><p><img src="https://github.com/SwiftCommunityRes/image/blob/main/weekly/weekly1102.png?raw=true" alt=""></p><p>Apple Entrepreneur Camp 旨在为 App 驱动型组织中的少数群体创业者及开发者提供支持，助力其研发新一代的前沿 App 并开拓全球网络，鼓励这些创业者在技术领域不断探索并取得持续发展。</p><p>三组面向女性、黑人以及西班牙裔及拉丁裔创业者的在线课程将在 2022 年 10 月开展，欢迎选择合适的一组提交申请。课程期间，Apple 工程师将为学员提供编程指导，Apple 高层也将作为导师分享见解、启发灵感。申请截止日期为 2022 年 8 月 24 日。</p><h2 id="提案"><a href="#提案" class="headerlink" title="提案"></a>提案</h2><h3 id="通过的提案"><a href="#通过的提案" class="headerlink" title="通过的提案"></a>通过的提案</h3><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0365-implicit-self-weak-capture.md" title="SE-0365" target="_blank" rel="noopener">SE-0365</a> <strong>在 <code>self</code> 被解包后，允许为<code>weak self</code>捕获隐式<code>self</code></strong> 提案已通过。</p><p>从 <strong>SE-0269</strong> 开始，当 <code>self</code> 在捕获列表中显式写入时，允许在闭包中使用<strong>隐式 self</strong>。 应该将这种方式支持扩展到 <code>weak self</code> 捕获，并且只要 <code>self</code> 已解包，就允许<strong>隐式 self</strong> 。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> button: <span class="type">Button</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">        button.tapHandler = &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">            dismiss()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dismiss</span><span class="params">()</span></span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0362-piecemeal-future-features.md" title="SE-0362" target="_blank" rel="noopener">SE-0362</a> <strong>即将到来的语言改进的逐渐采用</strong> 提案已通过。该提案已在上期周报正在审查的提案模块做了详细介绍。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0357-regex-string-processing-algorithms.md" title="SE-0357" target="_blank" rel="noopener">SE-0357</a> <strong>基于正则表达式的字符串算法</strong> 提案已通过。</p><p>与其他比较常用的编程语言或者脚本语言相比，Swift 标准库处理字符串算法的功能明显不足。其中一些功能可以在 <code>NSString</code> 中找到，但是这些基础的功能应该在 Swift 标准库中完善。</p><p><strong>本提案中的建议如下：</strong></p><ol><li>新增加到标准库的正则表达式字符串算法，功能性和实用性要和脚本语言相媲美</li><li>就子序列而言，这些算法与通用 <code>Collection</code> 相同</li><li><code>CustomConsumingRegexComponent</code> 协议允许第三方库提供 <code>industrial-strength</code> 作为正则表达式的可混合组件</li></ol><h3 id="正在审查的提案"><a href="#正在审查的提案" class="headerlink" title="正在审查的提案"></a>正在审查的提案</h3><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0368-staticbigint.md" title="SE-0368" target="_blank" rel="noopener">SE-0368</a> <strong>StaticBigInt</strong> 正在审查</p><p>Swift 源代码中的整数文字可以表示任意大的值。但是符合 <code>ExpressibleByIntegerLiteral</code> 协议的标准库之外的类型，在实际使用过程中受限于使用多大的文字值来构建。</p><p>因为传递给 <code>init(integerLiteral:)</code> 的值必须是标准库支持的类型，因此很难在标准库之外编写新的整数类型。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0367-conditional-attributes.md" title="SE-0367" target="_blank" rel="noopener">SE-0367</a> <strong>优化新属性的条件编译</strong> 正在审查</p><p>随着时间的推移，Swift 引入了一些新的属性来优化性能，提供更多的表达能力和编译检查等功能。但是在现有的源码中增加新属性意味着旧的编译器无法进行编译。</p><p>可以使用条件编译来解决这个问题，但是实现代码冗长很不方便。例如，使用 #if 检查编译器版本确定是否可以使用 <code>@preconcurrency</code> 属性，代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">if</span> compiler(&gt;=<span class="number">5.6</span>)</span><br><span class="line">@preconcurrency <span class="class"><span class="keyword">protocol</span> <span class="title">P</span>: <span class="title">Sendable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">g</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">P</span>: <span class="title">Sendable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">g</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>通过上面的代码可以看到，这样实现会有很多重复的代码。另外 <code>Swift 5.6</code> 编译器是第一个包含 <code>@preconcurrency</code> 属性的编译器，但是有可能这个属性在 5.6 以前就被启用，或者在 <code>Swift 5.6</code> 的开发过程中启用，通过判断版本号就会有误差。建议采用下面的代码方式来规避这些问题。代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">if</span> hasAttribute(preconcurrency)</span><br><span class="line">@preconcurrency</span><br><span class="line">#endif</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">P</span>: <span class="title">Sendable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">g</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0366-move-function.md" title="SE-0366" target="_blank" rel="noopener">SE-0366</a> <strong>代码上下文新增敏感关键字 move</strong> 正在审查</p><p>在代码中使用 <code>move</code> 关键字，可以结束 <code>let</code>、<code>var</code> 或者 <code>consuming</code> 函数参数的生命周期。并通过编译器实时做出判断强制执行此操作。示例代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">useX(x) <span class="comment">// do some stuff with local variable x</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Ends lifetime of x, y's lifetime begins.</span></span><br><span class="line"><span class="keyword">let</span> y = move x <span class="comment">// [1]</span></span><br><span class="line"></span><br><span class="line">useY(y) <span class="comment">// do some stuff with local variable y</span></span><br><span class="line">useX(x) <span class="comment">// error, x's lifetime was ended at [1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Ends lifetime of y, destroying the current value.</span></span><br><span class="line">move y <span class="comment">// [2]</span></span><br><span class="line">useX(x) <span class="comment">// error, x's lifetime was ended at [1]</span></span><br><span class="line">useY(y) <span class="comment">// error, y's lifetime was ended at [2]</span></span><br></pre></td></tr></table></figure><h2 id="Swift论坛"><a href="#Swift论坛" class="headerlink" title="Swift论坛"></a>Swift论坛</h2><p>1) <a href="https://forums.swift.org/t/swift-as-a-cross-platform-language-and-windows-support/12547/9" title="Swift as a cross-platform language and Windows support" target="_blank" rel="noopener">关于支持在 Windows 上构建 Swift 的讨论</a></p><p>2) <a href="https://forums.swift.org/t/how-to-read-uint32-from-a-data/59431" title="How To Read UInt32 from a Data?" target="_blank" rel="noopener">如何从数据中读取 UInt32</a></p><p>3) <a href="https://forums.swift.org/t/any-way-to-show-what-led-to-a-dependency/59512" title="Any way to show what led to a dependency?" target="_blank" rel="noopener">有什么方法可以显示依赖发生的原因</a></p><p>是否有 <code>SPM</code> 命令来显示依赖项是如何产生的？可以显示指定 Swift 包在构建中生成的所有依赖路径。</p><p>4) <a href="https://forums.swift.org/t/how-do-delay-the-response-to-an-async-method/59504" title="How do delay the response to an async method?" target="_blank" rel="noopener">如何延迟对异步方法的响应</a></p><p>有一个网络请求，源码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">downloadRequested</span><span class="params">(<span class="number">_</span> request: DownloadRequest)</span></span> async <span class="keyword">throws</span> -&gt; <span class="type">Response</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> download = <span class="keyword">try</span> await <span class="keyword">self</span>.download(<span class="keyword">for</span>: request)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">self</span>.transferIdMap[download.transferId] = download.itemId</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">let</span> size = <span class="keyword">try</span> <span class="type">Int64</span>(download.dataProvider.size())</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> (download.transferId, size, download.originalFilename, download.dataProvider.mimeType)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对这个网络请求的速率进行限制。当有很多的请求未完成时，希望延迟此方法的执行，并将异步回调返回给方法调用者。维持 <code>async/await</code> 流程。</p><p>5) <a href="https://forums.swift.org/t/use-a-dynamic-library-in-a-swift-package-on-linux/59510" title="Use a dynamic library in a swift package on Linux" target="_blank" rel="noopener">在 Linux 上使用 swift Package 中的动态库</a></p><p>在 Apple 平台上，使用 swift Package 中的动态库非常容易。只需要创建一个 <code>.xcframework</code> 其中包含 <code>.dylib</code> 文件和头文件，并使用 <code>binaryTarget</code> 将其添加到 Package 中。在 Linux 上，没有这么简单的解决方案。</p><p>6) <a href="https://forums.swift.org/t/pitch-swift-tooling-workgroup/59515" title="Swift Tooling Workgroup" target="_blank" rel="noopener">提议成立 Swift Tooling 工作组</a></p><p>目前有许多工具类领域处于无人管理的状态。应该需要有一个小组来监督、推动和指导工作。这些领域包含：<strong>SwiftPM、SourceKit-LSP</strong>、<strong>VSCode 扩展</strong>、<strong>LSP、Swift Format</strong>、<strong>API Breaking Change checker</strong>、<strong>Swiftly</strong>、<strong>Docker 镜像</strong>、<strong>DocC</strong>、<strong>SwiftMarkdown</strong> 等等。</p><p>7) <a href="https://developer.apple.com/forums/thread/711772" title="Call Swift functions from JS" target="_blank" rel="noopener">通过 JS 调用 Swift 方法</a></p><p>8) <a href="https://developer.apple.com/forums/thread/711841" title="NavigationLink" target="_blank" rel="noopener">如何对 NavigationLink 中的 tag 和 selection 进行转换</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>(workoutTypes) &#123; workoutType <span class="keyword">in</span></span><br><span class="line">    <span class="type">NavigationLink</span>(</span><br><span class="line">        workoutType.name,</span><br><span class="line">        destination: <span class="type">SessionPagingView</span>(),</span><br><span class="line">        tag: workoutType,</span><br><span class="line">        selection: $workoutManager.selectedWorkout</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 iOS 16中 <code>init(_:destination:tag:selection:)</code> 方法被弃用。Apple 建议在<code>NavigationStack</code> 或者<br><code>NavigationSplitView</code> 的列表中使用 <code>NavigationLink(_:value:)</code>。</p><h2 id="推荐博文"><a href="#推荐博文" class="headerlink" title="推荐博文"></a>推荐博文</h2><p><a href="https://mp.weixin.qq.com/s/U1Uw7Ze9Bsmzx0Of4hh1gw" target="_blank" rel="noopener">Swift 社区文章仓库</a></p><p><strong>摘要：</strong> 给大家推荐一下 Swift社区 的文章仓库，里面整理了公众号中的文章，并进行分类（<strong>Swift 进阶</strong>、<strong>Swift 基础</strong>、<strong>SwiftUI 进阶</strong>、<strong>SwiftUI 基础</strong>、<strong>Tips</strong>、<strong>iOS</strong>、<strong>面试</strong>）。方便大家查找阅读。以后会同步更新维护。</p><p><a href="https://mp.weixin.qq.com/s/exaRmdUnpzSvlJ2BGSODgw" target="_blank" rel="noopener">解决 Flutter 引起的 iOS 内存崩溃问题</a></p><p><strong>摘要：</strong> 业界首发，很多开发者会被这个问题困扰。如果你的 Flutter 版本号小于等于 <code>2.5.3</code> 或大于等于 <code>3.0.5</code>，以下描述的问题将不会发生在你的应用中，但是我相信大部分应用都会命中此区间。</p><p><a href="https://mp.weixin.qq.com/s/3emjAHwr7GDExBiB2cAqWQ" target="_blank" rel="noopener">swift-5.5.1-RELEASE源码编译（Xcode）</a></p><p><strong>摘要：</strong> 使用 ninja 构建 <code>swift-5.2.4-RELEASE</code> 版本，然后通过 vscode 和 <code>lldb</code> 插件来调试 swift 源码。</p><p><a href="https://juejin.cn/post/7129391597967376415" title="货拉拉 iOS 司机端线程治理总结" target="_blank" rel="noopener">货拉拉 iOS 司机端线程治理总结</a></p><p><strong>摘要：</strong> 经常会收到司机反馈手机发烫，耗电，crash等等问题。线程治理专项应运而生，目的就是降低crash，手机发烫，耗电等问题，尽量给原本并不富裕的内存，雪中送炭。</p><p><a href="https://mp.weixin.qq.com/s/0ZHfaTiJXAXrWj5qTunhLg" target="_blank" rel="noopener">使用 Swift Package 插件生成代码</a></p><p><strong>摘要：</strong> 在 Xcode 14 的公告中说明，允许在 Xcode 项目中使用 Swift Package 插件，以及一些架构更改。例如本文的Swift Package 插件生成代码。</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p><strong>Swift社区</strong>是由 Swift 爱好者共同维护的公益组织，我们在国内以微信公众号的运营为主，我们会分享以 <strong>Swift实战</strong>、<strong>SwiftUl</strong>、<strong>Swift基础</strong>为核心的技术内容，也整理收集优秀的学习资料。</p><p>欢迎关注公众号:Swift社区，后台点击进群，可以进入我们社区的交流讨论群。希望我们Swift社区是大家在网络空间中的另一份共同的归属。</p><p><img width="500" alt="Swift社区" src="https://user-images.githubusercontent.com/24238160/132703149-34121c6c-fd18-491c-a697-58a0fabf3060.png"></p><p>特别感谢 Swift社区 编辑部的每一位编辑，感谢大家的辛苦付出，为 Swift社区 提供优质内容，为 Swift 语言的发展贡献自己的力量。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/SwiftCommunityRes/image/blob/main/weekly/SwiftBanner.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;周报仓库：&lt;a href=&quot;https://github.com/SwiftCommunityRes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/SwiftCommunityRes&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本期是 Swift 编辑组自主整理周报的第二期&lt;/strong&gt;，每个模块还在调整磨合期。各位读者如果有好的提议，欢迎在文末留言。&lt;/p&gt;
&lt;p&gt;Swift 周报在 &lt;a href=&quot;https://github.com/SwiftCommunityRes/SwiftWeekly&quot; title=&quot;SwiftWeekly&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub 开源&lt;/a&gt;，欢迎提交 issue，投稿或推荐内容。目前计划每两周周一发布，欢迎志同道合的朋友一起加入周报整理。&lt;/p&gt;
&lt;p&gt;平凡的八月，不平凡的世界，你若落后，必定挨打，你若前进，方得始终！&lt;strong&gt;Swift社区&lt;/strong&gt;，给你最新的指引，给你最真的铠甲！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;周报精选&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新闻和社区：已消失 5 年 iPhone 电量百分比为何现在回归&lt;/p&gt;
&lt;p&gt;提案：和脚本语言相媲美的字符串算法&lt;/p&gt;
&lt;p&gt;Swift 论坛：你是否希望支持在 Windows 上构建 Swift&lt;/p&gt;
&lt;p&gt;推荐博文：Swift社区 成立文章仓库&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Swift 周报" scheme="https://fanbaoying.github.io/categories/Swift-%E5%91%A8%E6%8A%A5/"/>
    
    
      <category term="Swift" scheme="https://fanbaoying.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>App Store 已上架项目打开瞬闪问题</title>
    <link href="https://fanbaoying.github.io/App-Store-%E5%B7%B2%E4%B8%8A%E6%9E%B6%E9%A1%B9%E7%9B%AE%E6%89%93%E5%BC%80%E7%9E%AC%E9%97%AA%E9%97%AE%E9%A2%98/"/>
    <id>https://fanbaoying.github.io/App-Store-已上架项目打开瞬闪问题/</id>
    <published>2022-08-25T03:42:47.000Z</published>
    <updated>2022-08-25T04:11:59.772Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-问题背景"><a href="#1-问题背景" class="headerlink" title="1. 问题背景"></a>1. 问题背景</h3><p>用户反馈 iPhone11 iOS14.7 下载安装 App 后，点击图标，App 闪一下就回到了桌面。</p><p>收到问题反馈之后，使用手上测试机测试，iPhone11 iOS15.5 和 iPhone12 iOS15.0 均没有复现问题。</p><p>一时没有找到和用户相同的版本的测试手机，找到一台 iPhone11 iOS13.6 的手机。复现了问题。</p><p>后面使用 iPhone7 iOS13.6 也复现了问题。iPhoneX iOS16.0 没有问题。</p><a id="more"></a><h3 id="2-问题分析"><a href="#2-问题分析" class="headerlink" title="2. 问题分析"></a>2. 问题分析</h3><p>问题分析使用的是 iPhone11 iOS13.6 和 iPhone7 iOS13.6 两部手机。</p><p>App 安装版本限制是 iOS13 及以上版本。</p><p><strong>怀疑一：</strong> 是项目中引入的音频动态库版本太老不兼容导致。</p><p>检查之后发现虽然和最新版本差了2个小版本，并且文档中没有更新提示相关兼容性问题。并且项目打包上架，经过了 <code>Validate App</code>。排除怀疑。</p><p><strong>怀疑二：</strong> 系统 Api 在 iOS15.0 以下版本不兼容 。</p><p>如果是系统 Api 不兼容，不管是直接在 App store 下载安装，还是直接编译到手机，都会有问题。实际测试，直接编译到手机没有复现问题。</p><p><strong>怀疑三：</strong> 群友提出可能是因为 Xcode 版本太老导致的问题</p><p>我目前的 Xcode 版本是 13.3.1，最新版本是 13.4.1，只差了一个小版本。</p><p><strong>怀疑四：</strong> 群友提出可能电脑是 M1 芯片导致</p><p>感觉关系不大。</p><h3 id="3-问题调试"><a href="#3-问题调试" class="headerlink" title="3. 问题调试"></a>3. 问题调试</h3><p>根据以上的四个疑问，逐个排查。</p><p>在调试之前，已经清除掉手机上已经存在的 App，并且卸载清除掉所有缓存。</p><p><strong>1. 联机调试</strong></p><p>手机连接电脑，直接编译到手机中。App 正常使用，没有闪退问题</p><p><strong>2. Crashes</strong></p><p>Xcode 中的 Crashes 也没有收到任何崩溃信息。</p><p><strong>3. TestFlight</strong></p><p>通过 TestFlight 的内外部测试，收集闪退的问题。</p><p><strong>4. 升级 Xcode</strong></p><p>申请使用备用电脑，进行 Xcode 升级，项目打包上架。在 Xcode 升级到 13.4.1 后打包上架的项目，闪退的问题消失。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-问题背景&quot;&gt;&lt;a href=&quot;#1-问题背景&quot; class=&quot;headerlink&quot; title=&quot;1. 问题背景&quot;&gt;&lt;/a&gt;1. 问题背景&lt;/h3&gt;&lt;p&gt;用户反馈 iPhone11 iOS14.7 下载安装 App 后，点击图标，App 闪一下就回到了桌面。&lt;/p&gt;
&lt;p&gt;收到问题反馈之后，使用手上测试机测试，iPhone11 iOS15.5 和 iPhone12 iOS15.0 均没有复现问题。&lt;/p&gt;
&lt;p&gt;一时没有找到和用户相同的版本的测试手机，找到一台 iPhone11 iOS13.6 的手机。复现了问题。&lt;/p&gt;
&lt;p&gt;后面使用 iPhone7 iOS13.6 也复现了问题。iPhoneX iOS16.0 没有问题。&lt;/p&gt;
    
    </summary>
    
      <category term="问题集" scheme="https://fanbaoying.github.io/categories/%E9%97%AE%E9%A2%98%E9%9B%86/"/>
    
    
      <category term="Tips" scheme="https://fanbaoying.github.io/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>使用 Swift Package 插件生成代码</title>
    <link href="https://fanbaoying.github.io/%E4%BD%BF%E7%94%A8-Swift-Package-%E6%8F%92%E4%BB%B6%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/"/>
    <id>https://fanbaoying.github.io/使用-Swift-Package-插件生成代码/</id>
    <published>2022-08-25T03:42:38.000Z</published>
    <updated>2022-08-25T04:10:42.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不久前，我正在工作中开发一项新服务，该服务由 Swift Package 组成，该 Package 公开了一个类似于<code>Decodable</code>协议，供我们应用程序的其余部分使用。事实上，该协议是从<code>Decodable</code>本身继承下来的，看起来像这样：</p><blockquote><p> Fetchable.swit</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Fetchable</span>: <span class="title">Decodable</span>, <span class="title">Equatable</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>新的 package 将采用符合<code>Fetchable</code>的类型来尝试从远程或缓存的JSON数据块中解码它们。</p><p>由于这项服务对应用程序的正确运行至关重要，作为这项工作的一部分，我们希望确保始终存在故障安全（ fail-safe）。因此，我们让该应用程序附带了一个备用的JSON文件，如果远程和缓存的数据解码失败，将使用该文件，来保证程序的正常运行。</p><p><strong>无论如何</strong>，我们需要符合<code>Fetchable</code>的新类型从备用数据中正确解码。然而，有一个问题，有时很难发现备用JSON文件或模型本身是否有任何错误，因为解码错误会在<strong>运行时</strong>发生，并且只有在访问某些屏幕/功能时才会发生。</p><p>为了让我们对我们要发送的代码更有<strong>信心</strong>，我们添加了一些<strong>单元测试</strong>，试图根据我们附带的备用JSON解码符合<code>Fetchable</code>协议的每个模型。这些将使我们在CI上有一个早期指示，表明备用数据或模型中存在错误，如果所有测试都通过，我们将确定，一旦我们发布新服务，它始终具有<strong>故障安全功能</strong>。</p><p>我们<strong>手动</strong>编写了这些测试，但我们很快就意识到这个解决方案是<strong>不可扩展的</strong>，因为随着越来越多的符合<code>Fetchable</code>协议的类型被添加，我们引入了大量的代码复制，并可能有人最终忘记为特定功能编写这些测试。</p><p>我们考虑过自动化该过程，但由于我们的代码库的性质，我们遇到了一些问题，代码库高度模块化，混合了Xcode项目和Swift Package。一些架构决策还意味着我们必须收集大量符号信息，才能获得生成测试的正确类型。</p><h2 id="是什么让我再次关注到它？"><a href="#是什么让我再次关注到它？" class="headerlink" title="是什么让我再次关注到它？"></a>是什么让我再次关注到它？</h2><p>在我忘记了这件事一段时间后，Xcode 14的公告允许在Xcode项目中使用 Swift Package 插件，以及一些架构更改使提取类型信息变得容易得多，这让我有动力再次开始研究这个问题。</p><blockquote><p>请注意，Xcode项目的构建工具插件尚未按照发布说明在Xcode 14 Beta 2中提供，但将在Xcode 14的未来版本中提供。</p><p><img src="https://www.polpiella.dev/assets/posts/code-generation-using-swift-package-plugins/release-notes.png" alt="图片取自 Xcode Beta 2 版的发布说明"></p></blockquote><p>在过去的几周里，我一直在研究如何使用软件包插件生成单元测试，在这篇文章中，我将解释我在向哪个方向尝试以及它涉及了什么。</p><h2 id="实施细节"><a href="#实施细节" class="headerlink" title="实施细节"></a>实施细节</h2><p>我开始了一项任务，即创建一个<a href="https://www.polpiella.dev/an-early-look-at-swift-extensible-build-tools" target="_blank" rel="noopener">构建工具插件</a>，与 Xcode 14 引入的<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0332-swiftpm-command-plugins.md" target="_blank" rel="noopener">命令插件</a>不同，该插件可以任意运行并依赖用户输入，作为Swift软件包构建过程的一部分运行。</p><p>我知道我需要创建一个可执行文件，因为 Build Tool 插件依赖这些来执行操作。这个脚本将完全用 Swift 编写，因为这是我最熟悉的语言，并承担以下职责：</p><ol><li>扫描目标目录并提取所有<code>.swift</code>文件。目标将被递归扫描，以确保不会错过子目录。</li><li>使用<a href="https://github.com/apple/swift/tree/main/tools/SourceKit" target="_blank" rel="noopener">sourcekit</a>，或者更具体地说，<a href="https://github.com/jpsim/SourceKitten" target="_blank" rel="noopener">SourceKitten</a>，扫描这些<code>.swift</code>文件并收集类型信息。这将允许提取符合<code>Fetchable</code>协议的所有类型，以便可以针对它们编写测试。</li><li>获得这些类型后，生成一个带有<code>XCTestCase</code>的<code>.swift</code>文件，其中包含每种类型的单元测试。</li></ol><h2 id="让我们写一些代码吧"><a href="#让我们写一些代码吧" class="headerlink" title="让我们写一些代码吧"></a>让我们写一些代码吧</h2><p>与所有 Swift Package 一样，最简单的入门方法是在命令行上运行<code>swift package init</code>。</p><p>这创建了两个目标，一个是包含<code>Fetchable</code>协议定义和符合该定义的类型的实现代码，另一个是应用插件为此类类型生成单元测试的测试目标。</p><blockquote><p>Package.swit</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift-tools-version: 5.6</span></span><br><span class="line"><span class="comment">// The swift-tools-version declares the minimum version of Swift required to build this package.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> PackageDescription</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> package = <span class="type">Package</span>(</span><br><span class="line">    name: <span class="string">"CodeGenSample"</span>,</span><br><span class="line">    platforms: [.macOS(.v10_11)],</span><br><span class="line">    products: [</span><br><span class="line">        .library(</span><br><span class="line">            name: <span class="string">"CodeGenSample"</span>,</span><br><span class="line">            targets: [<span class="string">"CodeGenSample"</span>]),</span><br><span class="line">    ],</span><br><span class="line">    dependencies: [</span><br><span class="line">    ],</span><br><span class="line">    targets: [</span><br><span class="line">        .target(</span><br><span class="line">            name: <span class="string">"CodeGenSample"</span>,</span><br><span class="line">            dependencies: []</span><br><span class="line">        ),</span><br><span class="line">        .testTarget(</span><br><span class="line">            name: <span class="string">"CodeGenSampleTests"</span>,</span><br><span class="line">            dependencies: [<span class="string">"CodeGenSample"</span>]</span><br><span class="line">        )</span><br><span class="line">     ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="编写可执行文件"><a href="#编写可执行文件" class="headerlink" title="编写可执行文件"></a>编写可执行文件</h3><p>如前所述，所有构建工具插件都需要可执行文件来执行所有必要的操作。</p><p>为了帮助开发此命令行，将使用几个依赖项。第一个是<a href="https://github.com/jpsim/SourceKitten" target="_blank" rel="noopener">SourceKitten</a>——特别是其SourceKitten框架库，这是一个Swift包装器，用于帮助使用Swift代码编写<a href="https://github.com/apple/swift/tree/main/tools/SourceKit" target="_blank" rel="noopener">sourcekit</a>请求，第二个是<a href="https://github.com/apple/swift-argument-parser" target="_blank" rel="noopener">快速参数解析器</a>，这是苹果提供的软件包，可以轻松创建命令行工具，并以更快、更安全的方式解析在执行过程中传递的命令行参数。</p><p>在创建<code>executableTarget</code>并赋予它两个依赖项后，<code>Package.swift</code>就是这个样子：</p><blockquote><p>Package.swift</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift-tools-version: 5.6</span></span><br><span class="line"><span class="comment">// The swift-tools-version declares the minimum version of Swift required to build this package.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> PackageDescription</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> package = <span class="type">Package</span>(</span><br><span class="line">    name: <span class="string">"CodeGenSample"</span>,</span><br><span class="line">    platforms: [.macOS(.v10_11)],</span><br><span class="line">    products: [</span><br><span class="line">        .library(</span><br><span class="line">            name: <span class="string">"CodeGenSample"</span>,</span><br><span class="line">            targets: [<span class="string">"CodeGenSample"</span>]),</span><br><span class="line">    ],</span><br><span class="line">    dependencies: [</span><br><span class="line">        .package(url: <span class="string">"https://github.com/jpsim/SourceKitten.git"</span>, exact: <span class="string">"0.32.0"</span>),</span><br><span class="line">        .package(url: <span class="string">"https://github.com/apple/swift-argument-parser"</span>, from: <span class="string">"1.0.0"</span>)</span><br><span class="line">    ],</span><br><span class="line">    targets: [</span><br><span class="line">        .target(</span><br><span class="line">            name: <span class="string">"CodeGenSample"</span>,</span><br><span class="line">            dependencies: []</span><br><span class="line">        ),</span><br><span class="line">        .testTarget(</span><br><span class="line">            name: <span class="string">"CodeGenSampleTests"</span>,</span><br><span class="line">            dependencies: [<span class="string">"CodeGenSample"</span>]</span><br><span class="line">        ),</span><br><span class="line">        .executableTarget(</span><br><span class="line">            name: <span class="string">"PluginExecutable"</span>,</span><br><span class="line">            dependencies: [</span><br><span class="line">                .product(name: <span class="string">"SourceKittenFramework"</span>, package: <span class="string">"SourceKitten"</span>),</span><br><span class="line">                .product(name: <span class="string">"ArgumentParser"</span>, package: <span class="string">"swift-argument-parser"</span>)</span><br><span class="line">            ]</span><br><span class="line">        )</span><br><span class="line">     ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>可执行目标需要一个入口点，因此，在<code>PluginExecutable</code>目标的源目录下，必须创建一个名为<code>PluginExecutable.swift</code>的文件，其中所有可执行逻辑都需要创建。</p><blockquote><p>请注意，这个文件可以随心所欲地命名，我倾向于以与我在<code>Package.swift</code>中创建的目标相同的方式命名它。</p></blockquote><p>如下所示的脚本导入必要的依赖项，并创建可执行文件的入口点（必须用<code>@main</code>装饰），并声明在执行时传递的4个输入。</p><p>所有逻辑和方法调用都存在于<code>run</code>函数中，该函数是调用可执行文件时运行的方法。这是<code>ArgumentParser</code>语法的一部分，如果您想了解更多信息，<a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part1/" target="_blank" rel="noopener">Andy Ibañez</a>有<a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part1/" target="_blank" rel="noopener">一篇</a>关于该主题<a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part1/" target="_blank" rel="noopener">的精彩文章</a>，可能非常有帮助。</p><blockquote><p>PluginExecutable.swift</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SourceKittenFramework</span><br><span class="line"><span class="keyword">import</span> ArgumentParser</span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PluginExecutable</span>: <span class="title">ParsableCommand</span> </span>&#123;</span><br><span class="line">    @<span class="type">Argument</span>(help: <span class="string">"The protocol name to match"</span>)</span><br><span class="line">    <span class="keyword">var</span> protocolName: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    @<span class="type">Argument</span>(help: <span class="string">"The module's name"</span>)</span><br><span class="line">    <span class="keyword">var</span> moduleName: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    @<span class="type">Option</span>(help: <span class="string">"Directory containing the swift files"</span>)</span><br><span class="line">    <span class="keyword">var</span> input: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    @<span class="type">Option</span>(help: <span class="string">"The path where the generated files will be created"</span>)</span><br><span class="line">    <span class="keyword">var</span> output: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">        <span class="keyword">let</span> files = <span class="keyword">try</span> deepSearch(<span class="type">URL</span>(fileURLWithPath: input, isDirectory: <span class="literal">true</span>))</span><br><span class="line">        <span class="comment">// 2</span></span><br><span class="line">        setenv(<span class="string">"IN_PROCESS_SOURCEKIT"</span>, <span class="string">"YES"</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">let</span> structures = <span class="keyword">try</span> files.<span class="built_in">map</span> &#123; <span class="keyword">try</span> <span class="type">Structure</span>(file: <span class="type">File</span>(path: $<span class="number">0</span>.path)!) &#125;</span><br><span class="line">        <span class="comment">// 3</span></span><br><span class="line">        <span class="keyword">var</span> matchedTypes = [<span class="type">String</span>]()</span><br><span class="line">        structures.forEach &#123; walkTree(dictionary: $<span class="number">0</span>.dictionary, acc: &amp;matchedTypes) &#125;</span><br><span class="line">        <span class="comment">// 4</span></span><br><span class="line">        <span class="keyword">try</span> createOutputFile(withContent: matchedTypes)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在让我们专注于上面的<code>run</code>方法，以了解当插件运行可执行文件时会发生什么：</p><ol><li>首先，扫描目标目录以找到其中的所有<code>.swift</code>文件。这是递归完成的，这样子目录就不会错过。此目录的路径作为参数传递给可执行文件。</li><li>对于上次调用中找到的每个文件，通过<a href="https://github.com/jpsim/SourceKitten" target="_blank" rel="noopener">SourceKitten</a>发出<code>Structure</code>请求，以查找文件中Swift代码的类型信息。请注意，环境变量（<code>IN_PROCESS_SOURCEKIT</code>）也被设置为true。这需要确保选择源套件的进程中版本，以便它能够遵守插件的沙盒规则。</li></ol><blockquote><p>Xcode附带两个版本的sourcekit可执行文件，一个版本解析进程中的文件，另一个使用XPC向解析进程外文件的守护进程发送请求。后者是mac上的默认版本，为了能够将sourcekit用作插件进程的一部分，必须选择进程中版本。<a href="https://github.com/jpsim/SourceKitten/pull/728" target="_blank" rel="noopener">这最近在SourceKitten上作为环境变量实现</a>，是运行引擎盖下使用sourcekit的其他可执行文件的关键，例如<code>SwiftLint</code>。</p></blockquote><ol><li><p>浏览上次调用的所有响应，并扫描类型信息以提取符合<code>Fetchable</code>协议的任何类型。</p></li><li><p>在传递给可执行文件的<code>output</code>参数指定的位置创建一个输出文件，其中包含每种类型的单元测试。</p></li></ol><blockquote><p>请注意，上面没有重点介绍每个调用的具体细节，但如果你对实现感兴趣，包含所有代码的repo现在已经在Github上公开了! </p></blockquote><h3 id="创建该插件"><a href="#创建该插件" class="headerlink" title="创建该插件"></a>创建该插件</h3><p>与可执行文件一样，必须向<code>Package.swift</code>添加<code>.plugin</code>目标，并且必须创建包含插件实现的<code>.swift</code>文件（<code>Plugins/SourceKitPlugin/SourceKitPlugin.swift</code>）。</p><blockquote><p>Package.swift</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift-tools-version: 5.6</span></span><br><span class="line"><span class="comment">// The swift-tools-version declares the minimum version of Swift required to build this package.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> PackageDescription</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> package = <span class="type">Package</span>(</span><br><span class="line">    name: <span class="string">"CodeGenSample"</span>,</span><br><span class="line">    platforms: [.macOS(.v10_11)],</span><br><span class="line">    products: [</span><br><span class="line">        .library(</span><br><span class="line">            name: <span class="string">"CodeGenSample"</span>,</span><br><span class="line">            targets: [<span class="string">"CodeGenSample"</span>]),</span><br><span class="line">    ],</span><br><span class="line">    dependencies: [</span><br><span class="line">        .package(url: <span class="string">"https://github.com/jpsim/SourceKitten.git"</span>, exact: <span class="string">"0.32.0"</span>),</span><br><span class="line">        .package(url: <span class="string">"https://github.com/apple/swift-argument-parser"</span>, from: <span class="string">"1.0.0"</span>)</span><br><span class="line">    ],</span><br><span class="line">    targets: [</span><br><span class="line">        .target(</span><br><span class="line">            name: <span class="string">"CodeGenSample"</span>,</span><br><span class="line">            dependencies: []</span><br><span class="line">        ),</span><br><span class="line">        .testTarget(</span><br><span class="line">            name: <span class="string">"CodeGenSampleTests"</span>,</span><br><span class="line">            dependencies: [“<span class="type">CodeGenSample</span><span class="string">"],</span></span><br><span class="line"><span class="string">plugins: [“SourceKitPlugin”],</span></span><br><span class="line"><span class="string">        ),</span></span><br><span class="line"><span class="string">        .executableTarget(</span></span><br><span class="line"><span class="string">            name: "</span><span class="type">PluginExecutable</span><span class="string">",</span></span><br><span class="line"><span class="string">            dependencies: [</span></span><br><span class="line"><span class="string">                .product(name: "</span><span class="type">SourceKittenFramework</span><span class="string">", package: "</span><span class="type">SourceKitten</span><span class="string">"),</span></span><br><span class="line"><span class="string">                .product(name: "</span><span class="type">ArgumentParser</span><span class="string">", package: "</span>swift-argument-parser<span class="string">")</span></span><br><span class="line"><span class="string">            ]</span></span><br><span class="line"><span class="string">        ),</span></span><br><span class="line"><span class="string">        .plugin(</span></span><br><span class="line"><span class="string">            name: "</span><span class="type">SourceKitPlugin</span><span class="string">",</span></span><br><span class="line"><span class="string">            capability: .buildTool(),</span></span><br><span class="line"><span class="string">            dependencies: [.target(name: "</span><span class="type">PluginExecutable</span><span class="string">")]</span></span><br><span class="line"><span class="string">        )</span></span><br><span class="line"><span class="string">     ]</span></span><br><span class="line"><span class="string">)</span></span><br></pre></td></tr></table></figure><p>以下代码显示了插件的初始实现，其<code>struct</code>符合<code>BuildToolPlugin</code>的协议。这需要实现一个返回具有单个构建命令的数组的<code>createBuildCommands</code>方法。</p><blockquote><p>此插件使用<code>buildCommand</code>而不是<code>preBuildCommand</code>，因为它需要作为构建过程的一部分运行，而不是在它之前运行，因此它有机会构建和使用它所依赖的可执行文件。在这种情况下，支持使用<code>buildCommand</code>的另一点是，它只会在输入文件更改时运行，而不是每次构建目标时运行。</p></blockquote><p>此命令必须为要运行的可执行文件提供名称和路径，这可以在插件的上下文中找到：</p><blockquote><p>SourceKitPlugin.swift</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PackagePlugin</span><br><span class="line"></span><br><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SourceKitPlugin</span>: <span class="title">BuildToolPlugin</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">createBuildCommands</span><span class="params">(context: PluginContext, target: Target)</span></span> async <span class="keyword">throws</span> -&gt; [<span class="type">Command</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            .buildCommand(</span><br><span class="line">                displayName: <span class="string">"Protocol Extraction!"</span>,</span><br><span class="line">                executable: <span class="keyword">try</span> context.tool(named: <span class="string">"PluginExecutable"</span>).path,</span><br><span class="line">                arguments: [</span><br><span class="line">                    <span class="string">"FindThis"</span>,</span><br><span class="line">                    🤷,</span><br><span class="line">                    <span class="string">"--input"</span>,</span><br><span class="line">                    🤷,</span><br><span class="line">                    <span class="string">"--output"</span>,</span><br><span class="line">                    🤷</span><br><span class="line">                ],</span><br><span class="line">                environment: [<span class="string">"IN_PROCESS_SOURCEKIT"</span>: <span class="string">"YES"</span>],</span><br><span class="line">                outputFiles: [🤷]</span><br><span class="line">            )</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上面的代码所示，还有一些空白需要填充（🤷）：</p><ol><li><p>提供<code>outputPath</code>，用于生成单元测试文件。此文件可以在<code>pluginWorkDirectory</code>中生成，也可以在插件的上下文中找到。该目录提供读写权限且其中创建的任何文件都将是软件包构建过程的一部分。</p></li><li><p>提供输入路径和模块名称。这是最棘手的部分，这些需要指向正在测试的目标的来源，而不是插件正在应用于的目标——单元测试。谢天谢地，插件的目标依赖项是可访问的，我们可以从该数组中获取我们感兴趣的依赖项。此依赖项将是内部的（<code>target</code>而不是<code>product</code>），它将为可执行文件提供其名称和目录。</p></li></ol><blockquote><p>SourceKitPlugin.swift</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PackagePlugin</span><br><span class="line"></span><br><span class="line">@main</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SourceKitPlugin</span>: <span class="title">BuildToolPlugin</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">createBuildCommands</span><span class="params">(context: PluginContext, target: Target)</span></span> async <span class="keyword">throws</span> -&gt; [<span class="type">Command</span>] &#123;</span><br><span class="line">        <span class="keyword">let</span> outputPath = context.pluginWorkDirectory.appending(“<span class="type">GeneratedTests</span>.swift”)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> dependencyTarget = target</span><br><span class="line">            .dependencies</span><br><span class="line">            .compactMap &#123; dependency -&gt; <span class="type">Target</span>? <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">switch</span> dependency &#123;</span><br><span class="line">                <span class="keyword">case</span> .target(<span class="keyword">let</span> target): <span class="keyword">return</span> target</span><br><span class="line">                <span class="keyword">default</span>: <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .<span class="built_in">filter</span> &#123; <span class="string">"<span class="subst">\($<span class="number">0</span>.name)</span>Tests"</span> == target.name  &#125;</span><br><span class="line">            .first <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">Diagnostics</span>.error(<span class="string">"Could not get a dependency to scan!”)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                return []</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        return [</span></span><br><span class="line"><span class="string">            .buildCommand(</span></span><br><span class="line"><span class="string">                displayName: "</span><span class="type">Protocol</span> <span class="type">Extraction</span>!<span class="string">",</span></span><br><span class="line"><span class="string">                executable: try context.tool(named: "</span><span class="type">PluginExecutable</span><span class="string">").path,</span></span><br><span class="line"><span class="string">                arguments: [</span></span><br><span class="line"><span class="string">                    "</span><span class="type">Fetchable</span><span class="string">",</span></span><br><span class="line"><span class="string">                 dependencyTarget.name,</span></span><br><span class="line"><span class="string">                    "</span>--input<span class="string">",</span></span><br><span class="line"><span class="string">                    dependencyTarget.directory,</span></span><br><span class="line"><span class="string">                    "</span>--output<span class="string">",</span></span><br><span class="line"><span class="string">                    outputPath</span></span><br><span class="line"><span class="string">                ],</span></span><br><span class="line"><span class="string">                environment: ["</span><span class="type">IN_PROCESS_SOURCEKIT</span><span class="string">": "</span><span class="type">YES</span><span class="string">"],</span></span><br><span class="line"><span class="string">                outputFiles: [outputPath]</span></span><br><span class="line"><span class="string">            )</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意上述可选性处理方式。如果在测试目标的依赖项中找不到<em>合适的</em>目标，则使用<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0303-swiftpm-extensible-build-tools.md#plugin-api" target="_blank" rel="noopener">Diagnostics API</a>将错误转发回Xcode，并告诉它完成构建过程。</p></blockquote><h2 id="让我们看下结果"><a href="#让我们看下结果" class="headerlink" title="让我们看下结果"></a>让我们看下结果</h2><p>插件这就完成了！现在让我们在 Xcode 中运行它！为了测试这种方法，将包含以下内容的文件添加到<code>CodeGenSample</code>目标中：</p><blockquote><p>CodeGenSample.swift</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Fetchable</span>: <span class="title">Decodable</span>, <span class="title">Equatable</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FeatureABlock</span>: <span class="title">Fetchable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> featureA: <span class="type">FeatureA</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">FeatureA</span>: <span class="title">Fetchable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> url: <span class="type">URL</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Root</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RootBlock</span>: <span class="title">Fetchable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> url: <span class="type">URL</span></span><br><span class="line">        <span class="keyword">let</span> areAllFeaturesEnabled: <span class="type">Bool</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>请注意，脚本将在结构中首次出现<code>Fetchable</code>协议时停止。这意味着任何嵌套的符合<code>Fetchable</code>协议的类型都将被测试，只是外部模型。</p></blockquote><p>给定此输入并在主目标上运行测试，生成并运行<code>XCTestCase</code>，其中包含符合<code>Fetchable</code>协议的两种类型的测试。</p><blockquote><p>GeneratedTests.swift</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XCTest</span><br><span class="line"><span class="meta">@testable</span> <span class="keyword">import</span> CodeGenSample</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeneratedTests</span>: <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testFeatureABlock</span><span class="params">()</span></span> &#123;</span><br><span class="line">assertCanParseFromDefaults(<span class="type">FeatureABlock</span>.<span class="keyword">self</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testRoot_RootBlock</span><span class="params">()</span></span> &#123;</span><br><span class="line">assertCanParseFromDefaults(<span class="type">Root</span>.<span class="type">RootBlock</span>.<span class="keyword">self</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">assertCanParseFromDefaults</span>&lt;T: Fetchable&gt;<span class="params">(<span class="number">_</span> type: T.<span class="keyword">Type</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// Logic goes here...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有测试都通过了😅✅而且，尽管他们目前没有做很多事情，但可以扩展实现，以提供一些示例数据和一个<code>JSONDecoder</code>实例来对每个单元测试进行解析。</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;不久前，我正在工作中开发一项新服务，该服务由 Swift Package 组成，该 Package 公开了一个类似于&lt;code&gt;Decodable&lt;/code&gt;协议，供我们应用程序的其余部分使用。事实上，该协议是从&lt;code&gt;Decodable&lt;/code&gt;本身继承下来的，看起来像这样：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; Fetchable.swit&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Fetchable&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;Decodable&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;Equatable&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Swift 文集" scheme="https://fanbaoying.github.io/categories/Swift-%E6%96%87%E9%9B%86/"/>
    
    
      <category term="Swift" scheme="https://fanbaoying.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>使用 Swift 的并发系统并行运行多个任务</title>
    <link href="https://fanbaoying.github.io/%E4%BD%BF%E7%94%A8-Swift-%E7%9A%84%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E5%B9%B6%E8%A1%8C%E8%BF%90%E8%A1%8C%E5%A4%9A%E4%B8%AA%E4%BB%BB%E5%8A%A1/"/>
    <id>https://fanbaoying.github.io/使用-Swift-的并发系统并行运行多个任务/</id>
    <published>2022-08-25T03:42:26.000Z</published>
    <updated>2022-08-25T04:09:51.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Swift 内置并发系统的好处之一是它可以更轻松地并行执行多个异步任务，这反过来又可以使我们显着加快可以分解为单独部分的操作。</p><p>在本文中，让我们看一下几种不同的方法，以及这些技术中的每一种何时特别有用。</p><a id="more"></a><h2 id="从异步到并发"><a href="#从异步到并发" class="headerlink" title="从异步到并发"></a>从异步到并发</h2><p>首先，假设我们正在开发某种形式的购物应用程序来显示各种产品，并且我们已经实现了一个<code>ProductLoader</code>允许我们使用一系列异步 API 加载不同产品集合的应用程序，如下所示：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductLoader</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadFeatured</span><span class="params">()</span></span> async <span class="keyword">throws</span> -&gt; [<span class="type">Product</span>] &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadFavorites</span><span class="params">()</span></span> async <span class="keyword">throws</span> -&gt; [<span class="type">Product</span>] &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadLatest</span><span class="params">()</span></span> async <span class="keyword">throws</span> -&gt; [<span class="type">Product</span>] &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尽管大多数情况下上述每个方法都可能会被单独调用，但假设在我们应用程序的某些部分中，我们还希望形成一个<code>Recommendations</code>包含这三个<code>ProductLoader</code>方法的所有结果的组合模型：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Recommendations</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> featured: [<span class="type">Product</span>]</span><br><span class="line">        <span class="keyword">var</span> favorites: [<span class="type">Product</span>]</span><br><span class="line">        <span class="keyword">var</span> latest: [<span class="type">Product</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一种方法是使用<code>await</code>关键字调用每个加载方法，然后使用这些调用的结果来创建我们<code>Recommendations</code>模型的实例——如下所示：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ProductLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadRecommendations</span><span class="params">()</span></span> async <span class="keyword">throws</span> -&gt; <span class="type">Product</span>.<span class="type">Recommendations</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> featured = <span class="keyword">try</span> await loadFeatured()</span><br><span class="line"><span class="keyword">let</span> favorites = <span class="keyword">try</span> await loadFavorites()</span><br><span class="line"><span class="keyword">let</span> latest = <span class="keyword">try</span> await loadLatest()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="type">Product</span>.<span class="type">Recommendations</span>(</span><br><span class="line">            featured: featured,</span><br><span class="line">            favorites: favorites,</span><br><span class="line">            latest: latest</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的实现确实有效——然而，即使我们的三个加载操作都是完全异步的，它们目前正在<em>按顺序</em>执行，一个接一个。因此，尽管我们的顶级<code>loadRecommendations</code>方法相对于我们应用程序的其他代码正在并发执行，但实际上它还没有利用并发来执行其内部操作集。</p><p>由于我们的产品加载方法不以任何方式相互依赖，因此实际上没有理由按顺序执行它们，所以让我们看看如何让它们完全同时执行。</p><p>关于如何做到这一点的初步想法可能是将上述代码简化为单个表达式，这将使我们能够使用单个<code>await</code>关键字来等待我们的每个操作完成：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ProductLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadRecommendations</span><span class="params">()</span></span> async <span class="keyword">throws</span> -&gt; <span class="type">Product</span>.<span class="type">Recommendations</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> await <span class="type">Product</span>.<span class="type">Recommendations</span>(</span><br><span class="line">            featured: loadFeatured(),</span><br><span class="line">            favorites: loadFavorites(),</span><br><span class="line">            latest: loadLatest()</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，即使我们的代码现在<em>看起来是</em>并发的，它实际上仍会像以前一样完全按顺序执行。</p><p>相反，我们需要利用 Swift 的<code>async let</code>绑定来告诉并发系统并行执行我们的每个加载操作。使用该语法使我们能够在后台启动异步操作，而无需我们立即等待它完成。</p><p><code>await</code>如果我们在实际<em>使用</em>加载的数据时（即形成模型时）将其与单个关键字组合<code>Recommendations</code>，那么我们将获得并行执行加载操作的所有好处，而无需担心状态管理或数据竞争之类的事情：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ProductLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadRecommendations</span><span class="params">()</span></span> async <span class="keyword">throws</span> -&gt; <span class="type">Product</span>.<span class="type">Recommendations</span> &#123;</span><br><span class="line">        async <span class="keyword">let</span> featured = loadFeatured()</span><br><span class="line">async <span class="keyword">let</span> favorites = loadFavorites()</span><br><span class="line">async <span class="keyword">let</span> latest = loadLatest()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">try</span> await <span class="type">Product</span>.<span class="type">Recommendations</span>(</span><br><span class="line">            featured: featured,</span><br><span class="line">            favorites: favorites,</span><br><span class="line">            latest: latest</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很整齐！因此<code>async let</code>，当我们有一组已知的、有限的任务要执行时，它提供了一种同时运行多个操作的内置方法。但如果不是这样呢？</p><h2 id="任务组"><a href="#任务组" class="headerlink" title="任务组"></a>任务组</h2><p>现在假设我们正在开发一个<code>ImageLoader</code>可以让我们通过网络加载图像的工具。要从给定的 加载单个图像<code>URL</code>，我们可以使用如下所示的方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageLoader</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadImage</span><span class="params">(from url: URL)</span></span> async <span class="keyword">throws</span> -&gt; <span class="type">UIImage</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了使一次加载一系列图像变得简单，我们还创建了一个方便的 API，它接受一个 URL 数组并异步返回一个图像字典，该字典由下载图像的 URL 键控：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ImageLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadImages</span><span class="params">(from urls: [URL])</span></span> async <span class="keyword">throws</span> -&gt; [<span class="type">URL</span>: <span class="type">UIImage</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> images = [<span class="type">URL</span>: <span class="type">UIImage</span>]()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls &#123;</span><br><span class="line">            images[url] = <span class="keyword">try</span> await loadImage(from: url)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> images</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在让我们说，就像我们<code>ProductLoader</code>之前的工作一样，我们想让上面的<code>loadImages</code>方法并发执行，而不是按顺序下载每个图像（目前是这种情况，因为我们<code>await</code>在调用时直接使用<code>loadImage</code>我们的<code>for</code>环形）。</p><p>但是，这次我们将无法使用<code>async let</code>，因为我们需要执行的任务数量在编译时是未知的。值得庆幸的是，Swift 并发工具箱中还有一个工具可以让我们并行执行动态数量的任务——<em>任务组</em>。</p><p>要形成一个任务组，我们可以调用<code>withTaskGroup</code>或<code>withThrowingTaskGroup</code>，这取决于我们是否希望可以选择在我们的任务中抛出错误。在这种情况下，我们将选择后者，因为我们的底层<code>loadImage</code>方法是用<code>throws</code>关键字标记的。</p><p>然后我们将遍历每个 URL，就像以前一样，只是这次我们将每个图像加载任务添加到我们的组中，而不是直接等待它完成。相反，我们将<code>await</code>在添加每个任务之后单独分组结果，这将允许我们的图像加载操作完全并发执行：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ImageLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadImages</span><span class="params">(from urls: [URL])</span></span> async <span class="keyword">throws</span> -&gt; [<span class="type">URL</span>: <span class="type">UIImage</span>] &#123;</span><br><span class="line">        <span class="keyword">try</span> await withThrowingTaskGroup(of: (<span class="type">URL</span>, <span class="type">UIImage</span>).<span class="keyword">self</span>) &#123; group <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">for</span> url <span class="keyword">in</span> urls &#123;</span><br><span class="line">                group.addTask&#123;</span><br><span class="line">    <span class="keyword">let</span> image = <span class="keyword">try</span> await <span class="keyword">self</span>.loadImage(from: url)</span><br><span class="line">    <span class="keyword">return</span> (url, image)</span><br><span class="line">&#125; </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> images = [<span class="type">URL</span>: <span class="type">UIImage</span>]()</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">try</span> await (url, image) <span class="keyword">in</span> group &#123;</span><br><span class="line">    images[url] = image</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> images</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要了解有关上述<code>for try await</code>语法和一般异步序列的更多信息，请查看<a href="https://www.swiftbysundell.com/articles/async-sequences-streams-and-combine" target="_blank" rel="noopener">“异步序列、流和组合”</a>。</p><p>就像使用 时一样<code>async let</code>，以我们的操作不会直接改变任何状态的方式编写并发代码的一个巨大好处是，这样做可以让我们完全避免任何类型的数据竞争问题，同时也不需要我们引入任何锁定或序列化代码混合在一起。</p><p><code>await</code>因此，在可能的情况下，让我们的每个并发操作返回一个完全独立的结果，然后依次返回这些结果以形成我们的最终数据集，这通常是一种很好的方法。</p><p>在以后的文章中，我们将更仔细地研究避免数据竞争的其他方法（例如通过使用 Swift 的新<code>actor</code>类型）。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>重要的是要记住，仅仅因为给定的函数被标记为<code>async</code>并不一定意味着它同时执行它的工作。相反，如果这是我们想要做的，我们必须故意让我们的任务并行运行，这只有在执行一组可以独立运行的操作时才有意义。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Swift 内置并发系统的好处之一是它可以更轻松地并行执行多个异步任务，这反过来又可以使我们显着加快可以分解为单独部分的操作。&lt;/p&gt;
&lt;p&gt;在本文中，让我们看一下几种不同的方法，以及这些技术中的每一种何时特别有用。&lt;/p&gt;
    
    </summary>
    
      <category term="Swift 文集" scheme="https://fanbaoying.github.io/categories/Swift-%E6%96%87%E9%9B%86/"/>
    
    
      <category term="Swift" scheme="https://fanbaoying.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>现今 Swift 包中的二进制目标</title>
    <link href="https://fanbaoying.github.io/%E7%8E%B0%E4%BB%8A-Swift-%E5%8C%85%E4%B8%AD%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%9B%AE%E6%A0%87/"/>
    <id>https://fanbaoying.github.io/现今-Swift-包中的二进制目标/</id>
    <published>2022-08-25T03:42:16.000Z</published>
    <updated>2022-08-25T04:09:18.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><ol><li>理解二进制在 Swift 中的演变</li><li>命令行工具相关</li><li>结论</li></ol><p>在 <strong>iOS</strong> 和 <strong>macOS</strong> 开发中， Swift 包现在变得越来越重要。Apple 已经努力推动桥接那些缝隙，并且修复那些阻碍开发者的问题，例如阻碍开发者将他们的库和依赖由其他诸如 <strong><a href="https://github.com/Carthage/Carthage" title="Carthage" target="_blank" rel="noopener">Carthage</a></strong> 或 <strong><a href="https://github.com/CocoaPods/CocoaPods" title="CocoaPods" target="_blank" rel="noopener">CocoaPods</a></strong> 依赖管理工具迁移到 Swift 包依赖管理工具的问题，例如没有能力添加构建步骤的问题。这对任何依赖一些代码生成的库来说都是破坏者，比如，协议和 Swift 生成。</p><a id="more"></a><h2 id="理解二进制在-Swift-中的演变"><a href="#理解二进制在-Swift-中的演变" class="headerlink" title="理解二进制在 Swift 中的演变"></a>理解二进制在 Swift 中的演变</h2><p>为了充分理解 Apple 的 Swift 团队在二进制目标和他们引入的一些新 API 方面采取的一些步骤，我们需要理解它们从何而来。在后续的部分中，我们将调研 Apple 架构的演变，以及为什么二进制目标的 API 在过去几年中逐渐形成的，特别是自 Apple 发布了自己的硅芯片之后。</p><h3 id="胖二进制和-Frameworks-框架"><a href="#胖二进制和-Frameworks-框架" class="headerlink" title="胖二进制和 Frameworks 框架"></a>胖二进制和 Frameworks 框架</h3><p>如果你曾必须处理二进制依赖，或者你曾创建一个属于你自己的可执行文件，你将会对 <strong>胖二进制</strong> 这个术语感到熟悉。这些被扩展（或增大）的可执行文件，是包含了为多个不同架构原生构建的切片。这允许库的所有者分发一个运行在所有预期的目标架构上的单独的二进制。</p><p>当源码不能被暴露或当处理非常庞大的代码仓库时，预编译库成为可执行文件非常有意义，因为预编译源码以及以二进制文件分发他们，将节省构建程序在他们的应用上的构建时间。</p><p><a href="https://cocoapods.org/" title="Pods" target="_blank" rel="noopener">Pods</a> 是一个非常好的例子，当开发者发现他们自己没必要构建那些非常少改动的依赖。这是一个很共通的问题，它激发了诸如 <a href="https://github.com/leavez/cocoapods-binary" title="cocoapods-binary" target="_blank" rel="noopener">cocoapods-binary</a> 之类的项目，该项目预编译了 pod 依赖项以减少客户端的构建时间。</p><h4 id="Frameworks-框架"><a href="#Frameworks-框架" class="headerlink" title="Frameworks 框架"></a>Frameworks 框架</h4><p>嵌入静态二进制文件可能对应用程序来说已经足够了，但如果需要某些资源（如 assets 或头文件），则需要将这些资源与包含所有切片的 <strong>胖二进制文件</strong> 捆绑在一起，形成所谓的 <code>frameworks</code> 文件。</p><p>这就是诸如 <a href="https://developers.google.com/cast/docs/ios_sender#manual_setup" title="Google" target="_blank" rel="noopener">Google Cast</a> 之类的预编译库在过渡到使用 <code>xcframework</code> 进行分发之前所做的事情 —— 下一节将详细介绍这种过渡的原因。</p><p>到目前为止，一切都很好。 如果我们要为分发预编译一个库，那么胖二进制文件听起来很理想，对吧？并且，如果我们需要捆绑一些其他资源，我们可以只使用一个 <code>frameworks</code>。 一个二进制来统治他们所有！</p><h4 id="XCFrameworks-框架"><a href="#XCFrameworks-框架" class="headerlink" title="XCFrameworks 框架"></a>XCFrameworks 框架</h4><p>好吧，不完全是。胖二进制文件有一个大问题，那就是你不能有两个架构相同但命令/指令不同的切片。 这曾经很好，因为设备和模拟器的架构总是不同的，但是随着 Apple Silicon 计算机 (M1) 的推出，模拟器和设备共享相同的架构 (arm64)，但具有不同的加载器命令。 这与面向未来的二进制目标相结合，正是 Apple 引入 <a href="https://developer.apple.com/videos/play/wwdc2019/416/" title="XCFrameworks" target="_blank" rel="noopener">XCFrameworks</a> 的原因。</p><blockquote><p>你可以在 <a href="https://twitter.com/giertler" target="_blank" rel="noopener">Bogo Giertler 撰写的这篇精彩文章</a> 中详细了解为 iOS 设备构建的 arm64 切片和为 M1 mac 的 iOS 模拟器构建的 arm64 切片之间的区别。</p></blockquote><p><a href="https://help.apple.com/xcode/mac/11.4/#/dev6f6ac218b" title="XCFrameworks" target="_blank" rel="noopener">XCFrameworks</a> 现在允许将多个二进制文件捆绑在一起，解决了 M1 Mac 引入的设备和模拟器冲突架构问题，因为我们现在可以为每个用例提供包含相关切片的二进制文件。 事实上，如果我们需要，我们可以走得更远，例如，在同一个 xcframework 中捆绑一个包含 iOS 目标的 <code>UIKit</code> 接口的二进制文件和一个包含 macOS 的 <code>AppKit</code> 接口的二进制文件，然后让 Xcode 基于期望的目标架构决定使用哪一个。</p><p>在 Swift 包中，那先能够以 <a href="https://developer.apple.com/documentation/swift_packages/distributing_binary_frameworks_as_swift_packages" title="binaryTarget" target="_blank" rel="noopener">binaryTarget</a> 被包含进项目的，能够在包中被引入任意其他目标。这相同的操作同样适用于 <code>frameworks</code>。</p><h2 id="命令行工具相关"><a href="#命令行工具相关" class="headerlink" title="命令行工具相关"></a>命令行工具相关</h2><p>由于 Swift 5.6 版本中引入了用于 Swift 包管理器的 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0303-swiftpm-extensible-build-tools.md" title="Extensible Build Tools" target="_blank" rel="noopener">可扩展构建工具</a> ，因此可以在构建过程中的不同时间执行命令。</p><p>这是 iOS 社区长期以来一直强烈要求的事情，例如格式化源代码、代码生成甚至收集公制代码库的指标。 Swift 5.6 中所有这些所谓的 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0303-swiftpm-exte&quot;&quot;nsible-build-tools.md#plugin-api" title="Plugins" target="_blank" rel="noopener">插件</a> 最终都需要调用可执行文件来执行特定任务。 这是二进制文件再次在 Swift 包中参与的地方。</p><p>在大多数情况下，对于我们 iOS 开发人员来说，这些工具将来自同时支持 macOS 的不同架构切片 —— Apple Silicon 的 arm64 架构和 Intel Mac 的 x86_64 架构。开发者工具如， <a href="https://github.com/realm/SwiftLint" title="SwiftLint" target="_blank" rel="noopener">SwiftLint</a> 或 <a href="https://github.com/SwiftGen/SwiftGen" title="SwiftGen" target="_blank" rel="noopener">SwiftGen</a> 正是这种案例。 在这种情况下，可以使用包含可执行文件（本地或远程）的 <strong>.zip</strong> 文件的路径创建新的二进制目标。</p><blockquote><p>注意可执行文件必须在.zip文件的根目录下，否则找不到。</p></blockquote><h3 id="Artifact-Bundles"><a href="#Artifact-Bundles" class="headerlink" title="Artifact Bundles"></a>Artifact Bundles</h3><p>到目前为止，命令行工具所采用的方法仅适用于 macOS 架构。但我们不能忘记，Linux 机器也支持 Swift 包。 这意味着如果要同时支持 M1 macs (<code>arm64</code>) 和 Linux <code>arm64</code> 机器，上面的胖二进制方法将不起作用 —— 请记住，二进制不能包含具有相同架构的多个切片。 在这个阶段可能有人会想，我们可以不只使用 <code>xcframeworks</code> 吗？ 不，因为它们在 Linux 操作系统上不受支持！</p><p>Apple 已经考虑到这一点，除了引入 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0303-swiftpm-extensible-build-tools.md" title="Extensible Build Tools" target="_blank" rel="noopener">可扩展构建工具</a> 之外，<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0305-swiftpm-binary-target-improvements.md" title="Artifact Bundles" target="_blank" rel="noopener">Artifact Bundles</a> 和对二进制目标的其他改进也作为 Swift 5.6 的一部分发布。</p><p>工件包(Artifact Bundles) 是包含 <em>工件</em> 的目录。 这些工件需要包含支持架构的所有不同二进制文件。 二进制文件和支持的架构的路径是使用清单文件 (<code>info.json</code>) 指定的，该文件位于 Artifact Bundle 目录的根目录中。 你可以将此清单文件视为一个地图或指南，以帮助 Swift 确定哪些可执行文件可用于哪种架构以及可以在哪里找到它们。</p><h4 id="以-SwiftLint-为例"><a href="#以-SwiftLint-为例" class="headerlink" title="以 SwiftLint 为例"></a>以 SwiftLint 为例</h4><p><a href="https://github.com/realm/SwiftLint" title="SwiftLint" target="_blank" rel="noopener">SwiftLint</a> 在整个社区中被广泛用作 Swift 代码的静态代码分析工具。 由于很多人都非常渴望让这个插件在他们的 SwiftPM 项目中运行，我认为这将是一个很好的例子来展示我们如何将分发的可执行文件从他们的发布页面变成一个与 macOS 架构和 Linux arm64 兼容的工件包。</p><p>让我们从下载两个可执行文件（<a href="https://github.com/realm/SwiftLint/releases/download/0.47.0/portable_swiftlint.zip" title="macOS" target="_blank" rel="noopener">macOS</a> 和 <a href="https://github.com/realm/SwiftLint/releases/download/0.47.0/swiftlint_linux.zip" title="Linux" target="_blank" rel="noopener">Linux</a>）开始。</p><p>至此，bundle的结构就可以创建好了。 为此，创建一个名为 <code>swiftlint.artifactbundle</code> 的目录并在其根目录添加一个空的 <code>info.json</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir swiftlint.artifactbundle</span><br><span class="line">touch swiftlint.artifactbundle/info.json</span><br></pre></td></tr></table></figure><p>现在可以使用 <code>schemaVersion</code> 填充清单文件，这可能会在未来版本的工件包和具有两个变体的工件中发生变化，这将很快定义：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"schemaVersion"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">    <span class="attr">"artifacts"</span>: &#123;</span><br><span class="line">        <span class="attr">"swiftlint"</span>: &#123;</span><br><span class="line">            "version": "0.47.0", # The version of SwiftLint being used</span><br><span class="line">            "type": "executable",</span><br><span class="line">            "variants": [</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要做的最后一件事是将二进制文件添加到包中，然后将它们作为变体添加到 <code>info.json</code> 文件中。 让我们首先创建目录并将二进制文件放入其中（macOS 的一个在 <code>swiftlint-macos/swiftlint</code>，Linux 的一个在 <code>swiftlint-linux/swiftlint</code>）。</p><p>添加这些之后，可以在清单文件中变量：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"schemaVersion"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">    <span class="attr">"artifacts"</span>: &#123;</span><br><span class="line">        <span class="attr">"swiftlint"</span>: &#123;</span><br><span class="line">            "version": "0.47.0", # The version of SwiftLint being used</span><br><span class="line">            "type": "executable",</span><br><span class="line">            "variants": [</span><br><span class="line">          &#123;</span><br><span class="line">                    <span class="attr">"path"</span>: <span class="string">"swiftlint-macos/swiftlint"</span>,</span><br><span class="line">                    <span class="attr">"supportedTriples"</span>: [<span class="string">"x86_64-apple-macosx"</span>, <span class="string">"arm64-apple-macosx"</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                    <span class="attr">"path"</span>: <span class="string">"swiftlint-linux/swiftlint"</span>,</span><br><span class="line">                    <span class="attr">"supportedTriples"</span>: [<span class="string">"x86_64-unknown-linux-gnu"</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为此，需要为每个变量指定二进制文件的相对路径（从工件包目录的根目录）和支持的三元组。 如果您不熟悉 <a href="https://clang.llvm.org/docs/CrossCompilation.html#target-triples" title="target-triples" target="_blank" rel="noopener">目标三元组</a>，它们是一种选择构建二进制文件的架构的方法。 请注意，这不是 <strong>主机</strong>（构建可执行文件的机器）的体系结构，而是 <strong>目标</strong> 机器（应该运行所述可执行文件的机器）。</p><p>这些三元组具有以下格式： <code>----</code> 并非所有字段都是必需的，如果其中一个字段未知并且要使用默认值，则可以省略或替换为 <code>unknown</code> 关键字。</p><p>可执行文件的架构切片可以通过运行 <code>file</code> 找到，这将打印捆绑的任何切片的供应商、系统和架构。 在这种情况下，为这两个命令运行它会显示：</p><p><strong>swiftlint-macos/swiftlint</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">swiftlint: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64]</span><br><span class="line">swiftlint (for architecture x86_64):Mach-O 64-bit executable x86_64</span><br><span class="line">swiftlint (for architecture arm64):Mach-O 64-bit executable arm64</span><br></pre></td></tr></table></figure><p><strong>swiftlint-linux/swiftlint</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-&gt; file swiftlint</span><br><span class="line">swiftlint: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, with debug_info, not stripped</span><br></pre></td></tr></table></figure><p>这带来了上面显示的 macOS 支持的两个三元组（<code>x86_64-apple-macosx</code>、<code>arm64-apple-macosx</code>）和 Linux 支持的一个三元组（<code>x86_64-unknown-linux-gnu</code>）。</p><p>与 <code>XCFrameworks</code> 类似，工件包也可以通过使用 <a href="https://developer.apple.com/documentation/swift_packages/distributing_binary_frameworks_as_swift_packages" target="_blank" rel="noopener">binaryTarget</a> 包含在 Swift 包中。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>简而言之，我们可以总结 2022 年如何在 Swift 包中使用二进制文件的最佳实践，如下所示：</p><ol><li>如果你需要为你的 iOS/macOS 项目添加预编译库或可执行文件，您应该使用 <code>XCFramework</code>，并为每个用例（iOS 设备、macOS 设备和 iOS 模拟器）包含单独的二进制文件。</li><li>如果你需要创建一个插件并运行一个可执行文件，你应该将其嵌入为一个工件包，其中包含适用于不同支持架构的二进制文件。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文章目录&quot;&gt;&lt;a href=&quot;#文章目录&quot; class=&quot;headerlink&quot; title=&quot;文章目录&quot;&gt;&lt;/a&gt;文章目录&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;理解二进制在 Swift 中的演变&lt;/li&gt;
&lt;li&gt;命令行工具相关&lt;/li&gt;
&lt;li&gt;结论&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 &lt;strong&gt;iOS&lt;/strong&gt; 和 &lt;strong&gt;macOS&lt;/strong&gt; 开发中， Swift 包现在变得越来越重要。Apple 已经努力推动桥接那些缝隙，并且修复那些阻碍开发者的问题，例如阻碍开发者将他们的库和依赖由其他诸如 &lt;strong&gt;&lt;a href=&quot;https://github.com/Carthage/Carthage&quot; title=&quot;Carthage&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Carthage&lt;/a&gt;&lt;/strong&gt; 或 &lt;strong&gt;&lt;a href=&quot;https://github.com/CocoaPods/CocoaPods&quot; title=&quot;CocoaPods&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CocoaPods&lt;/a&gt;&lt;/strong&gt; 依赖管理工具迁移到 Swift 包依赖管理工具的问题，例如没有能力添加构建步骤的问题。这对任何依赖一些代码生成的库来说都是破坏者，比如，协议和 Swift 生成。&lt;/p&gt;
    
    </summary>
    
      <category term="Swift 文集" scheme="https://fanbaoying.github.io/categories/Swift-%E6%96%87%E9%9B%86/"/>
    
    
      <category term="Swift" scheme="https://fanbaoying.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>用 SwiftLint 保持 Swift 风格一致</title>
    <link href="https://fanbaoying.github.io/%E7%94%A8-SwiftLint-%E4%BF%9D%E6%8C%81-Swift-%E9%A3%8E%E6%A0%BC%E4%B8%80%E8%87%B4/"/>
    <id>https://fanbaoying.github.io/用-SwiftLint-保持-Swift-风格一致/</id>
    <published>2022-08-25T03:42:06.000Z</published>
    <updated>2022-08-25T04:07:51.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>代码风格可能是一个有争议的话题，并且在开发人员之间引发一些激烈的讨论。使用工具强制执行一套代码风格规则对于避免一些争论，以及确保在整个项目中保持代码风格的一致性非常有帮助。SwiftLint 可以很容易的整合进 Xcode 项目中，以便在编译时将代码风格冲突标记为警告或者错误。</p><a id="more"></a><h1 id="使用-Xcode-集成-SwiftLint"><a href="#使用-Xcode-集成-SwiftLint" class="headerlink" title="使用 Xcode 集成 SwiftLint"></a>使用 Xcode 集成 SwiftLint</h1><p>你可以在 Github上 获得<a href="https://github.com/realm/SwiftLint" target="_blank" rel="noopener">SwiftLint</a>。它可以使用多种方式安装，比如，直接下载 SwiftLint.pkg 包，或者使用<a href="https://brew.sh/" target="_blank" rel="noopener">HomeBrew</a>命令行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install swiftlint</span><br></pre></td></tr></table></figure><p>安装 SwiftLint 后，可以通过在主 app target 的<code>Build Phase</code>（构筑阶段）下添加一个<code>Run Phase</code>（运行阶段）的运行脚本，来集成进 Xcode 项目。点击<code>+</code>号按钮，选择”New Run Script Phase”，添加下面的脚本。在 silicon Macs （搭载M1芯片）上需要添加<code>export</code>语句，因为<code>HomeBrew</code>的二进制文件默认安装在<code>/opt/homebrew/bin</code>目录之下。</p><blockquote><p>译者注：并不一定在此目录下，具体可以点击<a href="https://mkyong.com/mac/where-does-homebrew-install-packages-on-mac/" target="_blank" rel="noopener">这里</a>。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:/opt/homebrew/bin"</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">which</span> swiftlint &gt; /dev/null; <span class="keyword">then</span></span><br><span class="line">  swiftlint</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><img src="https://images.xiaozhuanlan.com/photo/2022/cf7f10bb27747da39b213ac1db0a0e89.png" alt="在Xcode添加运行脚本以集成SwiftLint"></p><p>在 Xcode 添加运行脚本以集成 SwiftLint</p><hr><h1 id="SwiftLint-的规则冲突"><a href="#SwiftLint-的规则冲突" class="headerlink" title="SwiftLint 的规则冲突"></a><strong>SwiftLint 的规则冲突</strong></h1><p>好消息是，新建的 Xcode 项目没有违反 SwiftLint 的默认规则。一旦你知道了 SwiftLint，最好从一开始就立即将其添加到每个项目中。在刚才新建的 iOS App 的<code>Text view</code>后面添加一个空格。现在，编译代码时会生成警告。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"Hello, world!"</span>) </span><br><span class="line"></span><br><span class="line">            <span class="type">Text</span>(<span class="string">"second line"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码违反了<code>trailing_whitespace</code>规则，它默认是开启的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+------------------------------------------+--------+-------------+------------------------+-------------+----------+---------------+</span><br><span class="line">| identifier                               | opt-in | correctable | enabled <span class="keyword">in</span> your config | kind        | analyzer | configuration |</span><br><span class="line">+------------------------------------------+--------+-------------+------------------------+-------------+----------+---------------+</span><br><span class="line">| trailing_whitespace                      | no     | yes         | yes                    | style       | no       | warning, i... |</span><br></pre></td></tr></table></figure><p><img src="https://images.xiaozhuanlan.com/photo/2022/9e8b4c098191b835c4cdd4453b043e33.png" alt="Swift正在警告在一行之后有一个额外的空格"></p><p>Swift 正在警告在一行之后有一个额外的空格</p><hr><h1 id="SwiftLint-的规则"><a href="#SwiftLint-的规则" class="headerlink" title="SwiftLint 的规则"></a>SwiftLint 的规则</h1><p>SwiftLint 包含了200多条规则，并且 Swift 社区仍在不间断的贡献更多的规则。查看 SwiftLint 规则的一种方法是在终端中运行<code>swiftlint rules</code>命令（此种方式需要安装<code>swiftlint</code>）。这将会显示规则以及规则的一系列属性，比如是否可选，是否可纠正。</p><p>以下是 SwiftLint 0.46.5的默认规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line">swiftlint rules</span><br><span class="line">+------------------------------------------+--------+-------------+------------------------+-------------+----------+---------------+</span><br><span class="line">| identifier                               | opt-in | correctable | enabled <span class="keyword">in</span> your config | kind        | analyzer | configuration |</span><br><span class="line">+------------------------------------------+--------+-------------+------------------------+-------------+----------+---------------+</span><br><span class="line">| anonymous_argument_in_multiline_closure  | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| anyobject_protocol                       | yes    | yes         | no                     | lint        | no       | warning       |</span><br><span class="line">| array_init                               | yes    | no          | no                     | lint        | no       | warning       |</span><br><span class="line">| attributes                               | yes    | no          | no                     | style       | no       | warning, a... |</span><br><span class="line">| balanced_xctest_lifecycle                | yes    | no          | no                     | lint        | no       | warning       |</span><br><span class="line">| block_based_kvo                          | no     | no          | yes                    | idiomatic   | no       | warning       |</span><br><span class="line">| capture_variable                         | yes    | no          | no                     | lint        | yes      | warning       |</span><br><span class="line">| class_delegate_protocol                  | no     | no          | yes                    | lint        | no       | warning       |</span><br><span class="line">| closing_brace                            | no     | yes         | yes                    | style       | no       | warning       |</span><br><span class="line">| closure_body_length                      | yes    | no          | no                     | metrics     | no       | warning: 2... |</span><br><span class="line">| closure_end_indentation                  | yes    | yes         | no                     | style       | no       | warning       |</span><br><span class="line">| closure_parameter_position               | no     | no          | yes                    | style       | no       | warning       |</span><br><span class="line">| closure_spacing                          | yes    | yes         | no                     | style       | no       | warning       |</span><br><span class="line">| collection_alignment                     | yes    | no          | no                     | style       | no       | warning, a... |</span><br><span class="line">| colon                                    | no     | yes         | yes                    | style       | no       | warning, f... |</span><br><span class="line">| comma                                    | no     | yes         | yes                    | style       | no       | warning       |</span><br><span class="line">| comment_spacing                          | no     | yes         | yes                    | lint        | no       | warning       |</span><br><span class="line">| compiler_protocol_init                   | no     | no          | yes                    | lint        | no       | warning       |</span><br><span class="line">| computed_accessors_order                 | no     | no          | yes                    | style       | no       | warning, o... |</span><br><span class="line">| conditional_returns_on_newline           | yes    | no          | no                     | style       | no       | warning, i... |</span><br><span class="line">| contains_over_filter_count               | yes    | no          | no                     | performance | no       | warning       |</span><br><span class="line">| contains_over_filter_is_empty            | yes    | no          | no                     | performance | no       | warning       |</span><br><span class="line">| contains_over_first_not_nil              | yes    | no          | no                     | performance | no       | warning       |</span><br><span class="line">| contains_over_range_nil_comparison       | yes    | no          | no                     | performance | no       | warning       |</span><br><span class="line">| control_statement                        | no     | yes         | yes                    | style       | no       | warning       |</span><br><span class="line">| convenience_type                         | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| custom_rules                             | no     | no          | no                     | style       | no       | user-defin... |</span><br><span class="line">| cyclomatic_complexity                    | no     | no          | yes                    | metrics     | no       | warning: 1... |</span><br><span class="line">| deployment_target                        | no     | no          | yes                    | lint        | no       | warning, i... |</span><br><span class="line">| discarded_notification_center_observer   | yes    | no          | no                     | lint        | no       | warning       |</span><br><span class="line">| discouraged_assert                       | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| discouraged_direct_init                  | no     | no          | yes                    | lint        | no       | warning, t... |</span><br><span class="line">| discouraged_none_name                    | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| discouraged_object_literal               | yes    | no          | no                     | idiomatic   | no       | warning, i... |</span><br><span class="line">| discouraged_optional_boolean             | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| discouraged_optional_collection          | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| duplicate_enum_cases                     | no     | no          | yes                    | lint        | no       | error         |</span><br><span class="line">| duplicate_imports                        | no     | no          | yes                    | idiomatic   | no       | warning       |</span><br><span class="line">| duplicated_key_in_dictionary_literal     | no     | no          | yes                    | lint        | no       | warning       |</span><br><span class="line">| dynamic_inline                           | no     | no          | yes                    | lint        | no       | error         |</span><br><span class="line">| empty_collection_literal                 | yes    | no          | no                     | performance | no       | warning       |</span><br><span class="line">| empty_count                              | yes    | no          | no                     | performance | no       | error, onl... |</span><br><span class="line">| empty_enum_arguments                     | no     | yes         | yes                    | style       | no       | warning       |</span><br><span class="line">| empty_parameters                         | no     | yes         | yes                    | style       | no       | warning       |</span><br><span class="line">| empty_parentheses_with_trailing_closure  | no     | yes         | yes                    | style       | no       | warning       |</span><br><span class="line">| empty_string                             | yes    | no          | no                     | performance | no       | warning       |</span><br><span class="line">| empty_xctest_method                      | yes    | no          | no                     | lint        | no       | warning       |</span><br><span class="line">| enum_case_associated_values_count        | yes    | no          | no                     | metrics     | no       | warning: 5... |</span><br><span class="line">| expiring_todo                            | yes    | no          | no                     | lint        | no       | (approachi... |</span><br><span class="line">| explicit_acl                             | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| explicit_enum_raw_value                  | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| explicit_init                            | yes    | yes         | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| explicit_self                            | yes    | yes         | no                     | style       | yes      | warning       |</span><br><span class="line">| explicit_top_level_acl                   | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| explicit_type_interface                  | yes    | no          | no                     | idiomatic   | no       | warning, e... |</span><br><span class="line">| extension_access_modifier                | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| fallthrough                              | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| fatal_error_message                      | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| file_header                              | yes    | no          | no                     | style       | no       | warning, r... |</span><br><span class="line">| file_length                              | no     | no          | yes                    | metrics     | no       | warning: 4... |</span><br><span class="line">| file_name                                | yes    | no          | no                     | idiomatic   | no       | (severity)... |</span><br><span class="line">| file_name_no_space                       | yes    | no          | no                     | idiomatic   | no       | (severity)... |</span><br><span class="line">| file_types_order                         | yes    | no          | no                     | style       | no       | warning, o... |</span><br><span class="line">| first_where                              | yes    | no          | no                     | performance | no       | warning       |</span><br><span class="line">| flatmap_over_map_reduce                  | yes    | no          | no                     | performance | no       | warning       |</span><br><span class="line">| for_where                                | no     | no          | yes                    | idiomatic   | no       | warning       |</span><br><span class="line">| force_cast                               | no     | no          | yes                    | idiomatic   | no       | error         |</span><br><span class="line">| force_try                                | no     | no          | yes                    | idiomatic   | no       | error         |</span><br><span class="line">| force_unwrapping                         | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| function_body_length                     | no     | no          | yes                    | metrics     | no       | warning: 4... |</span><br><span class="line">| function_default_parameter_at_end        | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| function_parameter_count                 | no     | no          | yes                    | metrics     | no       | warning: 5... |</span><br><span class="line">| generic_type_name                        | no     | no          | yes                    | idiomatic   | no       | (min_lengt... |</span><br><span class="line">| ibinspectable_in_extension               | yes    | no          | no                     | lint        | no       | warning       |</span><br><span class="line">| identical_operands                       | yes    | no          | no                     | lint        | no       | warning       |</span><br><span class="line">| identifier_name                          | no     | no          | yes                    | style       | no       | (min_lengt... |</span><br><span class="line">| implicit_getter                          | no     | no          | yes                    | style       | no       | warning       |</span><br><span class="line">| implicit_return                          | yes    | yes         | no                     | style       | no       | warning, i... |</span><br><span class="line">| implicitly_unwrapped_optional            | yes    | no          | no                     | idiomatic   | no       | warning, m... |</span><br><span class="line">| inclusive_language                       | no     | no          | yes                    | style       | no       | warning, a... |</span><br><span class="line">| indentation_width                        | yes    | no          | no                     | style       | no       | severity: ... |</span><br><span class="line">| inert_defer                              | no     | no          | yes                    | lint        | no       | warning       |</span><br><span class="line">| is_disjoint                              | no     | no          | yes                    | idiomatic   | no       | warning       |</span><br><span class="line">| joined_default_parameter                 | yes    | yes         | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| large_tuple                              | no     | no          | yes                    | metrics     | no       | warning: 2... |</span><br><span class="line">| last_where                               | yes    | no          | no                     | performance | no       | warning       |</span><br><span class="line">| leading_whitespace                       | no     | yes         | yes                    | style       | no       | warning       |</span><br><span class="line">| legacy_cggeometry_functions              | no     | yes         | yes                    | idiomatic   | no       | warning       |</span><br><span class="line">| legacy_constant                          | no     | yes         | yes                    | idiomatic   | no       | warning       |</span><br><span class="line">| legacy_constructor                       | no     | yes         | yes                    | idiomatic   | no       | warning       |</span><br><span class="line">| legacy_hashing                           | no     | no          | yes                    | idiomatic   | no       | warning       |</span><br><span class="line">| legacy_multiple                          | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| legacy_nsgeometry_functions              | no     | yes         | yes                    | idiomatic   | no       | warning       |</span><br><span class="line">| legacy_objc_type                         | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| legacy_random                            | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| let_var_whitespace                       | yes    | no          | no                     | style       | no       | warning       |</span><br><span class="line">| line_length                              | no     | no          | yes                    | metrics     | no       | warning: 1... |</span><br><span class="line">| literal_expression_end_indentation       | yes    | yes         | no                     | style       | no       | warning       |</span><br><span class="line">| lower_acl_than_parent                    | yes    | no          | no                     | lint        | no       | warning       |</span><br><span class="line">| mark                                     | no     | yes         | yes                    | lint        | no       | warning       |</span><br><span class="line">| missing_docs                             | yes    | no          | no                     | lint        | no       | warning: o... |</span><br><span class="line">| modifier_order                           | yes    | yes         | no                     | style       | no       | warning, p... |</span><br><span class="line">| multiline_arguments                      | yes    | no          | no                     | style       | no       | warning, f... |</span><br><span class="line">| multiline_arguments_brackets             | yes    | no          | no                     | style       | no       | warning       |</span><br><span class="line">| multiline_function_chains                | yes    | no          | no                     | style       | no       | warning       |</span><br><span class="line">| multiline_literal_brackets               | yes    | no          | no                     | style       | no       | warning       |</span><br><span class="line">| multiline_parameters                     | yes    | no          | no                     | style       | no       | warning, a... |</span><br><span class="line">| multiline_parameters_brackets            | yes    | no          | no                     | style       | no       | warning       |</span><br><span class="line">| multiple_closures_with_trailing_closure  | no     | no          | yes                    | style       | no       | warning       |</span><br><span class="line">| nesting                                  | no     | no          | yes                    | metrics     | no       | (type_leve... |</span><br><span class="line">| nimble_operator                          | yes    | yes         | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| no_extension_access_modifier             | yes    | no          | no                     | idiomatic   | no       | error         |</span><br><span class="line">| no_fallthrough_only                      | no     | no          | yes                    | idiomatic   | no       | warning       |</span><br><span class="line">| no_grouping_extension                    | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| no_space_in_method_call                  | no     | yes         | yes                    | style       | no       | warning       |</span><br><span class="line">| notification_center_detachment           | no     | no          | yes                    | lint        | no       | warning       |</span><br><span class="line">| nslocalizedstring_key                    | yes    | no          | no                     | lint        | no       | warning       |</span><br><span class="line">| nslocalizedstring_require_bundle         | yes    | no          | no                     | lint        | no       | warning       |</span><br><span class="line">| nsobject_prefer_isequal                  | no     | no          | yes                    | lint        | no       | warning       |</span><br><span class="line">| number_separator                         | yes    | yes         | no                     | style       | no       | warning, m... |</span><br><span class="line">| object_literal                           | yes    | no          | no                     | idiomatic   | no       | warning, i... |</span><br><span class="line">| opening_brace                            | no     | yes         | yes                    | style       | no       | warning, a... |</span><br><span class="line">| operator_usage_whitespace                | yes    | yes         | no                     | style       | no       | warning, l... |</span><br><span class="line">| operator_whitespace                      | no     | no          | yes                    | style       | no       | warning       |</span><br><span class="line">| optional_enum_case_matching              | yes    | yes         | no                     | style       | no       | warning       |</span><br><span class="line">| orphaned_doc_comment                     | no     | no          | yes                    | lint        | no       | warning       |</span><br><span class="line">| overridden_super_call                    | yes    | no          | no                     | lint        | no       | warning, e... |</span><br><span class="line">| override_in_extension                    | yes    | no          | no                     | lint        | no       | warning       |</span><br><span class="line">| pattern_matching_keywords                | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| prefer_nimble                            | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| prefer_self_in_static_references         | yes    | yes         | no                     | style       | no       | N/A           |</span><br><span class="line">| prefer_self_type_over_type_of_self       | yes    | yes         | no                     | style       | no       | warning       |</span><br><span class="line">| prefer_zero_over_explicit_init           | yes    | yes         | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| prefixed_toplevel_constant               | yes    | no          | no                     | style       | no       | warning, o... |</span><br><span class="line">| private_action                           | yes    | no          | no                     | lint        | no       | warning       |</span><br><span class="line">| private_outlet                           | yes    | no          | no                     | lint        | no       | warning, a... |</span><br><span class="line">| private_over_fileprivate                 | no     | yes         | yes                    | idiomatic   | no       | warning, v... |</span><br><span class="line">| private_subject                          | yes    | no          | no                     | lint        | no       | warning       |</span><br><span class="line">| private_unit_test                        | no     | no          | yes                    | lint        | no       | warning: X... |</span><br><span class="line">| prohibited_interface_builder             | yes    | no          | no                     | lint        | no       | warning       |</span><br><span class="line">| prohibited_super_call                    | yes    | no          | no                     | lint        | no       | warning, e... |</span><br><span class="line">| protocol_property_accessors_order        | no     | yes         | yes                    | style       | no       | warning       |</span><br><span class="line">| quick_discouraged_call                   | yes    | no          | no                     | lint        | no       | warning       |</span><br><span class="line">| quick_discouraged_focused_test           | yes    | no          | no                     | lint        | no       | warning       |</span><br><span class="line">| quick_discouraged_pending_test           | yes    | no          | no                     | lint        | no       | warning       |</span><br><span class="line">| raw_value_for_camel_cased_codable_enum   | yes    | no          | no                     | lint        | no       | warning       |</span><br><span class="line">| reduce_boolean                           | no     | no          | yes                    | performance | no       | warning       |</span><br><span class="line">| reduce_into                              | yes    | no          | no                     | performance | no       | warning       |</span><br><span class="line">| redundant_discardable_let                | no     | yes         | yes                    | style       | no       | warning       |</span><br><span class="line">| redundant_nil_coalescing                 | yes    | yes         | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| redundant_objc_attribute                 | no     | yes         | yes                    | idiomatic   | no       | warning       |</span><br><span class="line">| redundant_optional_initialization        | no     | yes         | yes                    | idiomatic   | no       | warning       |</span><br><span class="line">| redundant_set_access_control             | no     | no          | yes                    | idiomatic   | no       | warning       |</span><br><span class="line">| redundant_string_enum_value              | no     | no          | yes                    | idiomatic   | no       | warning       |</span><br><span class="line">| redundant_type_annotation                | yes    | yes         | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| redundant_void_return                    | no     | yes         | yes                    | idiomatic   | no       | warning       |</span><br><span class="line">| required_deinit                          | yes    | no          | no                     | lint        | no       | warning       |</span><br><span class="line">| required_enum_case                       | yes    | no          | no                     | lint        | no       | No protoco... |</span><br><span class="line">| return_arrow_whitespace                  | no     | yes         | yes                    | style       | no       | warning       |</span><br><span class="line">| self_in_property_initialization          | no     | no          | yes                    | lint        | no       | warning       |</span><br><span class="line">| shorthand_operator                       | no     | no          | yes                    | style       | no       | error         |</span><br><span class="line">| single_test_class                        | yes    | no          | no                     | style       | no       | warning       |</span><br><span class="line">| sorted_first_last                        | yes    | no          | no                     | performance | no       | warning       |</span><br><span class="line">| sorted_imports                           | yes    | yes         | no                     | style       | no       | warning       |</span><br><span class="line">| statement_position                       | no     | yes         | yes                    | style       | no       | (statement... |</span><br><span class="line">| static_operator                          | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| strict_fileprivate                       | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| strong_iboutlet                          | yes    | yes         | no                     | lint        | no       | warning       |</span><br><span class="line">| superfluous_disable_command              | no     | no          | yes                    | lint        | no       | warning       |</span><br><span class="line">| switch_case_alignment                    | no     | no          | yes                    | style       | no       | warning, i... |</span><br><span class="line">| switch_case_on_newline                   | yes    | no          | no                     | style       | no       | warning       |</span><br><span class="line">| syntactic_sugar                          | no     | yes         | yes                    | idiomatic   | no       | warning       |</span><br><span class="line">| test_case_accessibility                  | yes    | yes         | no                     | lint        | no       | warning, a... |</span><br><span class="line">| todo                                     | no     | no          | yes                    | lint        | no       | warning       |</span><br><span class="line">| toggle_bool                              | yes    | yes         | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| trailing_closure                         | yes    | no          | no                     | style       | no       | warning, o... |</span><br><span class="line">| trailing_comma                           | no     | yes         | yes                    | style       | no       | warning, m... |</span><br><span class="line">| trailing_newline                         | no     | yes         | yes                    | style       | no       | warning       |</span><br><span class="line">| trailing_semicolon                       | no     | yes         | yes                    | idiomatic   | no       | warning       |</span><br><span class="line">| trailing_whitespace                      | no     | yes         | yes                    | style       | no       | warning, i... |</span><br><span class="line">| type_body_length                         | no     | no          | yes                    | metrics     | no       | warning: 2... |</span><br><span class="line">| type_contents_order                      | yes    | no          | no                     | style       | no       | warning, o... |</span><br><span class="line">| type_name                                | no     | no          | yes                    | idiomatic   | no       | (min_lengt... |</span><br><span class="line">| unavailable_function                     | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| unneeded_break_in_switch                 | no     | no          | yes                    | idiomatic   | no       | warning       |</span><br><span class="line">| unneeded_parentheses_in_closure_argument | yes    | yes         | no                     | style       | no       | warning       |</span><br><span class="line">| unowned_variable_capture                 | yes    | no          | no                     | lint        | no       | warning       |</span><br><span class="line">| untyped_error_in_catch                   | yes    | yes         | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| unused_capture_list                      | no     | no          | yes                    | lint        | no       | warning       |</span><br><span class="line">| unused_closure_parameter                 | no     | yes         | yes                    | lint        | no       | warning       |</span><br><span class="line">| unused_control_flow_label                | no     | yes         | yes                    | lint        | no       | warning       |</span><br><span class="line">| unused_declaration                       | yes    | no          | no                     | lint        | yes      | severity: ... |</span><br><span class="line">| unused_enumerated                        | no     | no          | yes                    | idiomatic   | no       | warning       |</span><br><span class="line">| unused_import                            | yes    | yes         | no                     | lint        | yes      | severity: ... |</span><br><span class="line">| unused_optional_binding                  | no     | no          | yes                    | style       | no       | warning, i... |</span><br><span class="line">| unused_setter_value                      | no     | no          | yes                    | lint        | no       | warning       |</span><br><span class="line">| valid_ibinspectable                      | no     | no          | yes                    | lint        | no       | warning       |</span><br><span class="line">| vertical_parameter_alignment             | no     | no          | yes                    | style       | no       | warning       |</span><br><span class="line">| vertical_parameter_alignment_on_call     | yes    | no          | no                     | style       | no       | warning       |</span><br><span class="line">| vertical_whitespace                      | no     | yes         | yes                    | style       | no       | warning, m... |</span><br><span class="line">| vertical_whitespace_between_cases        | yes    | yes         | no                     | style       | no       | warning       |</span><br><span class="line">| vertical_whitespace_closing_braces       | yes    | yes         | no                     | style       | no       | N/A           |</span><br><span class="line">| vertical_whitespace_opening_braces       | yes    | yes         | no                     | style       | no       | N/A           |</span><br><span class="line">| void_return                              | no     | yes         | yes                    | style       | no       | warning       |</span><br><span class="line">| weak_delegate                            | yes    | yes         | no                     | lint        | no       | warning       |</span><br><span class="line">| xct_specific_matcher                     | yes    | no          | no                     | idiomatic   | no       | warning       |</span><br><span class="line">| xctfail_message                          | no     | no          | yes                    | idiomatic   | no       | warning       |</span><br><span class="line">| yoda_condition                           | yes    | no          | no                     | lint        | no       | warning       |</span><br><span class="line">+------------------------------------------+--------+-------------+------------------------+-------------+----------+---------------+</span><br></pre></td></tr></table></figure><hr><h1 id="在终端运行-SwiftLint"><a href="#在终端运行-SwiftLint" class="headerlink" title="在终端运行 SwiftLint"></a>在终端运行 SwiftLint</h1><p>SwiftLint 可以配置为一个仓库预提交的钩子，用以保证提交代码的风格一致。它也可以在终端中作为命令运行，只需在项目目录中运行<code>swiftlint</code>即可。运行<code>swiftlint --help</code>查看更多选项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">swiftlint --<span class="built_in">help</span></span><br><span class="line">OVERVIEW: A tool to enforce Swift style and conventions.</span><br><span class="line"></span><br><span class="line">USAGE: swiftlint &lt;subcommand&gt;</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">  --version               Show the version.</span><br><span class="line">  -h, --<span class="built_in">help</span>              Show <span class="built_in">help</span> information.</span><br><span class="line"></span><br><span class="line">SUBCOMMANDS:</span><br><span class="line">  analyze                 Run analysis rules</span><br><span class="line">  docs                    Open SwiftLint documentation website <span class="keyword">in</span> the default web browser</span><br><span class="line">  generate-docs           Generates markdown documentation <span class="keyword">for</span> all rules</span><br><span class="line">  lint (default)          Print lint warnings and errors</span><br><span class="line">  rules                   Display the list of rules and their identifiers</span><br><span class="line">  version                 Display the current version of SwiftLint</span><br><span class="line"></span><br><span class="line">  See <span class="string">'swiftlint help &lt;subcommand&gt;'</span> <span class="keyword">for</span> detailed <span class="built_in">help</span>.</span><br></pre></td></tr></table></figure><p>在（之前新建的项目）HelloSwiftLintApp（目录下）在终端运行<code>swiftlint</code>同样会显示违反了<code>trailing_whitespace</code>规则。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">swiftlint</span><br><span class="line">Linting Swift files <span class="keyword">in</span> current working directory</span><br><span class="line">Linting <span class="string">'HelloSwiftLintApp.swift'</span> (1/2)</span><br><span class="line">Linting <span class="string">'ContentView.swift'</span> (2/2)</span><br><span class="line">...HelloSwiftLint/ContentView.swift:13:1: warning: Trailing Whitespace Violation: Lines should not have trailing whitespace. (trailing_whitespace)</span><br><span class="line">Done linting! Found 1 violation, 0 serious <span class="keyword">in</span> 2 files.</span><br></pre></td></tr></table></figure><hr><h1 id="自动修复-SwiftLint-冲突"><a href="#自动修复-SwiftLint-冲突" class="headerlink" title="自动修复 SwiftLint 冲突"></a>自动修复 SwiftLint 冲突</h1><p>从上面的规则列表可以看出，有一些规则是可以自动修正的。这是直接针对间距规则的，就像上面介绍的额外空格一样。只要可以进行 SwiftLint  分析，就可以进行 SwiftLint 自动修正。</p><p>在终端运行<code>swiftlint --fix</code>就会自动修正那些可以被自动修正的 SwiftLint 冲突。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">swiftlint --fix</span><br><span class="line">Correcting Swift files <span class="keyword">in</span> current working directory</span><br><span class="line">Correcting <span class="string">'HelloSwiftLintApp.swift'</span> (1/2)</span><br><span class="line">Correcting <span class="string">'ContentView.swift'</span> (2/2)</span><br><span class="line">.../HelloSwiftLint/ContentView.swift:13:1 Corrected Trailing Whitespace</span><br><span class="line">Done inspecting 2 files <span class="keyword">for</span> auto-correction!</span><br></pre></td></tr></table></figure><p>或者，可以将自动修复整合到 Xcode 的<code>Build Phase</code>。编辑”<code>Run Script Phase</code>“下的 SwiftLint 脚本。现在，在 Xcode 中编译代码时，添加尾随空格会自动删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:/opt/homebrew/bin"</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">which</span> swiftlint &gt; /dev/null; <span class="keyword">then</span></span><br><span class="line">  swiftlint --fix &amp;&amp; swiftlint</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><img src="https://images.xiaozhuanlan.com/photo/2022/2b071d5d50e0bbf84995cc9ffd989765.png" alt=""></p><hr><h1 id="手动修复-SwiftLint-规则冲突"><a href="#手动修复-SwiftLint-规则冲突" class="headerlink" title="手动修复 SwiftLint 规则冲突"></a>手动修复 SwiftLint 规则冲突</h1><p>并非所有的规则冲突都可以自动修复。对于 SwiftLint 分析生成的警告以及错误，有很多种处理方式。如果只有一到两个冲突，最好的办法是修复它们，然后继续。</p><h2 id="处理-SwiftLint-冲突的一些选项："><a href="#处理-SwiftLint-冲突的一些选项：" class="headerlink" title="处理 SwiftLint 冲突的一些选项："></a>处理 SwiftLint 冲突的一些选项：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 修改代码以符合 SwiftLint 规则</span><br><span class="line">2. 在代码中添加特例，以忽略特定的规则冲突</span><br><span class="line">3. 为项目定制 SwiftLint 规则</span><br><span class="line">4. 忽略这些警告 -- 这不是一个好的选项</span><br></pre></td></tr></table></figure><p>修复冲突是最好的方法，当 SwiftLint 从项目的一开始就被整合时，这可以很容易的被实现。</p><p>下面是我写的示例代码，它遍历了 vertices 数组，创建了一条路径。使用<a href="https://developer.apple.com/documentation/swift/array/1687832-enumerated" target="_blank" rel="noopener">enumerated</a>方法生成了索引以及数据项，使用单个字符<code>n</code>作为变量名会导致编译时错误，仅使用字符作为变量名会导致编译时警告。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (n, pt) <span class="keyword">in</span> vertices.enumerated() &#123;</span><br><span class="line">     n == <span class="number">0</span> ? path.move(to: pt) : path.addLine(to: pt)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些“<strong>标识符名称”（<em>identifier-name</em>）</strong>冲突不能被自动修复。为此类冲突创建一些例外可能会很有诱惑力，但是从长远来看，（此类规则）将有助于代码的可读性以及可维护性。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (index, point) <span class="keyword">in</span> vertices.enumerated() &#123;</span><br><span class="line">     index == <span class="number">0</span> ? path.move(to: point) : path.addLine(to: point)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我发现关于<code>enumerated</code>苹果的示例代码存在着同样的问题！</p><p><img src="https://images.xiaozhuanlan.com/photo/2022/0e9682ea0749ab01000136134b9fa969.png" alt="SwiftLint的标识符冲突无法被修复"></p><p>SwiftLint 的标识符冲突无法被修复</p><hr><h1 id="一些规则的例外情况"><a href="#一些规则的例外情况" class="headerlink" title="一些规则的例外情况"></a>一些规则的例外情况</h1><p>在某些情况下，代码需要与某些外部API或数据源兼容。<a href="https://openweathermap.org/guide" target="_blank" rel="noopener">Open Weather</a> API提供了如<a href="https://swdevnotes.com/swift/2022/read-json-with-codeable-in-swift/" target="_blank" rel="noopener">Read JSON with codeable in Swift</a>中所描述的 JSON 数据。这些天气数据中<code>main</code>数据段含有一些有下划线的标识符，比如，<code>feels_like</code> 。用于 Swift 解码此 JSON 的结构体必须与 JSON 中的字段名称匹配，由于 SwiftLint 的<code>”***identifier_name***”</code>规则，Swift 代码会产生编译时错误。</p><h2 id="天气数据的示例-JSON"><a href="#天气数据的示例-JSON" class="headerlink" title="天气数据的示例 JSON"></a>天气数据的示例 JSON</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"coord"</span>: &#123;</span><br><span class="line">        <span class="attr">"lon"</span>: <span class="number">-122.08</span>,</span><br><span class="line">        <span class="attr">"lat"</span>: <span class="number">37.39</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"weather"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="number">800</span>,</span><br><span class="line">            <span class="attr">"main"</span>: <span class="string">"Clear"</span>,</span><br><span class="line">            <span class="attr">"description"</span>: <span class="string">"clear sky"</span>,</span><br><span class="line">            <span class="attr">"icon"</span>: <span class="string">"01d"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"base"</span>: <span class="string">"stations"</span>,</span><br><span class="line">    <span class="attr">"main"</span>: &#123;</span><br><span class="line">        <span class="attr">"temp"</span>: <span class="number">9.4</span>,</span><br><span class="line">        <span class="attr">"feels_like"</span>: <span class="number">8.71</span>,</span><br><span class="line">        <span class="attr">"temp_min"</span>: <span class="number">7.22</span>,</span><br><span class="line">        <span class="attr">"temp_max"</span>: <span class="number">11.11</span>,</span><br><span class="line">        <span class="attr">"pressure"</span>: <span class="number">1023</span>,</span><br><span class="line">        <span class="attr">"humidity"</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">"sea_level"</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"visibility"</span>: <span class="number">16093</span>,</span><br><span class="line">    <span class="attr">"wind"</span>: &#123;</span><br><span class="line">        <span class="attr">"speed"</span>: <span class="number">1.5</span>,</span><br><span class="line">        <span class="attr">"deg"</span>: <span class="number">350</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"clouds"</span>: &#123;</span><br><span class="line">        <span class="attr">"all"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"dt"</span>: <span class="number">1560350645</span>,</span><br><span class="line">    <span class="attr">"sys"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">5122</span>,</span><br><span class="line">        <span class="attr">"message"</span>: <span class="number">0.0139</span>,</span><br><span class="line">        <span class="attr">"country"</span>: <span class="string">"US"</span>,</span><br><span class="line">        <span class="attr">"sunrise"</span>: <span class="number">1560343627</span>,</span><br><span class="line">        <span class="attr">"sunset"</span>: <span class="number">1560396563</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"timezone"</span>: <span class="number">-25200</span>,</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">420006353</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Mountain View"</span>,</span><br><span class="line">    <span class="attr">"cod"</span>: <span class="number">200</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">WeatherRawData</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> timezone: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">var</span> weather: [<span class="type">WeatherData</span>]</span><br><span class="line">    <span class="keyword">var</span> main: <span class="type">MainData</span></span><br><span class="line">    <span class="keyword">var</span> wind: <span class="type">WindData</span></span><br><span class="line">    <span class="keyword">var</span> clouds: <span class="type">CloudsData</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">WeatherData</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> id: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">var</span> main: <span class="type">String</span></span><br><span class="line">        <span class="keyword">var</span> description: <span class="type">String</span></span><br><span class="line">        <span class="keyword">var</span> icon: <span class="type">String</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MainData</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> temp: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">var</span> feels_like: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">var</span> temp_min: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">var</span> temp_max: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">var</span> pressure: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">var</span> humidity: <span class="type">Double</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">WindData</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> speed: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">var</span> deg: <span class="type">Double</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CloudsData</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> all: <span class="type">Double</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.xiaozhuanlan.com/photo/2022/5cb95638b5ab173aa5e0433f8810b62c.png" alt=""></p><p>不是每个（冲突）都需要被抛出。在这种情况下，可以在出现问题的代码之前简单地禁用 SwiftLint 规则，然后重新启用该规则。显然，如果这些启用/禁用代码片段在代码中到处都是，那就不太好了。这种技术应该谨慎地被使用。如果发现需要在多个位置禁用同一规则，请考虑为整个项目禁用该规则。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">WeatherRawData</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> timezone: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">var</span> weather: [<span class="type">WeatherData</span>]</span><br><span class="line">    <span class="keyword">var</span> main: <span class="type">MainData</span></span><br><span class="line">    <span class="keyword">var</span> wind: <span class="type">WindData</span></span><br><span class="line">    <span class="keyword">var</span> clouds: <span class="type">CloudsData</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">WeatherData</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> id: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">var</span> main: <span class="type">String</span></span><br><span class="line">        <span class="keyword">var</span> description: <span class="type">String</span></span><br><span class="line">        <span class="keyword">var</span> icon: <span class="type">String</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// swiftlint:disable identifier_name</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MainData</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> temp: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">var</span> feels_like: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">var</span> temp_min: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">var</span> temp_max: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">var</span> pressure: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">var</span> humidity: <span class="type">Double</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// swiftlint:enable identifier_name</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">WindData</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> speed: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">var</span> deg: <span class="type">Double</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CloudsData</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> all: <span class="type">Double</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.xiaozhuanlan.com/photo/2022/4dc45cd25a4715f7b3009b7dfa00746b.png" alt=""></p><hr><h1 id="不要急于禁用规则"><a href="#不要急于禁用规则" class="headerlink" title="不要急于禁用规则"></a>不要急于禁用规则</h1><p>偶尔会有一些 SwiftLint 规则的特例，但是不要急于禁用规则。在上面的例子中，有一种更好的方法，可以使用<code>CodingKeys</code>将 Swift 变量名映射到 JSON 内容。与其注释 SwiftLint 规则，不如使用属性名<code>feelsLike</code>并指定<code>feels_like</code>的可选值来匹配JSON数据。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swiftlint:disable identifier_name</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MainData</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> temp: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">var</span> feels_like: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">var</span> temp_min: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">var</span> temp_max: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">var</span> pressure: <span class="type">Double</span></span><br><span class="line">        <span class="keyword">var</span> humidity: <span class="type">Double</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// swiftlint:enable identifier_name</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MainData</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> temp: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> feelsLike: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> tempMin: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> tempMax: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> pressure: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> humidity: <span class="type">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span>: <span class="title">String</span>, <span class="title">CodingKey</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> temp</span><br><span class="line">        <span class="keyword">case</span> feelsLike = <span class="string">"feels_like"</span></span><br><span class="line">        <span class="keyword">case</span> tempMin = <span class="string">"temp_min"</span></span><br><span class="line">        <span class="keyword">case</span> tempMax = <span class="string">"temp_max"</span></span><br><span class="line">        <span class="keyword">case</span> pressure</span><br><span class="line">        <span class="keyword">case</span> humidity</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.xiaozhuanlan.com/photo/2022/6e09c021cdaeba6da6931c7948814b44.png" alt="使用CodingKeys来映射JSON变量好于禁用SwiftLint规则"></p><p>使用 CodingKeys 来映射 JSON 变量好于禁用 SwiftLint 规则</p><hr><h1 id="自定义-SwiftLint-规则"><a href="#自定义-SwiftLint-规则" class="headerlink" title="自定义 SwiftLint 规则"></a>自定义 SwiftLint 规则</h1><p>如果将 SwiftLint 添加到显示数百个问题的现有项目中，“修复所有冲突”的方法可能非常困难。在这种情况下，将 SwiftLint 配置添加到项目中可能更合适。这是一个<a href="https://yaml.org/" target="_blank" rel="noopener">YAML</a>文件，在该文件中可以禁用规则，列出选择开启的规则，或者将规则仅限于此文件中的规则。这样， SwiftLint 就可以无限定制。有关更多详细信息，请参阅<a href="https://github.com/realm/SwiftLint#configuration" target="_blank" rel="noopener">SwiftLint配置</a>部分。</p><p>警告的一个例子是代码中存在 TODO 注释。SwiftLint 将这些 TODO 标记为警告，以表示这些地方还有未完成的工作。</p><p><img src="https://images.xiaozhuanlan.com/photo/2022/ae2caf754d5f288d786c77ef116c676b.png" alt="TODO注释被SwiftLint默认编译成一个警告"></p><p>TODO 注释被 SwiftLint 默认编译成一个警告</p><p>很多时候你既想合并代码时保留这些 TODO，也希望在编译时没有这些警告。可以在每个单独的<code>TODO</code>注释前面加<code>disable/enable</code>，也可以在<code>.swiftlint.yml</code>文件中来禁用整个整个项目的此规则。将下方的<code>.swiftlint.yml</code>文件添加到项目中，会允许项目编译而不生成 TODO 注释警告，其他规则不受影响。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">disabled_rules:</span> <span class="comment"># rule identifiers to exclude from running</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">todo</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"Hello, world!"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Remove this function when done</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> a = <span class="number">24</span></span><br><span class="line">            <span class="type">Text</span>(<span class="string">"second line <span class="subst">\(a)</span>"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.xiaozhuanlan.com/photo/2022/ca1845d3007fa7b6e89917e80e034115.png" alt="TODO注释没有造成警告，其他规则不受影响"></p><p>TODO 注释没有造成警告，其他规则不受影响</p><p>在已有的规则上使用 SwiftLint 最简单的方法是：</p><ol><li>安装 SwiftLint</li><li>通过编译阶段脚本，将 SwiftLint 整合进 Xcode 项目中</li><li>编译以评估所有警告和错误</li><li>添加<code>.swiftlint.yml</code>文件，并禁用冲突数最多的规则</li><li>一次启用一条规则并修复代码中的问题</li></ol><hr><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>对于任何 Swift 开发者来说，使用 SwiftLint 都是必要的。它有助于避免团队中关于代码样式的争论，以及建立代码风格的统一性。就我而言，它帮我摆脱了诸如创建单字符标识符等坏习惯。</p><p>将 SwiftLint 添加到已有的代码库可能比添加到新项目要复杂得多，因为它可能会显示数百个警告和错误。通过配置规则，并逐渐开启更多的规则，可以在现有项目中采用 SwiftLint。</p><p>SwiftLint 的自动修复冲突的能力非常强大，通过自动修复冲突可以显著解决数百个冲突的初始情况。只需要确保代码在进行大范围的自动更改之前已经纳入了版本控制，这样在出问题时就能很容易撤销。</p><hr><h1 id="译者的一些补充"><a href="#译者的一些补充" class="headerlink" title="译者的一些补充"></a>译者的一些补充</h1><h2 id="关于-SwiftLint-的安装"><a href="#关于-SwiftLint-的安装" class="headerlink" title="关于 SwiftLint 的安装"></a>关于 SwiftLint 的安装</h2><p>安装的方式有几种，原文介绍的是使用 homebrew 安装。译者比较推荐直接使用<strong><a href="https://cocoapods.org/" target="_blank" rel="noopener">CocoaPods</a>:</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod '<span class="type">SwiftLint'</span>, '<span class="number">0.46</span>.<span class="number">5</span>'</span><br></pre></td></tr></table></figure><p>能清晰明了的指明项目使用了 SwiftLint ，同时也方便指定版本。</p><h2 id="SwiftLint-不仅仅能帮助解决格式问题"><a href="#SwiftLint-不仅仅能帮助解决格式问题" class="headerlink" title="SwiftLint 不仅仅能帮助解决格式问题"></a>SwiftLint 不仅仅能帮助解决格式问题</h2><p>SwiftLint 不仅仅能解决很多格式问题，它的功能还有很多。比如限制一个函数参数的个数，函数、文件最长多少行，使用更精简，更<strong>Swift</strong> 的函数等等。这能在很大程度上帮助我们写出高质量的代码。</p><p>很多团队伙伴在写代码时，一开始的函数，文件可能没那么臃肿。但是随着功能的增加，不断地往一个函数添加参数，不断修改函数的功能，不断往一个文件增加新的函数等等，各个地方开始变得臃肿。当 SwiftLint 告诉你函数参数个数超过了指定的个数，函数行数超过了最大值，文件超过了最大行数等等时，就应该认真考虑是不是该重构了。</p><h2 id="在已有项目中添加-SwiftLint"><a href="#在已有项目中添加-SwiftLint" class="headerlink" title="在已有项目中添加 SwiftLint"></a>在已有项目中添加 SwiftLint</h2><p>在添加 SwiftLint 之前，最重要的是全体应该开一个简短的会。用来同步以及确定规则。让所有人充分表达意见，而不是一个人制定，有些人不赞同。将一些模棱两可的规则确定清楚之后，写入到 SwiftLint 配置当中，所有人都应该遵守。</p><p>译者的项目非常的庞大，刚添加 SwiftLint 的时候，警告加错误高达5000多了，根本改不过来。我采用的方法是分路径配置 SwiftLint。那些比较老的，不怎么会动的目录采用较为宽松的配置。新起一个目录，之后的新代码原则上都应该在此目录之下。此目录的配置会较为严格。</p><p>Hook <code>git pre-commit</code>在提交之前做规则检查，如有问题，直接报错，无法提交代码。这样就不会产生新的警告和错误，慢慢的再修改之前的代码，经过1年多，整个项目基本就覆盖全了。</p><p>另外，关于项目的警告也需要管理，很多时候有些成员写代码的时候无视警告，导致项目警告几百个，而且越来越多。这就导致警告失去了它原有的作用，译者项目的警告是0，能够很轻松的定位哪个地方发出了新的警告。同时代码 Review 也非常重要，有些成员为了避免麻烦，各个地方都直接 disable 了 SwiftLint 的规则，这是不应该的。</p><p>最后，永远记得你只是在使用的只是一个工具，而不是目的。请充分衡量成本和收益。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;代码风格可能是一个有争议的话题，并且在开发人员之间引发一些激烈的讨论。使用工具强制执行一套代码风格规则对于避免一些争论，以及确保在整个项目中保持代码风格的一致性非常有帮助。SwiftLint 可以很容易的整合进 Xcode 项目中，以便在编译时将代码风格冲突标记为警告或者错误。&lt;/p&gt;
    
    </summary>
    
      <category term="软件工具库" scheme="https://fanbaoying.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
    
    
      <category term="工具" scheme="https://fanbaoying.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Swift 中的热重载</title>
    <link href="https://fanbaoying.github.io/Swift-%E4%B8%AD%E7%9A%84%E7%83%AD%E9%87%8D%E8%BD%BD/"/>
    <id>https://fanbaoying.github.io/Swift-中的热重载/</id>
    <published>2022-08-25T03:41:55.000Z</published>
    <updated>2022-08-25T03:52:45.766Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这一年是2040年，我们最新的 MacBook M30X 处理器可以感知到瞬间编译大型 Swift 项目，听起来很神奇，对吧？除此之外，编译代码库只是我们迭代周期的一部分。包括：</p><ul><li>重新启动它（或将其部署到设备）</li><li>导航到您在应用程序中的先前位置</li><li>重新生成您需要的数据。</li></ul><p>如果您只需要做一次的话，听起来还不错。但是如果您和我一样，在特别的一天中，对代码库进行 200 - 500 次迭代，该怎么办呢？它增加了。</p><p>有一种更好的方法，被其他平台所接受，并且可以在 Swift/iOS 生态系统中实现。我已经用了十多年了。</p><p>从今天开始，您想每周节省多达 10 小时的工作时间吗？</p><a id="more"></a><h2 id="热重载"><a href="#热重载" class="headerlink" title="热重载"></a>热重载</h2><p>热重载是关于摆脱编译整个应用程序并尽可能避免部署/重新启动周期，同时允许您编辑正在运行的应用程序代码并且能立即看到更改。</p><p>这种流程改进可以每天为您节省数小时的开发时间。我跟踪我的工作一个多月，对我来说，每天节省了 1-2 小时。</p><p>坦白地说，如果每周节省10个小时的开发时间都不能说服您去尝试，那么我认为任何方法都不能说服你。</p><h2 id="其他平台在做什么？"><a href="#其他平台在做什么？" class="headerlink" title="其他平台在做什么？"></a>其他平台在做什么？</h2><p>如果您只使用 Apple 平台，您会惊讶地发现有好多平台几十年前已经采用了热重载。无论您是编写 Node 还是任何其他 JS 框架，都有一个使用热重载的设置。 Go 也提供了热重载（本博客使用了该特性）</p><p>另一个例子是谷歌的 Flutter 架构，从一开始就设计用于热重载。如果您与从事 Flutter 工作的工程师交谈，你会发现他们最喜欢 Flutter 开发者体验的一点就是能够实时编写他们的应用程序。当我为《纽约时报》写了一个拼字游戏时，我很喜欢它。</p><p>微软最近推出了 <a href="https://devblogs.microsoft.com/visualstudio/visual-studio-2022-now-available/" target="_blank" rel="noopener">Visual Studio 2022</a>，并为 .NET 和 标准 C++ 应用程序提供热重载，在过去的十年中，微软在开发工具和经验方面一直在大杀四方，所以这并不令人惊讶。</p><h2 id="苹果生态系统怎么样？"><a href="#苹果生态系统怎么样？" class="headerlink" title="苹果生态系统怎么样？"></a>苹果生态系统怎么样？</h2><p>早在 2014 年推出时，很多人都对 Swift Playgrounds 感到敬畏，因为它们允许我们快速迭代并查看代码的结果，但它们并不能很好地工作，因为它存在崩溃、挂起等问题。不能支持整个iPad环境。</p><p>在它们发布后不久，我启动了一个名为 Objective-C Playgrounds 的开源项目，它比官方 Playgrounds 运行得更快、更可靠。我的想法是设计一个架构/工作流程，利用我已经使用了几年的 <a href="https://github.com/DyCI/dyci-main" target="_blank" rel="noopener">DyCI</a>  代码注入工具，该工具已经由 Paul 制作。</p><p>自从 Swift Playgrounds 存在以来，已经过去了八年，而且它们变得更好了，但它们可靠吗？人们是否在使用它们来推动开发？</p><blockquote><p><em>以我的经验：并非如此。Playgrounds 在大型项目中往往不太可靠或适用。</em></p></blockquote><p>SwiftUI 出现了，它是一项了不起的技术（尽管仍然存在错误），它引入了与 Playgrounds 非常相似的 Swift Previews 的想法，它们有什么好处吗？</p><p>类似的故事，当它工作的时候是很好的，但是在更大的项目中，它的工作是不可靠的，而且往往中断的次数比它们工作的次数多。如果你有任何错误，他们不会为你提供调试代码的能力，因此，采用的情况有限。</p><h2 id="我们需要等待-Apple-吗？"><a href="#我们需要等待-Apple-吗？" class="headerlink" title="我们需要等待 Apple 吗？"></a>我们需要等待 Apple 吗？</h2><p>如果你关注我一段时间，你就已经知道答案了，绝对不要。毕竟，我的职业生涯是构建普通 Apple 解决方案无法解决的问题：从像 <a href="https://github.com/krzysztofzablocki/Sourcery" target="_blank" rel="noopener">Sourcery</a> 这样的语言扩展、像 <a href="http://merowing.info/sourcery-pro/" target="_blank" rel="noopener">Sourcery Pro</a> 这样的 Xcode 改进，再到 <a href="https://github.com/krzysztofzablocki/LifetimeTracker" target="_blank" rel="noopener">LifetimeTracker</a> 以及许多其他开源工具。</p><p>我们可以利用我最初在 2014 Playgrounds 中使用的相同方法。我已经使用它十多年了，并且在数十个 Swift 项目中使用它并取得了巨大的成功！</p><p>许多年前，我从使用  <a href="https://github.com/DyCI/dyci-main" title="DyCI" target="_blank" rel="noopener">DyCI</a>  切换到 <strong>InjectionForXcode</strong>，通过利用 LLVM 互操作而不是任何 swizzling ，它的效果更好。它是一个完全免费的开源工具，您可以在菜单栏中运行，它是由多产的工程师 John Holdsworth 创建的。你应该看看他的书 <a href="http://books.apple.com/us/book/id1551005489" title="Swift Secrets" target="_blank" rel="noopener">Swift Secrets</a>。</p><p>我意识到 <a href="https://github.com/krzysztofzablocki/Playgrounds" target="_blank" rel="noopener">Playgrounds</a> 的方法可能过于笨重，所以今天，我开源了。一个非常专注的名为 <a href="https://github.com/krzysztofzablocki/Inject" target="_blank" rel="noopener">Inject</a> 的微型库，与 <a href="https://github.com/johnno1962/InjectionIII" target="_blank" rel="noopener">InjectionForXcode</a> 搭配使用时，将使您的 Apple 开发更加高效和愉快！</p><p>但不要只相信我的话。看看 Alexandra 和 Nate 的反馈，在我将这个工作流程引入  <a href="https://thebrowser.company/" target="_blank" rel="noopener">The Browser Company</a> 设置之前，他们已经非常精通了，这使得它更加令人印象深刻。</p><p><img src="https://merowing.info/2022/Feedback.png" alt=""></p><h2 id="Inject"><a href="#Inject" class="headerlink" title="Inject"></a>Inject</h2><p>这个小型库是完全通用的，无论您使用 <code>UIKit</code>、 <code>AppKit</code> 还是 <code>SwiftUI</code>，您都可以使用它。</p><p>您无需为生产应用程序添加条件或删除 <code>Inject</code> 代码。它变成了无操作内联代码，将在非调试版本中被编译过程剥离。您可以在每个视图中集成一次，并持续使用数年。</p><p>请参考 <a href="https://github.com/krzysztofzablocki/Inject" title="GitHub repo" target="_blank" rel="noopener">GitHub repo</a> 中关于配置项目的说明。现在让我们来看看您有哪些工作流程选项。</p><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><h3 id="SwiftUI"><a href="#SwiftUI" class="headerlink" title="SwiftUI"></a>SwiftUI</h3><p>只需要两行字就可以使任何 SwiftUI 启用实时编程，而当您这样做时，您将拥有比使用 Swift Previews 更快的工作流程，同时能够使用实际的生产数据。</p><p>这是我的 <a href="http://merowing.info/sourcery-pro/" title="Sourcery Pro" target="_blank" rel="noopener">Sourcery Pro</a> 应用程序的示例，其中加载了我所有的实际数据和逻辑，使我能够即时快速迭代整个应用程序设计，而无需任何重新启动、重新加载或类似的事情。</p><p>看看这个开发工作流程有多快吧，告诉我你宁愿在我每次接触代码时等待Xcode的重新构建和重新部署。</p><h3 id="UIKit-AppKit"><a href="#UIKit-AppKit" class="headerlink" title="UIKit / AppKit"></a>UIKit / AppKit</h3><p>我们需要一种方法来清理标准命令式UI框架的代码注入阶段之间的状态。</p><p>我创建了 <code>Host</code> 的概念并且在这种情况下工作的很好。有两个：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Inject.ViewHost</span><br><span class="line">- Inject.ViewControllerHost</span><br></pre></td></tr></table></figure><p>我们如何集成它？我们把我们想迭代的类包装在父级，因此我们不修改要注入的类型，而是改变父级的调用站点。</p><p>例如，如果你有一个 SplitViewController ，它创建了 PaneA 和 PaneB ，而你想在PaneA 中迭代布局/逻辑代码，你就修改 SplitViewController 中的调用站点。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">paneA = <span class="type">Inject</span>.<span class="type">ViewHost</span>(</span><br><span class="line">  <span class="type">PaneAView</span>(whatever: arguments, you: want)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这就是你需要做的所有改变。注入现在允许你更改 PaneAView 中的任何东西，除了它的初始化API。这些变化将立即反映在你的应用程序中。</p><hr><p>一个更具体的例子？</p><ul><li><p>我下载了 <a href="https://github.com/dkhamsing/covid19.swift" target="_blank" rel="noopener">Covid19 App</a></p></li><li><p>添加 <code>-Xlinker -interposable</code> 到 <code>Other Linker Flags</code></p></li><li><p>交换了一行 <code>Covid19TabController.swift:L63</code> 行</p></li></ul><p>从这句：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vc = <span class="type">TwitterViewController</span>(title: <span class="type">Tab</span>.twitter.name, usernames: <span class="type">Twitter</span>.content)</span><br></pre></td></tr></table></figure><p>替换为：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vc = <span class="type">Inject</span>.<span class="type">ViewControllerHost</span>(<span class="type">TwitterViewController</span>(title: <span class="type">Tab</span>.twitter.name, usernames: <span class="type">Twitter</span>.content))</span><br></pre></td></tr></table></figure><p>现在，我可以在不重新启动应用程序的情况下迭代控制器设计。</p><h3 id="这是如何运作的呢"><a href="#这是如何运作的呢" class="headerlink" title="这是如何运作的呢?"></a>这是如何运作的呢?</h3><p>Hosts 利用了自动闭包，因此每次您注入代码时，我们都会使用与最初相同的参数创建您类型的新实例，从而允许您迭代任何代码、内存布局和其他所有内容。你唯一不能改变的是你的初始化 API。</p><blockquote><p>Host 的变化不能完全内联，所以这些类在 Release 构建中被删除。最简单的方法是做一个单独的提交，交换此单行代码，然后在工作流程的最后删除它。</p></blockquote><h3 id="逻辑注入如何呢？"><a href="#逻辑注入如何呢？" class="headerlink" title="逻辑注入如何呢？"></a>逻辑注入如何呢？</h3><p>像 MVVM / MVC 这样的标准架构可以获得免费的逻辑注入，重新编译你的类，当方法重新执行时，你已经在使用新代码了。</p><p>如果像我一样，你喜欢 <a href="https://github.com/pointfreeco/swift-composable-architecture" title="PointFree Composable Architecture" target="_blank" rel="noopener">PointFree Composable Architecture</a>，你可能想要注入 reducer 代码。 Vanilla TCA 不允许这样做，因为 reducer 代码是一个免费功能，不能直接用注入替换，但我们在 The Browser Company 的分支 支持它。</p><p>当我最初开始咨询 TBC 时，我想要的第一件事是将 <code>Inject</code> 和 <code>XcodeInjection</code> 集成到我们的工作流程中。公司管理层非常支持。</p><p>如果您切换到我们的 <a href="https://github.com/thebrowsercompany/swift-composable-architecture/tree/develop" target="_blank" rel="noopener">TCA 分支</a>(我们保持最新)，你可以在 UI 和 TCA 层上使用 <code>Inject</code> 。</p><h3 id="它有多可靠？"><a href="#它有多可靠？" class="headerlink" title="它有多可靠？"></a>它有多可靠？</h3><p>没有什么是完美的，但我已经使用它十多年了。它比 Apple 技术（Playgrounds / Previews）可靠得多。</p><p>如果您投入时间学习它，它将为您和您的团队节省数千小时！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这一年是2040年，我们最新的 MacBook M30X 处理器可以感知到瞬间编译大型 Swift 项目，听起来很神奇，对吧？除此之外，编译代码库只是我们迭代周期的一部分。包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重新启动它（或将其部署到设备）&lt;/li&gt;
&lt;li&gt;导航到您在应用程序中的先前位置&lt;/li&gt;
&lt;li&gt;重新生成您需要的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果您只需要做一次的话，听起来还不错。但是如果您和我一样，在特别的一天中，对代码库进行 200 - 500 次迭代，该怎么办呢？它增加了。&lt;/p&gt;
&lt;p&gt;有一种更好的方法，被其他平台所接受，并且可以在 Swift/iOS 生态系统中实现。我已经用了十多年了。&lt;/p&gt;
&lt;p&gt;从今天开始，您想每周节省多达 10 小时的工作时间吗？&lt;/p&gt;
    
    </summary>
    
      <category term="Swift 文集" scheme="https://fanbaoying.github.io/categories/Swift-%E6%96%87%E9%9B%86/"/>
    
    
      <category term="Swift" scheme="https://fanbaoying.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>在 Swift 中编写脚本：Git Hooks</title>
    <link href="https://fanbaoying.github.io/%E5%9C%A8-Swift-%E4%B8%AD%E7%BC%96%E5%86%99%E8%84%9A%E6%9C%AC%EF%BC%9AGit-Hooks/"/>
    <id>https://fanbaoying.github.io/在-Swift-中编写脚本：Git-Hooks/</id>
    <published>2022-08-25T03:41:45.000Z</published>
    <updated>2022-08-25T03:53:23.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这周，我决定完成因为工作而推迟了一周的TODO事项来改进我的Git工作流程。</p><p>为了在提交的时候尽可能多的携带上下文信息，我们让提交信息包含了正在处理的JIRA编号。这样，将来如果有人回到我们现在正在提交的源代码，输入<code>git blame</code>，就能很容易的找出JIRA的编号。</p><p>每次提交都包含这些信息可能会有点乏味（如果你使用了类似<a href="https://en.wikipedia.org/wiki/Test-driven_development" target="_blank" rel="noopener">TDD</a>之类的方法，您会提交的更加频繁），而且，尽管像<a href="https://www.git-tower.com/mac" target="_blank" rel="noopener">Tower</a>这样的git客户端会让此变得容易一些，但是您仍然需要手动将问题编号复制粘贴到提交消息中，并且记住这样做，这是我最难以解决的问题😅。</p><p>出于这个原因，我开始寻求了解git hooks，试图自动化这项任务。我的想法是能够从git分支获取JIRA编号（我们有一个分支命名约定，形如：story/ISSUE-1234_branch-name），然后将提交消息更改为以JIRA编号为前缀，从而生成最终结果消息：ISSUE-1234-其他原本的提交信息。</p><a id="more"></a><h2 id="用git-hooks自动生成提交信息"><a href="#用git-hooks自动生成提交信息" class="headerlink" title="用git hooks自动生成提交信息"></a>用git hooks自动生成提交信息</h2><p><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks" target="_blank" rel="noopener">Git Hooks</a> 提供了一种在运行某些重要的git命令时触发自定义操作的方法，例如在一次commit或者push之前执行一些操作。</p><p>在本例中，我使用了<strong><code>commit-msg</code></strong>钩子，它能够在当前提交信息生效前修改此信息。钩子由一个参数调用，该参数是指向包含用户输入的提交消息的文件的路径。这意味着，为了改变提交消息，我们只需要从文件中读取、修改其内容，然后写回调用挂钩的文件。</p><p>要创建git钩子，我们需要在<strong><code>.git/hooks</code></strong>路经下提供一个可执行脚本。我的钩子放在了<strong><code>.git/hooks/commit-msg</code></strong>路经之下。</p><h2 id="为什么我使用Swift？"><a href="#为什么我使用Swift？" class="headerlink" title="为什么我使用Swift？"></a>为什么我使用Swift？</h2><p>Git hooks可以使用任何你熟悉的，并且在主机上安装了解释器（通过<code>shebang</code>来指定）的脚本语言来编写。</p><p>虽然有很多更受欢迎的选项，比如<code>bash</code>、<code>ruby</code>等等，但我还是决定使用Swift。因为我对Swift更熟悉，因为我每天都在使用它，而且我真的非常喜欢它强大的类型语法以及低内存占用。</p><h3 id="让我们开始吧"><a href="#让我们开始吧" class="headerlink" title="让我们开始吧"></a>让我们开始吧</h3><p>你可以使用任何你喜欢的IDE编写Swift脚本。但是如果你想要有适当的代码补全以及调试能力，你可以为其创建一个Xcode项目。为此，在<strong><code>macOS</code></strong>下选择<strong><code>Command Line Tool</code></strong>创建一个新的项目。</p><p><img src="https://images.xiaozhuanlan.com/photo/2022/2618799d263fd7748da9527351be5864.png" alt=""></p><p>在创建的文件顶部加上Swift shebang，引入<code>Foundation</code>库。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/swift</span><br><span class="line"><span class="keyword">import</span> Foundation</span><br></pre></td></tr></table></figure><p>这样当git执行文件时，shebang将确保使用文件作为输入数据调用/usr/bin/swift二进制文件。</p><h3 id="编写git钩子"><a href="#编写git钩子" class="headerlink" title="编写git钩子"></a>编写git钩子</h3><p>项目已经全部设置好，所以现在可以编写git挂钩了。让我们走完所有的步骤。</p><h4 id="检索提交消息"><a href="#检索提交消息" class="headerlink" title="检索提交消息"></a>检索提交消息</h4><p>要做的第一件事就是从脚本传进来的参数检索临时提交文件的路径然后读取文件内容。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> commitMessageFile = <span class="type">CommandLine</span>.arguments[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> data = <span class="type">FileManager</span>.<span class="keyword">default</span>.contents(atPath: commitMessageFile),</span><br><span class="line">      <span class="keyword">let</span> commitMessage = <span class="type">String</span>(data: data, encoding: .utf8) <span class="keyword">else</span> &#123;</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码片段中，我们首先拿到了提交文件的路径（<code>git</code>传递给脚本），然后通过<code>FileManagerAPI</code>读取了文件内容。如果因为一些原因检索失败了，我们退出（<code>exit</code>）脚本同时返回状态码<code>1</code>，这将告诉git终止此次提交。</p><hr><p><strong>注意:</strong></p><p>根据<a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks" target="_blank" rel="noopener">git hooks文档</a>，如果任何钩子脚本返回的状态码大于<code>0</code>，它都将终止即将要要发生的操作。这将在本文后面的部分中使用，以便在不需要做任何修改而优雅地退出。</p><hr><h4 id="检索问题编号"><a href="#检索问题编号" class="headerlink" title="检索问题编号"></a>检索问题编号</h4><p>既然提交信息的字符串已经可用，接下来就需要找到当前分支并从中检索到问题编号。正如本文前面提到的，这只可能是因为团队对分支命名的严格格式，在其名称中始终包含JIRA编号（例如，<strong><code>story/ISSUE-1234_some-awesome-feature-work</code></strong>）。</p><p>为了实现这一点，我们必须检索当前的工作分支，然后用<a href="https://nshipster.com/swift-regular-expressions/" target="_blank" rel="noopener">正则表达式</a>从中检索问题编号。</p><p>让我们从添加脚本调用<code>zsh shell</code>命令的能力开始。通过使用<code>Process</code>api，脚本可以与<code>git</code>命令行界面交互。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">shell</span><span class="params">(<span class="number">_</span> command: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> task = <span class="type">Process</span>()</span><br><span class="line">    <span class="keyword">let</span> outputPipe = <span class="type">Pipe</span>()</span><br><span class="line">    <span class="keyword">let</span> errorPipe = <span class="type">Pipe</span>()</span><br><span class="line">    </span><br><span class="line">    task.standardOutput = outputPipe</span><br><span class="line">    task.standardError = errorPipe</span><br><span class="line">    task.arguments = [<span class="string">"-c"</span>, command]</span><br><span class="line">    task.executableURL = <span class="type">URL</span>(fileURLWithPath: <span class="string">"/bin/zsh"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> task.run()</span><br><span class="line">        task.waitUntilExit()</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"There was an error running the command: <span class="subst">\(command)</span>"</span>)</span><br><span class="line">        <span class="built_in">print</span>(error.localizedDescription)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> outputData = <span class="keyword">try</span>? outputPipe.fileHandleForReading.readToEnd(),</span><br><span class="line">          <span class="keyword">let</span> outputString = <span class="type">String</span>(data: outputData, encoding: .utf8) <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Print error if needed</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> errorData = <span class="keyword">try</span>? errorPipe.fileHandleForReading.readToEnd(),</span><br><span class="line">           <span class="keyword">let</span> errorString = <span class="type">String</span>(data: errorData, encoding: .utf8) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Encountered the following error running the command:"</span>)</span><br><span class="line">            <span class="built_in">print</span>(errorString)</span><br><span class="line">        &#125;</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> outputString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在实现了<code>shell</code>命令，那么就可以使用它询问<code>git</code>当前分支是什么，然后尽可能的从中提取出问题编号。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gitBranchName = shell(<span class="string">"git rev-parse --abbrev-ref HEAD"</span>)</span><br><span class="line">    .trimmingCharacters(<span class="keyword">in</span>: .newlines)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stringRange = <span class="type">NSRange</span>(location: <span class="number">0</span>, length: gitBranchName.utf16.<span class="built_in">count</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> regex = <span class="keyword">try</span>? <span class="type">NSRegularExpression</span>(pattern: #<span class="string">"(\w*-\d*)"</span>#, options: .anchorsMatchLines),</span><br><span class="line">    <span class="keyword">let</span> match = regex.firstMatch(<span class="keyword">in</span>: gitBranchName, range: stringRange) <span class="keyword">else</span> &#123;</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> range = match.range(at: <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ticketNumber = (gitBranchName <span class="keyword">as</span> <span class="type">NSString</span>)</span><br><span class="line">    .substring(with: range)</span><br><span class="line">    .trimmingCharacters(<span class="keyword">in</span>: .newlines)</span><br></pre></td></tr></table></figure><p>请注意，如果没有匹配项（即分支名称中不包含JIRA问题编号），脚本将以0的状态退出，允许提交继续进行，而不进行任何更改。这是为了不破坏诸如main或其他测试/调查分支中的工作流。</p><h4 id="修改提交信息"><a href="#修改提交信息" class="headerlink" title="修改提交信息"></a>修改提交信息</h4><p>为了更改提交消息，必须将脚本开头读取的文件内容（包含提交消息）写回同一路径。</p><p>在这种情况下，只需要做一个更改，即在提交信息的前面加上JIRA编号和（-），以将其与提交信息的其余部分很好地分开。还必须确保检查了提交信息字符串，仅在编号不存在时才添加编号：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> !commitMessage.<span class="built_in">contains</span>(ticketNumber) &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> <span class="string">"<span class="subst">\(ticketNumber)</span> - <span class="subst">\(commitMessage.trimmingCharacters(<span class="keyword">in</span>: .newlines)</span>)"</span></span><br><span class="line">            .write(toFile: commitMessageFile, atomically: <span class="literal">true</span>, encoding: .utf8)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Could not write to file <span class="subst">\(commitMessageFile)</span>"</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设置git钩子"><a href="#设置git钩子" class="headerlink" title="设置git钩子"></a>设置git钩子</h4><p>现在脚本已经准备好了，是时候把它放在git可以找到它的位置了。Git钩子可以全局设置，也可以基于单个repo设置。</p><p>我个人对这类脚本的偏好是基于单个repo设置，因为这样可以在出现问题时为您提供更多的控制和可见性，并且如果钩子开始失败，它会在它设置的repo中失败，而不是全局都失败。</p><p>要设置它们，我们只需要使文件可执行，重命名并将其复制到所要设置repo的<strong><code>.git/hooks/</code></strong>路径之下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x main.swift</span><br><span class="line">mv main.swift &lt;path_to_your_repo&gt;/.git/hooks/commit-msg</span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>现在repo已经全部设置好了，剩下的就是对部署的脚本进行测试。在下面的截屏中，创建了两个分支，一个带有问题编号，一个没有，它们有着相同的提交信息。可以看出脚本运行正常，并且只在需要时才更改提交消息！</p><p><img src="https://images.xiaozhuanlan.com/photo/2022/f068f5ba528cc69321bdd7df1b0deb8f.png" alt=""></p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这周，我决定完成因为工作而推迟了一周的TODO事项来改进我的Git工作流程。&lt;/p&gt;
&lt;p&gt;为了在提交的时候尽可能多的携带上下文信息，我们让提交信息包含了正在处理的JIRA编号。这样，将来如果有人回到我们现在正在提交的源代码，输入&lt;code&gt;git blame&lt;/code&gt;，就能很容易的找出JIRA的编号。&lt;/p&gt;
&lt;p&gt;每次提交都包含这些信息可能会有点乏味（如果你使用了类似&lt;a href=&quot;https://en.wikipedia.org/wiki/Test-driven_development&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TDD&lt;/a&gt;之类的方法，您会提交的更加频繁），而且，尽管像&lt;a href=&quot;https://www.git-tower.com/mac&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tower&lt;/a&gt;这样的git客户端会让此变得容易一些，但是您仍然需要手动将问题编号复制粘贴到提交消息中，并且记住这样做，这是我最难以解决的问题😅。&lt;/p&gt;
&lt;p&gt;出于这个原因，我开始寻求了解git hooks，试图自动化这项任务。我的想法是能够从git分支获取JIRA编号（我们有一个分支命名约定，形如：story/ISSUE-1234_branch-name），然后将提交消息更改为以JIRA编号为前缀，从而生成最终结果消息：ISSUE-1234-其他原本的提交信息。&lt;/p&gt;
    
    </summary>
    
      <category term="Swift 文集" scheme="https://fanbaoying.github.io/categories/Swift-%E6%96%87%E9%9B%86/"/>
    
    
      <category term="Swift" scheme="https://fanbaoying.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 68 文本左右对齐</title>
    <link href="https://fanbaoying.github.io/LeetCode-68-%E6%96%87%E6%9C%AC%E5%B7%A6%E5%8F%B3%E5%AF%B9%E9%BD%90/"/>
    <id>https://fanbaoying.github.io/LeetCode-68-文本左右对齐/</id>
    <published>2022-08-25T03:41:33.000Z</published>
    <updated>2022-08-25T03:46:59.121Z</updated>
    
    <content type="html"><![CDATA[<p>LeetCode 题库：<a href="https://github.com/SwiftCommunityRes/LeetCode--Swift" target="_blank" rel="noopener">https://github.com/SwiftCommunityRes/LeetCode–Swift</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 66 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：简单</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给你两个二进制字符串，返回它们的和（用二进制表示）。</p><p>输入为 <strong>非空</strong> 字符串且只包含数字 <code>1</code> 和 <code>0</code>。</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: a = &quot;11&quot;, b = &quot;1&quot;</span><br><span class="line">输出: &quot;100&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: a = &quot;1010&quot;, b = &quot;1011&quot;</span><br><span class="line">输出: &quot;10101&quot;</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li>每个字符串仅由字符 <code>&#39;0&#39;</code> 或 <code>&#39;1&#39;</code> 组成。`</li><li><code>1 &lt;= a.length, b.length &lt;= 10^4</code></li><li>字符串如果不是 <code>&quot;0&quot;</code> ，就都不含前导零。</li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddBinary</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addBinary</span><span class="params">(<span class="number">_</span> a: String, <span class="number">_</span> b: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> a = <span class="type">Array</span>(a), b = <span class="type">Array</span>(b)</span><br><span class="line">        <span class="keyword">var</span> res = <span class="string">""</span>, carry = <span class="number">0</span>, i = a.<span class="built_in">count</span> - <span class="number">1</span>, j = b.<span class="built_in">count</span> - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span> || carry &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> sum = carry</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i &gt;= <span class="number">0</span> &#123;</span><br><span class="line">                sum += <span class="type">Int</span>(<span class="type">String</span>(a[i]))!</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> j &gt;= <span class="number">0</span> &#123;</span><br><span class="line">                sum += <span class="type">Int</span>(<span class="type">String</span>(b[j]))!</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            res = <span class="string">"<span class="subst">\(sum % <span class="number">2</span>)</span>"</span> + res</span><br><span class="line">            carry = sum / <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：使用进位和从最后到开始迭代。</li><li>时间复杂度： O(n)</li><li>空间复杂度： O(n)</li></ul><blockquote><p><strong>注意:</strong> Swift没有办法访问O(1)字符串中的字符，因此我们必须首先将字符串转换为字符数组</p></blockquote><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/add-binary/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>公众号是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。欢迎关注公众号：<strong>Swift社区</strong>，后台点击进群，联系我们获取更多内容。</p><p><img width="500" alt="Swift社区" src="https://user-images.githubusercontent.com/24238160/132703149-34121c6c-fd18-491c-a697-58a0fabf3060.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;LeetCode 题库：&lt;a href=&quot;https://github.com/SwiftCommunityRes/LeetCode--Swift&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/SwiftCommunityRes/LeetCode–Swift&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 66 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：简单&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 67 二进制求和</title>
    <link href="https://fanbaoying.github.io/LeetCode-67-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/"/>
    <id>https://fanbaoying.github.io/LeetCode-67-二进制求和/</id>
    <published>2022-08-25T03:41:11.000Z</published>
    <updated>2022-08-25T03:47:00.352Z</updated>
    
    <content type="html"><![CDATA[<p>LeetCode 题库：<a href="https://github.com/SwiftCommunityRes/LeetCode--Swift" target="_blank" rel="noopener">https://github.com/SwiftCommunityRes/LeetCode–Swift</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 67 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：困难</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给定一个单词数组 <code>words</code> 和一个长度 <code>maxWidth</code> ，重新排版单词，使其成为每行恰好有 <code>maxWidth</code> 个字符，且左右两端对齐的文本。</p><p>你应该使用 “<strong>贪心算法</strong>” 来放置给定的单词；也就是说，尽可能多地往每行中放置单词。必要时可用空格 <code>&#39; &#39;</code> 填充，使得每行恰好有 <em>maxWidth</em> 个字符。</p><p>要求尽可能均匀分配单词间的空格数量。如果某一行单词间的空格不能均匀分配，则左侧放置的空格数要多于右侧的空格数。</p><p>文本的最后一行应为左对齐，且单词之间不插入<strong>额外的</strong>空格。</p><p><strong>注意:</strong></p><ul><li>单词是指由非空格字符组成的字符序列。</li><li>每个单词的长度大于 0，小于等于 <em>maxWidth</em>。</li><li>输入单词数组 <code>words</code> 至少包含一个单词。</li></ul><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: words = [&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;], maxWidth = 16</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">   &quot;This    is    an&quot;,</span><br><span class="line">   &quot;example  of text&quot;,</span><br><span class="line">   &quot;justification.  &quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入:words = [&quot;What&quot;,&quot;must&quot;,&quot;be&quot;,&quot;acknowledgment&quot;,&quot;shall&quot;,&quot;be&quot;], maxWidth = 16</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  &quot;What   must   be&quot;,</span><br><span class="line">  &quot;acknowledgment  &quot;,</span><br><span class="line">  &quot;shall be        &quot;</span><br><span class="line">]</span><br><span class="line">解释: 注意最后一行的格式应为 &quot;shall be    &quot; 而不是 &quot;shall     be&quot;,</span><br><span class="line">     因为最后一行应为左对齐，而不是左右两端对齐。       </span><br><span class="line">     第二行同样为左对齐，这是因为这行只包含一个单词。</span><br></pre></td></tr></table></figure><p><strong>示例 3</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入:words = [&quot;Science&quot;,&quot;is&quot;,&quot;what&quot;,&quot;we&quot;,&quot;understand&quot;,&quot;well&quot;,&quot;enough&quot;,&quot;to&quot;,&quot;explain&quot;,&quot;to&quot;,&quot;a&quot;,&quot;computer.&quot;,&quot;Art&quot;,&quot;is&quot;,&quot;everything&quot;,&quot;else&quot;,&quot;we&quot;,&quot;do&quot;]，maxWidth = 20</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  &quot;Science  is  what we&quot;,</span><br><span class="line">  &quot;understand      well&quot;,</span><br><span class="line">  &quot;enough to explain to&quot;,</span><br><span class="line">  &quot;a  computer.  Art is&quot;,</span><br><span class="line">  &quot;everything  else  we&quot;,</span><br><span class="line">  &quot;do                  &quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>1 &lt;= words.length &lt;= 300</code></li><li><code>1 &lt;= words[i].length &lt;= 20</code></li><li><code>words[i]</code> 由小写英文字母和符号组成</li><li><code>1 &lt;= maxWidth &lt;= 100</code></li><li><code>words[i].length &lt;= maxWidth</code></li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextJustification</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fullJustify</span><span class="params">(<span class="number">_</span> words: [String], <span class="number">_</span> maxWidth: Int)</span></span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> res = [<span class="type">String</span>]()</span><br><span class="line">        <span class="keyword">var</span> last = <span class="number">0</span>, currentLineLength = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (i, word) <span class="keyword">in</span> words.enumerated() &#123;</span><br><span class="line">            <span class="keyword">if</span> currentLineLength + word.<span class="built_in">count</span> + (i - last) &gt; maxWidth &#123;</span><br><span class="line">                </span><br><span class="line">                res.append(buildLine(words, last, i - <span class="number">1</span>, maxWidth, currentLineLength))</span><br><span class="line">                </span><br><span class="line">                last = i</span><br><span class="line">                currentLineLength = <span class="number">0</span>   </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            currentLineLength += word.<span class="built_in">count</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        res.append(buildLastLine(words, last, words.<span class="built_in">count</span> - <span class="number">1</span>, maxWidth))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">buildLine</span><span class="params">(<span class="number">_</span> words: [String], <span class="number">_</span> start: Int, <span class="number">_</span> end: Int, <span class="number">_</span> maxWidth: Int, <span class="number">_</span> currentLineLength: Int)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> line = <span class="string">""</span></span><br><span class="line">        <span class="keyword">var</span> extraSpaceNum = <span class="number">0</span>, spaceNum = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> end &gt; start &#123;</span><br><span class="line">            extraSpaceNum = (maxWidth - currentLineLength) % (end - start)</span><br><span class="line">            spaceNum = (maxWidth - currentLineLength) / (end - start)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            spaceNum = maxWidth - currentLineLength</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> start...end &#123;</span><br><span class="line">            line.append(words[i])</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> start != end &amp;&amp; i == end &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125; </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;spaceNum &#123;</span><br><span class="line">                line.append(<span class="string">" "</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> extraSpaceNum &gt; <span class="number">0</span> &#123;</span><br><span class="line">                line.append(<span class="string">" "</span>)</span><br><span class="line">                extraSpaceNum -= <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> line</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">buildLastLine</span><span class="params">(<span class="number">_</span> words: [String], <span class="number">_</span> start: Int, <span class="number">_</span> end: Int, <span class="number">_</span> maxWidth: Int)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> line = <span class="string">""</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> start...end &#123;</span><br><span class="line">            line.append(words[i])</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> i &lt; end &#123;</span><br><span class="line">                line.append(<span class="string">" "</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> line.<span class="built_in">count</span> &lt; maxWidth &#123;</span><br><span class="line">            line.append(<span class="string">" "</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> line</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：对单词进行迭代，跟踪第一个单词的索引和该行的长度。插入带有固定空格和额外空格的空格。。</li><li>时间复杂度： O(n)</li><li>空间复杂度： O(n)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/text-justification/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>公众号是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。欢迎关注公众号：<strong>Swift社区</strong>，后台点击进群，联系我们获取更多内容。</p><p><img width="500" alt="Swift社区" src="https://user-images.githubusercontent.com/24238160/132703149-34121c6c-fd18-491c-a697-58a0fabf3060.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;LeetCode 题库：&lt;a href=&quot;https://github.com/SwiftCommunityRes/LeetCode--Swift&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/SwiftCommunityRes/LeetCode–Swift&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 67 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：困难&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Swift 周报 第十期</title>
    <link href="https://fanbaoying.github.io/Swift-%E5%91%A8%E6%8A%A5-%E7%AC%AC%E5%8D%81%E6%9C%9F/"/>
    <id>https://fanbaoying.github.io/Swift-周报-第十期/</id>
    <published>2022-08-01T06:01:43.000Z</published>
    <updated>2022-08-15T03:45:33.091Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/SwiftCommunityRes/image/blob/main/weekly/SwiftBanner.png?raw=true" alt=""></p><p>周报仓库：<a href="https://github.com/SwiftCommunityRes" target="_blank" rel="noopener">https://github.com/SwiftCommunityRes</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几期周报内容是同步翻译的英文版周报，目前英文版停更，周报停滞半年多。经过多次讨论，我们决定<strong>重启周报</strong>，分模块整理内容同步给大家。</p><p>周报内容模块分为：<strong>新闻</strong>、<strong>提案</strong>、<strong>Swift论坛</strong>、<strong>推荐博文</strong>。初期计划每两周发布一期，欢迎志同道合的朋友一起加入周报整理。</p><p>昨日的生活与工作是否也曾迷茫？对新技术渴望突破的心是否依旧执着？<strong>Swift社区</strong>，为你的技术栈添砖加瓦，你，准备好了吗？</p><a id="more"></a><h2 id="新闻和社区"><a href="#新闻和社区" class="headerlink" title="新闻和社区"></a>新闻和社区</h2><h3 id="苹果先买后付服务被警告：破坏这一新兴行业的竞争"><a href="#苹果先买后付服务被警告：破坏这一新兴行业的竞争" class="headerlink" title="苹果先买后付服务被警告：破坏这一新兴行业的竞争"></a>苹果先买后付服务被警告：破坏这一新兴行业的竞争</h3><p>据英国《金融时报》7月27日报道，美国消费者金融保护局罗希特·乔普拉向硅谷发出警告。大型科技公司进入“先买后付”贷款业务会破坏这一新兴行业的竞争，他还对客户数据的使用提出了质疑。此前6月6日苹果公司在年度开发者大会上推出“先买后付”的<code>“Apple Pay Later”</code>服务，允许用户6周内分4期付款，期间不产生利息等其他费用。（via 泰山财经）</p><h3 id="与-App-Store-专家会面交流"><a href="#与-App-Store-专家会面交流" class="headerlink" title="与 App Store 专家会面交流"></a>与 App Store 专家会面交流</h3><p>准备好与专家在线交流探讨，了解如何充分利用 <code>App Store</code> 的功能。探索如何吸引新顾客、测试营销策略、添加订阅等等。在整个 8 月，苹果官方将在多个时区以多种语言进行实时演讲和答疑。如果您也是苹果开发者的话，最近肯定收到了相关的邮件邀请吧，不知道您是否参加了本次会面交流呢？（Apple Developer Program）</p><h3 id="即将从-XML-Feed-过渡到-App-Store-Connect-API"><a href="#即将从-XML-Feed-过渡到-App-Store-Connect-API" class="headerlink" title="即将从 XML Feed 过渡到 App Store Connect API"></a>即将从 XML Feed 过渡到 App Store Connect API</h3><p><code>App Store Connect REST API</code> 让您可以跨各种开发者工具自定义任务并实现任务自动化，使工作流程更灵活、更高效。从 <strong>2022 年 11 月</strong>开始，您将需要使用此 API 来代替 <code>XML Feed</code>，从而实现对 App 内购买项目、订阅、元数据和 App 定价的自动化管理。XML Feed 将继续为现有的 <code>Game Center</code> 管理功能提供支持。（Apple Developer News）</p><h3 id="新功能-RoomPlan"><a href="#新功能-RoomPlan" class="headerlink" title="新功能 RoomPlan"></a>新功能 RoomPlan</h3><p>使用 <a href="https://developer.apple.com/augmented-reality/roomplan/" title="Introducing RoomPlan" target="_blank" rel="noopener">RoomPlan</a> 创建房间的 3D 户型图，包括家具的尺寸和类型等关键特征。这个是由 ARKit 提供支持的全新 Swift API 能够利用 iPhone 和 iPad 上的摄像头和激光雷达扫描仪将现实环境带入您的 App 中。</p><p><img src="https://github.com/SwiftCommunityRes/image/blob/main/weekly/weeklynew01.png?raw=true" alt=""></p><p>使用详情可以观看 WWDC22 中的 <a href="https://developer.apple.com/videos/play/wwdc2022/10127/" title="Create parametric 3D room scans with RoomPlan" target="_blank" rel="noopener">使用 RoomPlan 创建参数 3D 房间扫描</a></p><h3 id="立即注册-WWDC22-实验室和聊天室"><a href="#立即注册-WWDC22-实验室和聊天室" class="headerlink" title="立即注册 WWDC22 实验室和聊天室"></a>立即注册 WWDC22 实验室和聊天室</h3><p><a href="https://developer.apple.com/news/?id=kvwb7ph4" title="Sign up now for WWDC22 labs and lounges" target="_blank" rel="noopener">注册实验室和线上聊天室</a>，即可在一整周内与 Apple 工程师、设计师和专家在线交流。</p><p><img src="https://github.com/SwiftCommunityRes/image/blob/main/weekly/weeklynew02.png?raw=true" alt=""></p><h3 id="已推出-Xcode-14-Beta-版"><a href="#已推出-Xcode-14-Beta-版" class="headerlink" title="已推出 Xcode 14 Beta 版"></a>已推出 Xcode 14 Beta 版</h3><p>包含了适用于所有 Apple 平台 SDK 的 <code>Xcode 14 Beta</code> 版现已推出。利用简洁且强大的 Swift 和 SwiftUI 以及全新的跨平台 App 体验，使用编辑器的增强功能更快捷地编写代码，并着手开始进行从 <code>Xcode Cloud</code> 到 <code>TestFlight</code> 以及 <code>App Store</code> 的测试和部署。</p><p><a href="https://developer.apple.com/xcode/" title="Xcode 14 Beta" target="_blank" rel="noopener">下载 Xcode 14 Beta 版</a></p><h2 id="提案"><a href="#提案" class="headerlink" title="提案"></a>提案</h2><h3 id="通过的提案"><a href="#通过的提案" class="headerlink" title="通过的提案"></a>通过的提案</h3><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0352-implicit-open-existentials.md#introduction" title="Implicitly Opened Existentials" target="_blank" rel="noopener">SE-0352: 隐式开放的存在类型</a> <strong>状态：Swift 5.7 已实现</strong><br>Swift 中的存在类型允许存储一个特定类型为未知的值，且可能在运行时更改。被存储值的动态类型，我们称为<strong>存在类型的底层类型</strong>，仅由它遵循的协议集以及潜在的超类知道。尽管存在类型对于表达动态类型的值非常有用，但由于它们的动态性质，它们受到一定限制。最近的提议使<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0335-existential-any.md" title="existential types more explicit" target="_blank" rel="noopener">存在类型更加明确</a>，以帮助开发人员理解这种动态性质，并通过消除一些限制<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0309-unlock-existential-types-for-all-protocols.md" title="making existential types more expressive" target="_blank" rel="noopener">使存在类型更具表现力</a>。但是存在类型中的基本类型仍然存在，一旦你有一个存在类型的值，你就很难对其使用泛型。开发者通常会遇到 <code>protocol &#39;P&#39; as a type cannot conform to itself</code> 这样的报错问题。</p><p><strong>SE-0352: 隐式开放的存在类型</strong> 已于 2022 年 5 月 18 日完成，核心团队已决定接受该提案。第二次审查的重点是关注向前兼容性，当一个调用唤起一个隐式开放的存在类型，必须被抹除类型以防止存在的动态类型内存泄漏到返回值中。当存在类型的表达能力增加，我们可能会有能力使用一个更具体的类型作为这一个调用的返回类型，这可能造成源中断。为了避免这种情况，该提案要求在调用中显式地作为任何 P 类型注释，其中当前可以表达的返回类型将丢弃对被类型擦除的原始关联类型的约束，如提案中的示例所示：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">P</span> </span>&#123;</span><br><span class="line">  associatedtype <span class="type">A</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Q</span> </span>&#123;</span><br><span class="line">  associatedtype <span class="type">B</span>: <span class="type">P</span> <span class="keyword">where</span> <span class="type">B</span>.<span class="type">A</span> == <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getP</span>&lt;T: P&gt;<span class="params">(<span class="number">_</span> p: T)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getBFromQ</span>&lt;T: Q&gt;<span class="params">(<span class="number">_</span> q: T)</span></span> -&gt; <span class="type">T</span>.<span class="type">B</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">eraseQAssoc</span><span class="params">(q: any Q)</span></span> &#123;</span><br><span class="line">  <span class="keyword">let</span> x = getBFromQ(q)          <span class="comment">// 错误，必须指定 "as any P" 由于缺少 T.B.A == Int 的约束</span></span><br><span class="line">  <span class="keyword">let</span> y = getBFromQ(q) <span class="keyword">as</span> any <span class="type">P</span> <span class="comment">// 可以, 明确抛弃约束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0353-constrained-existential-types.md" title="Constrained Existential Types" target="_blank" rel="noopener">SE-0353: 受约束的存在类型</a> <strong>状态：Swift 5.7 已实现</strong><br>存在类型弥补了 Swift 类型系统中的抽象能力。与泛型一样，它们使函数能够获取和返回多种可能的类型。与泛型参数类型不同，存在类型在作为输入传递给函数时不需要预先知道。此外，当从函数返回时，可以删除具体类型（隐藏在协议接口后面）。在这个领域出现了一系列活动，<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0309-unlock-existential-types-for-all-protocols.md#covariant-erasure-for-associated-types" title="SE-0309: unlock existential types for all protocols" target="_blank" rel="noopener">SE-0309</a> 解除了对使用具有关联类型的协议作为存在类型的剩余限制，而 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0346-light-weight-same-type-syntax.md" title="SE-0346: light weight same type syntax" target="_blank" rel="noopener">SE-0346</a> 为关联类型协议的轻量级约束语法铺平了道路。该提案直接基于这些想法，旨在在存在类型的上下文中重用轻量级关联类型约束的语法。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">any <span class="type">Collection</span>&lt;<span class="type">String</span>&gt;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0356-swift-snippets.md" title="Swift Snippets" target="_blank" rel="noopener">SE-0356: Swift 代码片段</a><br>该提案描述了编写成为片段的新形式示例代码的约定。片段是简短的单文件示例，可以在 Swift 包中构建和运行，可以访问该包中的其他代码，并且可以以多种方式使用。</p><h3 id="正在审查的提案"><a href="#正在审查的提案" class="headerlink" title="正在审查的提案"></a>正在审查的提案</h3><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0359-build-time-constant-values.md" title="Build-Time Constant Values" target="_blank" rel="noopener">SE-0359: 构建时间常数值</a> <strong>状态：已接受</strong><br>构建时间常数值是一个 Swift 语言特性，要求在编译时知道某些值。这是通过属性、<code>@const</code>、约束属性和函数参数来实现的，以使其具有编译时可知的值。这些信息为未来更丰富的编译时特性奠定了基础，例如在编译时提取和验证值。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0362-piecemeal-future-features.md" title="Piecemeal adoption of upcoming language improvements" target="_blank" rel="noopener">SE-0362: 即将到来的语言改进的逐渐采用</a> <strong>状态：已接受</strong><br>Swift 6 积累了许多对语言有源码兼容性影响的改进，从而在以前的语言模式（Swift 4.x 和 Swift 5.x）中默认情况下无法启用它们。这些改进已经在背后为 Swift 6 语言模式的 Swift 编译器中实现，但他们对于开发者是无法访问的，并将持续直到 Swift 6 作为一个可获得的语言模式。这有很多原因，为什么我们应该思考尽快提供这些改动。</p><ul><li>开发者希望很快从这些改进中受益，而不是等到 Swift 6 可用。</li><li>向开发者提供这些改进比 Swift 6 提供更多体验优先级更高，如果有必要，允许我们针对 Swift 6 进一步调试它们。</li><li>对于某些模块，所有在 Swift 6 中改动的总数或许会造成迁移繁重，并且在 Swift 4.x/5.x 中逐一采纳这些语言改动，可以使过渡期路径变得丝滑。</li></ul><p>一些提案已经引入了定制解决方案来提供迁移路径：<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0337-support-incremental-migration-to-concurrency-checking.md" title="support-incremental-migration-to-concurrency-checking" target="_blank" rel="noopener">SE-0337</a> 添加了 <code>-warn-concurrency</code> 在 Swift 4.x/5.x 中启用与 <code>Sendable</code> 相关检查的警告。 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0354-regex-literals.md" title="regex-literals" target="_blank" rel="noopener">SE-0354</a> 添加标志 <code>-enable-bare-slash-regex</code> 以启用原始 <code>/.../</code> 正则表达式语法。尽管它不是提案的一部分，但对 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0335-existential-any.md" title="existential-any" target="_blank" rel="noopener">SE-0335</a> 的讨论包括对编译器标志的请求，以在存在类型上要求使用 <code>any</code> 。这些都具有相同的风格，即选择现有的 Swift 4.x/5.x 代码进行改进，这些改进将出现在 Swift 6 中。</p><p>这个提议明确地包含了零碎的、有意采用的特性，这些特性在 Swift 6 之前出于源代码兼容性的原因而保留。它为逐步采用 Swift 6 特性建立了一条直接路径，以在 Swift 4.x/5.x 代码库中获得它们的优势，并顺利迁移到 Swift 6 语言模式。开发人员可以使用新的编译器标志 <code>-enable-upcoming-feature X</code> 为该模块启用名为 <code>X</code> 的特定功能，并且可以以这种方式指定多个功能。当开发人员移动到下一个主要语言版本时，该语言版本将隐含 <code>X</code> 并且编译器标志将被拒绝。这样，即将推出的功能标志只会累积到下一个主要的 Swift 语言版本，然后被清除，所以我们不会将语言分拆成不兼容的方言。</p><h2 id="Swift论坛"><a href="#Swift论坛" class="headerlink" title="Swift论坛"></a>Swift论坛</h2><ol><li><p><a href="https://developer.apple.com/forums/tags/wwdc2022-10052" title="What&#39;s new in SwiftUI" target="_blank" rel="noopener">SwiftUI 中的新功能</a> 围绕 <code>WWDC2022-10052</code> 内容进行讨论</p></li><li><p><a href="https://developer.apple.com/forums/tags/wwdc2022-110357" title="Meet Swift Regex" target="_blank" rel="noopener">Swift 正则表达式</a> 围绕 <code>WWDC2022-110357</code> 内容进行讨论</p></li><li><p><a href="https://developer.apple.com/forums/tags/wwdc2022-10054" title="The SwiftUI cookbook for navigation" target="_blank" rel="noopener">SwiftUI 导航</a> 围绕 <code>WWDC2022-10054</code> 内容进行讨论</p></li><li><p><a href="https://developer.apple.com/forums/tags/wwdc2022-10137" title="Swift Charts" target="_blank" rel="noopener">Swift 图表</a> 围绕 <code>WWDC2022-10137</code> 内容进行讨论</p></li><li><p>使用 <a href="https://forums.swift.org/t/using-cmake-to-build-swift-instead-of-build-script/59095" title="Using cmake to build swift" target="_blank" rel="noopener">cmake 构建 swift</a> 而不是 <code>build-script</code>。</p></li></ol><p><code>build-script</code> 是 <code>build-script-impl</code> 的 python 包装器，本身是一个 <code>shell</code> 脚本，然后运行 CMake，执行可以构建项目的工作主体。 例如，如果您想执行 <code>utils/build-script -x</code>，将调用 <code>cmake -G Xcode</code>。</p><ol><li><p><strong>Visual Studio Code</strong> <a href="https://forums.swift.org/t/introducing-swift-for-visual-studio-code/54246" title="VSCode extension" target="_blank" rel="noopener">增加扩展包</a> 支持 Swift 开发</p></li><li><p><a href="https://forums.swift.org/t/swiftnio-channelinboundhandler-is-docc-incompatible/58611" title="SwiftNIO _ChannelInboundHandler is DocC incompatible" target="_blank" rel="noopener">SwiftNIO _ChannelInboundHandler 与 DocC 不兼容</a></p></li></ol><p>在阅读 swift-biome 中的 <code>SwiftNIO</code> 文档时，遇到一个问题。文档其中引用了 3 个带下划线的属性。例如：<code>_ChannelInboundHandler</code>、<code>_EmittingChannelHandler</code> 等，但是这些属性在 swift-biome 和其他基于 <code>SymbolGraphGen</code> 的工具是不可见的，包括 DocC。</p><ol><li><a href="https://twitter.com/natpanferova/status/1547103127429857280" title="KeyPath-based comparison API in Foundation" target="_blank" rel="noopener">Foundation 中基于 KeyPath 的对比 API</a></li></ol><p>在 <code>Foundation</code> 中引入的 <code>KeyPathComparator</code> API，比 Swift 中的 <code>sorted(by:)</code> 方法更清晰。这个 API 可以根据数组中的某个特定元素进行排序。</p><p><img src="https://github.com/SwiftCommunityRes/image/blob/main/FXhpnbMacAE1d6P.jpg?raw=true" alt=""></p><h2 id="推荐博文"><a href="#推荐博文" class="headerlink" title="推荐博文"></a>推荐博文</h2><p><strong>SwiftUI 动画系列</strong>，文章结合动画 Gif 原图和源码为案例，深入探讨了如何创建应用 SwiftUI 动画。</p><p><a href="https://xiaozhuanlan.com/topic/9583407126" target="_blank" rel="noopener">高级 SwiftUI 动画 — Part 1：Paths</a></p><p><strong>摘要：</strong> 本文主要介绍了显式动画和隐式动画，以及针对 Animatable 协议的相关讨论。</p><p><a href="https://xiaozhuanlan.com/topic/9685470312" target="_blank" rel="noopener">高级 SwiftUI 动画 — Part 2：GeometryEffect</a></p><p><strong>摘要：</strong> 主要介绍使用新工具 GeometryEffect 创建 SwiftUI 动画。GeometryEffect是一个符合Animatable 和 ViewModifier 的协议。</p><p><a href="https://xiaozhuanlan.com/topic/6089153247" target="_blank" rel="noopener">高级 SwiftUI 动画 — Part 3：AnimatableModifier</a></p><p><strong>摘要：</strong> 本文主要介绍使用 AnimatableModifier 完成更加复杂的动画效果。AnimatableModifier 是一个 ViewModifier，符合 Animatable 协议，如果对这个协议不了解可以阅读之前发布的两篇文章。</p><p><a href="https://xiaozhuanlan.com/topic/9182056374" target="_blank" rel="noopener">SwiftUI 动画进阶 — Part4：TimelineView</a></p><p><strong>摘要：</strong> 前三篇高级 SwiftUI 动画是作者在实战中总结的内容。本篇文章，我们将详细地探索 TimelineView。</p><p><a href="https://xiaozhuanlan.com/topic/1725803469" target="_blank" rel="noopener">SwiftUI 动画进阶 — Part 5：Canvas</a></p><p><strong>摘要：</strong> 本篇文章将探索 Canvas 视图。从技术上讲，它不是一个动画视图，但当它与第四部分的 TimelineView 结合时，可以现实很多有趣的功能。</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p><strong>Swift社区</strong>是由 Swift 爱好者共同维护的公益组织，我们在国内以微信公众号的运营为主，我们会分享以 <strong>Swift实战</strong>、<strong>SwiftUl</strong>、<strong>Swift基础</strong>为核心的技术内容，也整理收集优秀的学习资料。</p><p>欢迎关注公众号:Swift社区，后台点击进群，可以进入我们社区的各种交流讨论群。希望我们Swift社区是大家在网络空间中的另一份共同的归属。</p><p><img width="500" alt="Swift社区" src="https://user-images.githubusercontent.com/24238160/132703149-34121c6c-fd18-491c-a697-58a0fabf3060.png"></p><p>特别感谢 Swift社区 编辑部的每一位编辑，感谢大家的辛苦付出，为 Swift社区 提供优质内容，为 Swift 语言的发展贡献自己的力量。</p><p>周报仓库：<a href="https://github.com/SwiftCommunityRes" target="_blank" rel="noopener">https://github.com/SwiftCommunityRes</a> 文章中外引链接较多，可以点击 <strong>阅读原文</strong> 更加方便阅读。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/SwiftCommunityRes/image/blob/main/weekly/SwiftBanner.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;周报仓库：&lt;a href=&quot;https://github.com/SwiftCommunityRes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/SwiftCommunityRes&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前几期周报内容是同步翻译的英文版周报，目前英文版停更，周报停滞半年多。经过多次讨论，我们决定&lt;strong&gt;重启周报&lt;/strong&gt;，分模块整理内容同步给大家。&lt;/p&gt;
&lt;p&gt;周报内容模块分为：&lt;strong&gt;新闻&lt;/strong&gt;、&lt;strong&gt;提案&lt;/strong&gt;、&lt;strong&gt;Swift论坛&lt;/strong&gt;、&lt;strong&gt;推荐博文&lt;/strong&gt;。初期计划每两周发布一期，欢迎志同道合的朋友一起加入周报整理。&lt;/p&gt;
&lt;p&gt;昨日的生活与工作是否也曾迷茫？对新技术渴望突破的心是否依旧执着？&lt;strong&gt;Swift社区&lt;/strong&gt;，为你的技术栈添砖加瓦，你，准备好了吗？&lt;/p&gt;
    
    </summary>
    
      <category term="Swift 周报" scheme="https://fanbaoying.github.io/categories/Swift-%E5%91%A8%E6%8A%A5/"/>
    
    
      <category term="Swift" scheme="https://fanbaoying.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI 状态管理系统指南</title>
    <link href="https://fanbaoying.github.io/SwiftUI-%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%8C%87%E5%8D%97/"/>
    <id>https://fanbaoying.github.io/SwiftUI-状态管理系统指南/</id>
    <published>2022-07-06T11:11:56.000Z</published>
    <updated>2022-07-06T11:14:54.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SwiftUI与苹果之前的UI框架的区别不仅仅在于如何定义视图和其他UI组件，还在于如何在整个使用它的应用程序中管理视图层级的状态。</p><p>SwiftUI没有使用委托、数据源或任何其他在UIKit和AppKit等命令式框架中常见的状态管理模式，而是配备了一些属性包装器，使我们能够准确地声明我们的数据如何被我们的视图观察、渲染和改变。</p><p>本周，让我们仔细看看这些属性包装器中的每一个，它们之间的关系，以及它们如何构成SwiftUI整体状态管理系统的不同部分。</p><a id="more"></a><h2 id="属性状态"><a href="#属性状态" class="headerlink" title="属性状态"></a>属性状态</h2><p>由于SwiftUI主要是一个UI框架（尽管它也开始获得用于定义更高层次结构（如应用程序和场景）的API），其声明式设计不一定需要影响应用程序的整个模型和数据层——而只是直接绑定到我们各种视图的状态。</p><p>例如，假设我们正在开发一个<code>SignupView</code>，使用户能够通过输入用户名和电子邮件地址在应用程序中注册一个新账户。我们将使用这两个值形成一个用户模型，并将其传递给一个闭包：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SignupView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> handler: (<span class="type">User</span>) -&gt; <span class="type">Void</span></span><br><span class="line">    <span class="keyword">var</span> username = <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> email = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于这三个属性中只有两个——<code>username</code>和<code>email</code>——实际上会被我们的视图修改，而且这两个状态可以保持私有，我们将使用SwiftUI的<code>State</code>属性包装器来标记它们——像这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SignupView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> handler: (<span class="type">User</span>) -&gt; <span class="type">Void</span></span><br><span class="line">    </span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> username = <span class="string">""</span></span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> email = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做将自动在这两个值和我们的视图本身之间建立一个连接——这意味着我们的视图将在每次改变这两个值的时候被重新渲染。在我们的主体中，我们将把这两个属性分别绑定到一个相应的<code>TextField</code>上，以使它们可以被用户编辑：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SignupView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> handler: (<span class="type">User</span>) -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> username = <span class="string">""</span></span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> email = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">"Username"</span>, text: $username)</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">"Email"</span>, text: $email)</span><br><span class="line">            <span class="type">Button</span>(</span><br><span class="line">                action: &#123;</span><br><span class="line">                    <span class="keyword">self</span>.handler(<span class="type">User</span>(</span><br><span class="line">                        username: <span class="keyword">self</span>.username,</span><br><span class="line">                        email: <span class="keyword">self</span>.email</span><br><span class="line">                    ))</span><br><span class="line">                &#125;,</span><br><span class="line">                label: &#123; <span class="type">Text</span>(<span class="string">"Sign up"</span>) &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，<code>State</code>被用来表示SwiftUI视图的内部状态，并在该状态被改变时自动使视图更新。因此，最常见的做法是将<code>State</code>属性包装器保持为私有，这可以确保它们只在该视图的主体内被改变（试图在其他地方改变它们实际上会导致运行时崩溃）。</p><h2 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h2><p>看一下上面的代码样本，我们将每个属性传入其<code>TextField</code>的方式是在这些属性名称前加上<code>$</code>。这是因为我们不只是将普通的<code>String</code>值传入这些文本字段，而是与我们的<code>State</code>包装的属性本身绑定。</p><p>为了更详细地探讨这意味着什么，让我们现在假设我们想创建一个视图，让我们的用户编辑他们最初在注册时输入的个人资料信息。由于我们现在要修改外部状态值，而不仅仅是私人状态值，所以这次我们将<code>username</code>和<code>email</code>属性标记为<code>Bingding</code>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProfileEditingView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">Binding</span> <span class="keyword">var</span> username: <span class="type">String</span></span><br><span class="line">    @<span class="type">Binding</span> <span class="keyword">var</span> email: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">"Username"</span>, text: $username)</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">"Email"</span>, text: $email)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最酷的是，绑定不仅仅局限于单一的内置值，比如字符串或整数，而是可以用来将任何Swift值绑定到我们的一个视图中。例如，我们可以将用户模型本身传递给<code>ProfileEditingView</code>，而不是传递两个单独的<code>username</code>和<code>email</code>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProfileEditingView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">Binding</span> <span class="keyword">var</span> user: <span class="type">User</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">"Username"</span>, text: $user.username)</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">"Email"</span>, text: $user.email)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就像我们在将<code>State</code>和<code>Binding</code>包装的属性传入各种<code>TextField</code>实例时用<code>$</code>作为前缀一样，我们在将任何<code>State</code>值连接到我们自己定义的<code>Binding</code>属性时也可以做同样的事情。</p><p>例如，这里有一个<code>ProfileView</code>的实现，它使用一个<code>Stage</code>包装属性来跟踪一个用户模型，然后在将上述<code>ProfileEditingView</code>的实例作为工作表呈现时，将该模型传递一个绑定——这将自动同步用户对该原始<code>State</code>属性值的任何改变:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProfileView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> user = <span class="type">User</span>.load()</span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> isEditingViewShown = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(alignment: .leading, spacing: <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"Username: "</span>)</span><br><span class="line">                .foregroundColor(.secondary)</span><br><span class="line">                + <span class="type">Text</span>(user.username)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"Email: "</span>)</span><br><span class="line">                .foregroundColor(.secondary)</span><br><span class="line">                + <span class="type">Text</span>(user.email)</span><br><span class="line">            <span class="type">Button</span>(</span><br><span class="line">                action: &#123; <span class="keyword">self</span>.isEditingViewShown = <span class="literal">true</span> &#125;,</span><br><span class="line">                label: &#123; <span class="type">Text</span>(<span class="string">"Edit"</span>) &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">        .sheet(isPresented: $isEditingViewShown) &#123;</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">ProfileEditingView</span>(user: <span class="keyword">self</span>.$user)</span><br><span class="line">                <span class="type">Button</span>(</span><br><span class="line">                    action: &#123; <span class="keyword">self</span>.isEditingViewShown = <span class="literal">false</span> &#125;,</span><br><span class="line">                    label: &#123; <span class="type">Text</span>(<span class="string">"Done"</span>) &#125;</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>请注意，我们也可以通过给一个<code>State</code>包装的属性分配一个新的值来改变它——比如我们在 “Done “按钮的动作处理程序中把<code>isEditingViewShown</code>设置为<code>false</code>。</p></blockquote><p>因此，一个<code>Binding</code>标记的属性在给定的视图和定义在该视图之外的状态属性之间提供了一个双向的连接，而<code>Statr</code>和<code>Binding</code>包装的属性都可以通过在其属性名前加上<code>$</code>来作为绑定物传递。</p><h2 id="观察对象"><a href="#观察对象" class="headerlink" title="观察对象"></a>观察对象</h2><p><code>State</code>和<code>Bingding</code>的共同点是，它们处理的是在SwiftUI视图层次结构本身中管理的值。然而，虽然建立一个将所有的状态都保存在其各种视图中的应用程序是肯定可行的，但从架构和关注点分离的角度来看，这通常不是一个好主意，而且很容易导致我们的视图变得相当<a href="https://www.swiftbysundell.com/articles/avoiding-massive-swiftui-views/" target="_blank" rel="noopener">庞大和复杂</a>。</p><p>值得庆幸的是，SwiftUI还提供了一些机制，使我们能够将外部模型对象连接到我们的各种视图。其中一个机制是<code>ObservableObject</code>协议，当它与<code>ObservedObject</code>属性包装器结合时，我们可以设置与我们视图层之外管理的引用类型的绑定。</p><p>作为一个例子，让我们更新上面定义的<code>ProfileView</code>——通过将管理<code>User</code>模型的责任从视图本身转移到一个新的、专门的对象中。现在，我们可以用许多不同的方式来描述这样一个对象，但由于我们正在寻找创建一个类型来控制我们的一个模型的实例——让我们把它变成一个符合SwiftUI的<code>ObservableObject</code>协议的<a href="https://www.swiftbysundell.com/articles/model-controllers-in-swift/" target="_blank" rel="noopener">模型控制器</a>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModelController</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> user: <span class="type">User</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>Published</code>属性包装器用于定义对象的哪些属性在被修改时应让观察通知被触发。</p></blockquote><p>有了上面的类型，现在让我们回到<code>ProfileView</code>，让它观察新的<code>UserModelController</code>的实例，作为一个<code>ObservedObject</code>，而不是用一个<code>State</code>属性包装器来跟踪我们的用户模型。最重要的是，我们仍然可以很容易地将这个模型绑定到我们的<code>ProfileEditingView</code>上，就像以前一样，因为<code>ObservedObject</code>属性包装器也可以转换为绑定：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProfileView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">ObservedObject</span> <span class="keyword">var</span> userController: <span class="type">UserModelController</span></span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> isEditingViewShown = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(alignment: .leading, spacing: <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"Username: "</span>)</span><br><span class="line">                .foregroundColor(.secondary)</span><br><span class="line">                + <span class="type">Text</span>(userController.user.username)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">"Email: "</span>)</span><br><span class="line">                .foregroundColor(.secondary)</span><br><span class="line">                + <span class="type">Text</span>(userController.user.email)</span><br><span class="line">            <span class="type">Button</span>(</span><br><span class="line">                action: &#123; <span class="keyword">self</span>.isEditingViewShown = <span class="literal">true</span> &#125;,</span><br><span class="line">                label: &#123; <span class="type">Text</span>(<span class="string">"Edit"</span>) &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">        .sheet(isPresented: $isEditingViewShown) &#123;</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">ProfileEditingView</span>(user: <span class="keyword">self</span>.$userController.user)</span><br><span class="line">                <span class="type">Button</span>(</span><br><span class="line">                    action: &#123; <span class="keyword">self</span>.isEditingViewShown = <span class="literal">false</span> &#125;,</span><br><span class="line">                    label: &#123; <span class="type">Text</span>(<span class="string">"Done"</span>) &#125;</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，我们的新实现与之前使用的基于状态的实现之间的一个重要区别是，我们的<code>UserModelController</code>现在需要作为初始化器的一部分被<a href="https://www.swiftbysundell.com/articles/different-flavors-of-dependency-injection-in-swift/" target="_blank" rel="noopener">注入</a>到<code>ProfileView</code>中。</p><p>除了 “迫使 “我们在代码库中建立一个更明确的依赖关系图之外，原因是一个标有<code>ObservedObject</code>的属性并不意味着对这个属性所指向的对象有任何形式的所有权。</p><p>因此，虽然下面的内容在技术上可能会被编译，但最终会导致运行时的问题——因为当我们的视图在更新时被重新创建，<code>UserModelController</code>实例可能会被删除（因为我们的视图现在是它的主要所有者）:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProfileView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">ObservedObject</span> <span class="keyword">var</span> userController = <span class="type">UserModelController</span>.load()</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>重要的是要记住: SwiftUI视图不是对正在屏幕上渲染的实际UI组件的引用，而是描述我们的UI的轻量级值——因此它们没有像<code>UIView</code>实例那样的生命周期。</p></blockquote><p>为了解决上述问题，苹果在iOS 14和macOS Big Sur中引入了一个新的属性包装器，名为<code>StateObject</code>。标记为<code>StateObject</code>的属性与<code>ObservedObject</code>的行为完全相同——此外，SwiftUI将确保存储在此类属性中的任何对象不会因为框架在重新渲染视图时重新创建新实例而被意外释放：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProfileView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">StateObject</span> <span class="keyword">var</span> userController = <span class="type">UserModelController</span>.load()</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尽管从技术上来说，从现在开始可以只使用<code>StateObject</code>——我仍然建议在观察外部对象时使用<code>ObservedObject</code>，而在处理视图本身拥有的对象时只使用<code>StateObject</code>。把<code>StateObject</code>和<code>ObservedObject</code>看作是<code>State</code>和<code>Binding</code>的参考类型，或者SwiftUI版本的强和弱属性。</p><h2 id="观察和修改环境变量"><a href="#观察和修改环境变量" class="headerlink" title="观察和修改环境变量"></a>观察和修改环境变量</h2><p>最后，让我们来看看SwiftUI的环境系统如何被用来在两个互不直接连接的视图之间传递各种状态。尽管在一个父视图和它的一个子视图之间创建绑定通常很容易，但在整个视图层次结构中传递某个对象或值可能相当麻烦——而这正是环境变量旨在解决的问题类型。</p><p>有两种主要的方法来使用SwiftUI的环境。一种是首先在想要检索给定对象的视图中定义一个<code>EnvironmentObject</code>包装的属性——例如像这个<code>ArticleView</code>如何检索一个包含颜色信息的<code>Theme</code>对象:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArticleView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">EnvironmentObject</span> <span class="keyword">var</span> theme: <span class="type">Theme</span></span><br><span class="line">    <span class="keyword">var</span> article: <span class="type">Article</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(alignment: .leading) &#123;</span><br><span class="line">            <span class="type">Text</span>(article.title)</span><br><span class="line">                .foregroundColor(theme.titleTextColor)</span><br><span class="line">            <span class="type">Text</span>(article.body)</span><br><span class="line">                .foregroundColor(theme.bodyTextColor)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们必须确保在我们的视图的某一个父类中提供我们的环境对象（在这种情况下是一个<code>Theme</code>实例），然后SwiftUI会处理其余的事情。这是通过使用<code>environmentalObject</code>修饰符完成的，例如，像这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RootView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">ObservedObject</span> <span class="keyword">var</span> theme: <span class="type">Theme</span></span><br><span class="line">    @<span class="type">ObservedObject</span> <span class="keyword">var</span> articleLibrary: <span class="type">ArticleLibrary</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ArticleListView</span>(articles: articleLibrary.articles)</span><br><span class="line">            .environmentObject(theme)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>请注意，我们不需要将上述修改器应用于将使用我们的环境对象的确切视图——我们可以将其应用于我们的层次结构中任何在其之上的视图。</p></blockquote><p>使用 SwiftUI 环境系统的第二种方式是定义一个自定义的<code>EnvironmentKey</code> ——然后它可以被用来向内置的<code>EnvironmentValues</code> 类型分配和检索值:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ThemeEnvironmentKey</span>: <span class="title">EnvironmentKey</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> defaultValue = <span class="type">Theme</span>.<span class="keyword">default</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">EnvironmentValues</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> theme: <span class="type">Theme</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">self</span>[<span class="type">ThemeEnvironmentKey</span>.<span class="keyword">self</span>] &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; <span class="keyword">self</span>[<span class="type">ThemeEnvironmentKey</span>.<span class="keyword">self</span>] = newValue &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了上述内容，我们现在可以使用<code>Enviroment</code>属性包装器（而不是<code>EnvironmentObject</code>）来标记我们视图的<code>theme</code>属性，并传入我们希望检索的环境键的<a href="https://www.swiftbysundell.com/articles/the-power-of-key-paths-in-swift" target="_blank" rel="noopener">键值路径</a>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArticleView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">Environment</span>(\.theme) <span class="keyword">var</span> theme: <span class="type">Theme</span></span><br><span class="line">    <span class="keyword">var</span> article: <span class="type">Article</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(alignment: .leading) &#123;</span><br><span class="line">            <span class="type">Text</span>(article.title)</span><br><span class="line">                .foregroundColor(theme.titleTextColor)</span><br><span class="line">            <span class="type">Text</span>(article.body)</span><br><span class="line">                .foregroundColor(theme.bodyTextColor)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述两种方法的一个明显区别是，基于键的方法要求我们在编译时定义一个默认值，而基于环境对象<code>EnvironmentObject</code>的方法则假设在运行时提供这样一个值（如果不这样做将导致崩溃）。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>SwiftUI管理状态的方式绝对是该框架最有趣的方面之一，它可能需要我们稍微重新思考数据在应用中的传递方式——至少在涉及到将被我们的UI直接消费和修改的数据时是这样。</p><p>我希望这篇指南能成为一个很好的方式来概述SwiftUI的各种状态处理机制，尽管一些更具体的API被遗漏了，这篇文章中强调的概念应该涵盖了所有基于SwiftUI的状态处理的绝大多数用例。</p><p>感谢你的阅读! </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;SwiftUI与苹果之前的UI框架的区别不仅仅在于如何定义视图和其他UI组件，还在于如何在整个使用它的应用程序中管理视图层级的状态。&lt;/p&gt;
&lt;p&gt;SwiftUI没有使用委托、数据源或任何其他在UIKit和AppKit等命令式框架中常见的状态管理模式，而是配备了一些属性包装器，使我们能够准确地声明我们的数据如何被我们的视图观察、渲染和改变。&lt;/p&gt;
&lt;p&gt;本周，让我们仔细看看这些属性包装器中的每一个，它们之间的关系，以及它们如何构成SwiftUI整体状态管理系统的不同部分。&lt;/p&gt;
    
    </summary>
    
      <category term="SwiftUI" scheme="https://fanbaoying.github.io/categories/SwiftUI/"/>
    
    
      <category term="iOS" scheme="https://fanbaoying.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Swift 中的类型占位符</title>
    <link href="https://fanbaoying.github.io/Swift-%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%8D%A0%E4%BD%8D%E7%AC%A6/"/>
    <id>https://fanbaoying.github.io/Swift-中的类型占位符/</id>
    <published>2022-07-06T11:11:41.000Z</published>
    <updated>2022-07-06T11:16:37.105Z</updated>
    
    <content type="html"><![CDATA[<p>Swift 的类型推断能力从一开始就是语言的核心部分，它极大地减少了我们在声明有默认值的变量和属性时手动指定类型的工作。例如，表达式<code>var number = 7</code>不需要包含任何类型注释，因为编译器能够推断出值<code>7</code>是一个<code>Int</code>，我们的<code>number</code>变量应该被相应的类型化。</p><p>作为 Xcode 13.3 的一部分而一起发布的 Swift 5.6，通过引入 “类型占位符（type placeholders） “的概念，继续扩展这些类型推理能力，这在处理集合和其他通用类型时非常有用。</p><a id="more"></a><p>例如，假设我们想创建一个<code>Combine</code>里面具有默认整数值的 <code>CurrentValueSubject</code>的实例。关于如何做到这一点的初步想法可能是简单地将我们的默认值传递给该主体的初始化器，然后将结果存储在本地的一个<code>let</code>声明的属性中（就像创建一个普通的<code>Int</code>值时一样）。然而，这样做会给我们带来以下编译器错误：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Error: "Generic parameter 'Failure' could not be inferred"</span></span><br><span class="line"><span class="comment">// Error: “无法被推断出泛型的`Failure`参数 ”</span></span><br><span class="line"><span class="keyword">let</span> counterSubject = <span class="type">CurrentValueSubject</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>这是因为<code>CurrentValueSubject</code>是一个泛型类型，实例化时不仅需要<code>Output</code>类型，还需要<code>Failure</code>类型——这是该主体能够抛出的错误类型。</p><p>因为我们不希望我们的主体在这种情况下抛出任何错误，所以我们会给它一个<code>Failure</code>类型的值<code>Never</code>（这是在 Swift 中使用 <code>Combine</code> 的一个常见惯例）。但为了做到这一点，在 Swift 5.6 之前，我们需要明确地指定我们的<code>Int</code>输出类型——像这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> counterSubject = <span class="type">CurrentValueSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>不过从 Swift 5.6 开始，这种情况就不存在了——因为我们现在可以使用一个类型占位符来表示我们主体的<code>Output</code>类型，这让我们再次利用编译器为我们自动推断出该类型，就像在声明一个普通的<code>Int</code>值一样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> counterSubject = <span class="type">CurrentValueSubject</span>&lt;<span class="number">_</span>, <span class="type">Never</span>&gt;(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>这很好，但可以说这并不是 swift 里面很大的改进。毕竟，我们用<code>_</code>代替<code>Int</code>只是节省了两个字符，而且手动指定像<code>Int</code>这样的简单类型也不是一开始就有问题的。</p><p><strong>但现在让我们看看这个功能如何扩展到更复杂的类型，这是它真正开始发光的地方。</strong>例如，假设我们的项目包含以下函数，让我们加载一个用户注解的PDF文件:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadAnnotatedPDF</span><span class="params">(named: String)</span></span> -&gt; <span class="type">Resource</span>&lt;<span class="type">PDF</span>&lt;<span class="type">UserAnnotations</span>&gt;&gt; &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的函数使用了一个相当复杂的泛型作为它的返回类型，这可能是因为我们需要在多个地方中重复使用我们的<code>Resource</code>类型，也因为我们选择了使用<em><a href="https://www.swiftbysundell.com/articles/phantom-types-in-swift" target="_blank" rel="noopener">幻象类型</a></em>来指定我们当前处理的是哪种PDF。</p><p>现在让我们看看，如果我们在创建主体时调用上述函数，而不是仅仅使用一个简单的整数，那么我们之前基于<code>CurrentValueSubject</code>的代码会是什么样子:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Before Swift 5.6:</span></span><br><span class="line"><span class="keyword">let</span> pdfSubject = <span class="type">CurrentValueSubject</span>&lt;<span class="type">Resource</span>&lt;<span class="type">PDF</span>&lt;<span class="type">UserAnnotations</span>&gt;&gt;, <span class="type">Never</span>&gt;(</span><br><span class="line">    loadAnnotatedPDF(named: name)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Swift 5.6:</span></span><br><span class="line"><span class="keyword">let</span> pdfSubject = <span class="type">CurrentValueSubject</span>&lt;<span class="number">_</span>, <span class="type">Never</span>&gt;(</span><br><span class="line">    loadAnnotatedPDF(named: name)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这是一个相当大的改进啊 基于 Swift 5.6 的版本不仅为我们节省了一些输入，而且由于 <code>pdfSubject</code> 的类型现在完全来自 <code>loadAnnotatedPDF</code> 函数，这可能会使该函数（及其相关代码）的迭代更加容易——因为如果我们改变该函数的返回类型，需要更新的手动类型注释将减少。</p><p>不过，值得指出的是，在上述情况下，还有另一种方法可以利用Swift的类型推理能力——那就是使用<strong>类型别名</strong>，而不是<strong>类型占位符</strong>。例如，我们可以在这里定义一个<code>UnfailingValueSubject</code>类型别名，我们可以用它来轻松地创建不会产生任何错误的主体：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">UnfailingValueSubject</span>&lt;<span class="type">T</span>&gt; = <span class="type">CurrentValueSubject</span>&lt;<span class="type">T</span>, <span class="type">Never</span>&gt;</span><br></pre></td></tr></table></figure><p>有了上述内容，我们现在就可以在没有任何泛型注解的情况下创建我们的<code>pdfSubject</code>了——因为编译器能够推断出<code>T</code>指的是什么类型，而且失败类型<code>Never</code>已经被硬编码到我们的新类型别名中:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pdfSubject = <span class="type">UnfailingValueSubject</span>(loadAnnotatedPDF(named: name))</span><br></pre></td></tr></table></figure><p>但这并不意味着类型别名在通常情况下都比类型占位符好，因为如果我们要为每种特定情况定义新的类型别名，那么这也会使我们的代码库变得更加复杂。有时，在内联中指定所有的东西（比如使用类型占位符时）绝对是个好办法，因为这可以让我们定义完全独立的表达式。</p><p>在我们总结之前，让我们也来看看类型占位符是如何与集合字面量(literals)一起使用的——例如在创建一个字典时。在这里，我们选择手动指定我们的字典的 <code>Key</code> 类型（为了能够使用点语法来指代枚举的各种情况），同时为该字典的值使用一个类型占位符：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">UserRole</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> local</span><br><span class="line">    <span class="keyword">case</span> remote</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> latestMessages: [<span class="type">UserRole</span>: <span class="number">_</span>] = [</span><br><span class="line">    .local: <span class="string">""</span>,</span><br><span class="line">    .remote: <span class="string">""</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这就是类型占位符——Swift 5.6 中引入的一个新功能，在处理稍微复杂的通用类型时，它可能真的很有用。但值得指出的是，这些占位符只能在调用站点使用，而不是在指定函数或计算属性的返回类型时使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swift 的类型推断能力从一开始就是语言的核心部分，它极大地减少了我们在声明有默认值的变量和属性时手动指定类型的工作。例如，表达式&lt;code&gt;var number = 7&lt;/code&gt;不需要包含任何类型注释，因为编译器能够推断出值&lt;code&gt;7&lt;/code&gt;是一个&lt;code&gt;Int&lt;/code&gt;，我们的&lt;code&gt;number&lt;/code&gt;变量应该被相应的类型化。&lt;/p&gt;
&lt;p&gt;作为 Xcode 13.3 的一部分而一起发布的 Swift 5.6，通过引入 “类型占位符（type placeholders） “的概念，继续扩展这些类型推理能力，这在处理集合和其他通用类型时非常有用。&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://fanbaoying.github.io/categories/Swift/"/>
    
    
      <category term="iOS" scheme="https://fanbaoying.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI 中的自定义导航</title>
    <link href="https://fanbaoying.github.io/SwiftUI-%E4%B8%AD%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%BC%E8%88%AA/"/>
    <id>https://fanbaoying.github.io/SwiftUI-中的自定义导航/</id>
    <published>2022-07-06T11:11:22.000Z</published>
    <updated>2022-07-06T11:16:04.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>默认情况下，SwiftUI提供的各种导航API在很大程度上是以用户直接输入为中心的——也就是说，导航是在系统响应例如按钮的点击和标签切换等事件时由系统本身处理的。</p><p>然而，有时我们可能想更直接地控制应用程序的导航执行方式，尽管SwiftUI在这方面仍然不如UIKit或AppKit灵活，但它确实提供了相当多的方法，让我们在构建的视图中执行完全自定义的导航。</p><a id="more"></a><h2 id="切换标签（tabs）"><a href="#切换标签（tabs）" class="headerlink" title="切换标签（tabs）"></a>切换标签（tabs）</h2><p>让我们先来看看我们如何能控制当前在<code>TabView</code>中显示的标签。通常情况下，当用户手动点击每个标签栏中的一个项目时，标签就会被切换，但是通过在一个给定的<code>TabView</code>中注入一个选择(<code>selection</code>)绑定，我们可以观察并控制当前显示的标签。在这里，我们要做的就是在两个标签之间切换，这两个标签是用整数<code>0</code>和<code>1</code>标记的:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RootView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> activeTabIndex = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">TabView</span>(selection: $activeTabIndex) &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Switch to tab B"</span>) &#123;</span><br><span class="line">                activeTabIndex = <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            .tag(<span class="number">0</span>)</span><br><span class="line">            .tabItem &#123; <span class="type">Label</span>(<span class="string">"Tab A"</span>, systemImage: <span class="string">"a.circle"</span>) &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Switch to tab A"</span>) &#123;</span><br><span class="line">                activeTabIndex = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">            .tag(<span class="number">1</span>)</span><br><span class="line">            .tabItem &#123; <span class="type">Label</span>(<span class="string">"Tab B"</span>, systemImage: <span class="string">"b.circle"</span>) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但真正好的地方是，在识别和切换标签时，我们并不仅仅局限于使用整数。相反，我们可以自由地使用任何<code>Hashable</code>值来表示每个标签——例如通过使用一个枚举，其中包含我们想要显示的每个标签的情况。然后我们可以将这部分状态封装在一个<code>ObservableObject</code>中，这样我们就可以很容易地注入到我们的视图层次环境中:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Tab</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> home</span><br><span class="line">    <span class="keyword">case</span> search</span><br><span class="line">    <span class="keyword">case</span> settings</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TabController</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    @<span class="type">Published</span> <span class="keyword">var</span> activeTab = <span class="type">Tab</span>.home</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">open</span><span class="params">(<span class="number">_</span> tab: Tab)</span></span> &#123;</span><br><span class="line">        activeTab = tab</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了上述内容，我们现在可以用新的<code>Tab</code>类型来标记<code>TabView</code>中的每个视图，如果我们再把<code>TabController</code>注入到视图层次结构的环境中，那么其中的任何视图都可以随时切换显示的Tab。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RootView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">StateObject</span> <span class="keyword">private</span> <span class="keyword">var</span> tabController = <span class="type">TabController</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">TabView</span>(selection: $tabController.activeTab) &#123;</span><br><span class="line">            <span class="type">HomeView</span>()</span><br><span class="line">                .tag(<span class="type">Tab</span>.home)</span><br><span class="line">                .tabItem &#123; <span class="type">Label</span>(<span class="string">"Home"</span>, systemImage: <span class="string">"house"</span>) &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">SearchView</span>()</span><br><span class="line">                .tag(<span class="type">Tab</span>.search)</span><br><span class="line">                .tabItem &#123; <span class="type">Label</span>(<span class="string">"Search"</span>, systemImage: <span class="string">"magnifyingglass"</span>) &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">SettingsView</span>()</span><br><span class="line">                .tag(<span class="type">Tab</span>.settings)</span><br><span class="line">                .tabItem &#123; <span class="type">Label</span>(<span class="string">"Settings"</span>, systemImage: <span class="string">"gearshape"</span>) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .environmentObject(tabController)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，现在我们的<code>HomeView</code>可以使用一个完全自定义的按钮切换到设置标签——它只需要从环境中获取我们的<code>TabController</code>，然后它可以调用<code>open</code>方法来执行标签切换，像这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HomeView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">EnvironmentObject</span> <span class="keyword">private</span> <span class="keyword">var</span> tabController: <span class="type">TabController</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ScrollView</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Open settings"</span>) &#123;</span><br><span class="line">                tabController.<span class="keyword">open</span>(.settings)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很好! 另外，由于<code>TabController</code>是一个完全由我们控制的对象，我们也可以用它来切换主视图层次结构以外的标签。例如，我们可能想根据推送通知或其他类型的服务器事件来切换标签，现在可以通过调用上述视图代码中的相同的<code>open</code>方法来完成。</p><blockquote><p>要了解更多关于环境对象以及SwiftUI状态管理系统的其余部分，<a href="https://www.swiftbysundell.com/articles/swiftui-state-management-guide" target="_blank" rel="noopener">请查看本指南</a>。</p></blockquote><h2 id="控制导航堆栈"><a href="#控制导航堆栈" class="headerlink" title="控制导航堆栈"></a>控制导航堆栈</h2><p>就像标签视图一样，SwiftUI的<code>NavigationView</code>也可以被编程自定义控制。例如，假设我们正在开发一个应用程序，在其主导航堆栈中显示一个日历视图作为根视图，然后用户可以通过点击位于该应用程序导航栏中的编辑按钮来打开一个日历编辑视图。为了连接这两个视图，我们使用了一个<code>NavigationLink</code>，每当点击一个给定的视图时，它就会自动将其压入到导航栈中：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RootView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">ObservedObject</span> <span class="keyword">var</span> calendarController: <span class="type">CalendarController</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">CalendarView</span>(</span><br><span class="line">                calendar: calendarController.calendar</span><br><span class="line">            )</span><br><span class="line">            .toolbar &#123;</span><br><span class="line">                <span class="type">ToolbarItem</span>(placement: .navigationBarTrailing) &#123;</span><br><span class="line">                    <span class="type">NavigationLink</span>(<span class="string">"Edit"</span>) &#123;</span><br><span class="line">    <span class="type">CalendarEditView</span>(</span><br><span class="line">        calendar: $calendarController.calendar</span><br><span class="line">    )</span><br><span class="line">    .navigationTitle(<span class="string">"Edit your calendar"</span>)</span><br><span class="line">&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationTitle(<span class="string">"Your calendar"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .navigationViewStyle(.stack)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在这种情况下，我们在所有设备上使用堆栈式导航风格，甚至是iPad，而不是让系统选择使用哪种导航风格。</p></blockquote><p>现在我们假设，我们想让我们的<code>CalendarView</code>以自定义方式显示其编辑视图，而不需要构建一个单独的实例。要做到这一点，我们可以在编辑按钮的<code>NavigationLink</code>中注入一个<code>isActive</code>绑定，然后将其传递给我们的<code>CalendarView</code>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RootView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">ObservedObject</span> <span class="keyword">var</span> calendarController: <span class="type">CalendarController</span></span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> isEditViewShown = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">CalendarView</span>(</span><br><span class="line">                calendar: calendarController.calendar,</span><br><span class="line">                isEditViewShown: $isEditViewShown</span><br><span class="line">            )</span><br><span class="line">            .toolbar &#123;</span><br><span class="line">                <span class="type">ToolbarItem</span>(placement: .navigationBarTrailing) &#123;</span><br><span class="line">                    <span class="type">NavigationLink</span>(<span class="string">"Edit"</span>, isActive: $isEditViewShown) &#123;</span><br><span class="line">                        <span class="type">CalendarEditView</span>(</span><br><span class="line">                            calendar: $calendarController.calendar</span><br><span class="line">                        )</span><br><span class="line">                        .navigationTitle(<span class="string">"Edit your calendar"</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationTitle(<span class="string">"Your calendar"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .navigationViewStyle(.stack)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们现在也更新<code>CalendarView</code>，使其使用<code>@Binding</code>绑定属性接受上述值，那么现在只要我们想显示我们的编辑视图，就可以简单地将该属性设置为<code>true</code>，我们的根视图的<code>NavigationLink</code>将自动被触发:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CalendarView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> calendar: <span class="type">Calendar</span></span><br><span class="line">    @<span class="type">Binding</span> <span class="keyword">var</span> isEditViewShown: <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ScrollView</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Edit calendar settings"</span>) &#123;</span><br><span class="line">                isEditViewShown = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当然，我们也可以选择将<code>isEditViewShown</code>属性封装在某种形式的<code>ObservableObject</code>中，例如<code>NavigationController</code>，就像我们之前处理<code>TabView</code>时那样。</p></blockquote><p>这就是我们如何以自定义编程方式触发显示在我们的用户界面中的<code>NavigationLink</code>——但如果我们想在不给用户任何直接控制的情况下执行这种导航呢？</p><p>例如，我们现在假设我们正在开发一个包括导出功能的视频编辑应用程序。当用户进入导出流程时，一个<code>VideoExportView</code>被显示为模态，一旦导出操作完成，我们想把<code>VideoExportFinishedView</code>推送到该模态的导航栈中。</p><p>最初，这可能看起来非常棘手，因为（由于SwiftUI是一个声明式的UI框架）没有<code>push</code>方法，当我们想在导航栈中添加一个新视图时，我们可以调用该方法。事实上，在<code>NavigationView</code>中显示一个新视图的唯一内置方法是使用<code>NavigationLink</code>，它需要成为我们视图层次结构本身的一部分。</p><p>也就是说，这些<code>NavigationLink</code>实际上不一定是可见的——所以在这种情况下，实现我们目标的一个方法是在我们的视图中添加一个隐藏的导航链接，然后我们可以在视频导出操作完成后以编程方式触发该链接。如果我们也在我们的目标视图中隐藏系统提供的返回按钮，那么我们就可以完全锁定用户能够在这两个视图之间手动导航:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">VideoExportView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">ObservedObject</span> <span class="keyword">var</span> exporter: <span class="type">VideoExporter</span></span><br><span class="line">    @<span class="type">State</span> <span class="keyword">private</span> <span class="keyword">var</span> didFinish = <span class="literal">false</span></span><br><span class="line">    @<span class="type">Environment</span>(\.presentationMode) <span class="keyword">private</span> <span class="keyword">var</span> presentationMode</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                ...</span><br><span class="line">                <span class="type">Button</span>(<span class="string">"Export"</span>) &#123;</span><br><span class="line">                    exporter.export &#123;</span><br><span class="line">    didFinish = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">                &#125;</span><br><span class="line">                .disabled(exporter.isExporting)</span><br><span class="line"></span><br><span class="line">                <span class="type">NavigationLink</span>(<span class="string">"Hidden finish link"</span>, isActive: $didFinish) &#123;</span><br><span class="line">                    <span class="type">VideoExportFinishedView</span>(doneAction: &#123;</span><br><span class="line">                        presentationMode.wrappedValue.dismiss()</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .navigationTitle(<span class="string">"Export completed"</span>)</span><br><span class="line">                    .navigationBarBackButtonHidden(<span class="literal">true</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                .hidden()</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationTitle(<span class="string">"Export this video"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .navigationViewStyle(.stack)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">VideoExportFinishedView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> doneAction: () -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Label</span>(<span class="string">"Your video was exported"</span>, systemImage: <span class="string">"checkmark.circle"</span>)</span><br><span class="line">            ...</span><br><span class="line">            <span class="type">Button</span>(<span class="string">"Done"</span>, action: doneAction)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们在<code>VideoExportFinishedView</code>中注入一个<code>doedAction</code>闭包，而不是让它检索当前的<code>presentationMode</code>本身，是因为我们希望解耦整个模态流程，而不仅仅是那个特定的视图。要了解更多信息，请查看 “<a href="https://www.swiftbysundell.com/articles/dismissing-swiftui-modal-and-detail-views" target="_blank" rel="noopener">解耦SwiftUI模态或详细视图</a>“。</p></blockquote><p>使用这样一个隐藏的<code>NavigationLink</code>绝对可以被认为是一个有点 “黑 “的解决方案，但它的效果非常好，如果我们把一个导航链接看成是导航堆栈中两个视图之间的连接（而不仅仅是一个按钮），那么上述设置可以说是有意义的。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>尽管SwiftUI的导航系统仍然不如UIKit和AppKit提供的系统灵活，但它已经足够强大，可以满足很多不同的使用情——-特别是当与SwiftUI非常全面的状态管理系统相结合时。</p><p>当然，我们也可以选择将我们的SwiftUI视图层次包裹在<a href="https://www.swiftbysundell.com/articles/swiftui-and-uikit-interoperability-part-2" target="_blank" rel="noopener">托管控制器</a>中，只使用UIKit/AppKit来实现我们的导航代码。哪种解决方案是最合适的，可能取决于我们在每个项目中实际想要执行多少自定义和程序化的导航。</p><p>感谢您的阅读!</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;默认情况下，SwiftUI提供的各种导航API在很大程度上是以用户直接输入为中心的——也就是说，导航是在系统响应例如按钮的点击和标签切换等事件时由系统本身处理的。&lt;/p&gt;
&lt;p&gt;然而，有时我们可能想更直接地控制应用程序的导航执行方式，尽管SwiftUI在这方面仍然不如UIKit或AppKit灵活，但它确实提供了相当多的方法，让我们在构建的视图中执行完全自定义的导航。&lt;/p&gt;
    
    </summary>
    
      <category term="SwiftUI" scheme="https://fanbaoying.github.io/categories/SwiftUI/"/>
    
    
      <category term="iOS" scheme="https://fanbaoying.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 66 加一</title>
    <link href="https://fanbaoying.github.io/LeetCode-66-%E5%8A%A0%E4%B8%80/"/>
    <id>https://fanbaoying.github.io/LeetCode-66-加一/</id>
    <published>2022-07-06T11:00:15.000Z</published>
    <updated>2022-07-06T11:09:28.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 65 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：简单</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给定一个由 <strong>整数</strong> 组成的 <strong>非空</strong> 数组所表示的非负整数，在该数的基础上加一。</p><p>最高位数字存放在数组的首位， 数组中每个元素只存储<strong>单个</strong>数字。</p><p>你可以假设除了整数 <code>0</code> 之外，这个整数不会以零开头。</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = [1,2,3]</span><br><span class="line">输出：[1,2,4]</span><br><span class="line">解释：输入数组表示数字 123。</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = [4,3,2,1]</span><br><span class="line">输出：[4,3,2,2]</span><br><span class="line">解释：输入数组表示数字 4321。</span><br></pre></td></tr></table></figure><p><strong>示例 3</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = [0]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>1 &lt;= digits.length &lt;= 100</code></li><li><code>0 &lt;= digits[i] &lt;= 9</code></li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlusOne</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">plusOne</span><span class="params">(digits: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> digits = digits</span><br><span class="line">        <span class="keyword">var</span> index = digits.<span class="built_in">count</span> - <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> index &gt;= <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> digits[index] &lt; <span class="number">9</span> &#123;</span><br><span class="line">                digits[index] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span> digits</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            digits[index] = <span class="number">0</span></span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        digits.insert(<span class="number">1</span>, atIndex: <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> digits</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：迭代并将数组从最后一个更改为第一个。</li><li>时间复杂度： O(n)</li><li>空间复杂度： O(1)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/plus-one/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 65 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：简单&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 65 有效数字</title>
    <link href="https://fanbaoying.github.io/LeetCode-65-%E6%9C%89%E6%95%88%E6%95%B0%E5%AD%97/"/>
    <id>https://fanbaoying.github.io/LeetCode-65-有效数字/</id>
    <published>2022-07-06T11:00:03.000Z</published>
    <updated>2022-07-06T11:03:04.732Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 64 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：困难</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p><strong>有效数字</strong>（按顺序）可以分成以下几个部分：</p><ol><li>一个 小数 或者 整数</li><li>（可选）一个 <code>&#39;e&#39;</code> 或 <code>&#39;E&#39;</code> ，后面跟着一个 整数</li></ol><p><strong>小数</strong>（按顺序）可以分成以下几个部分：</p><ol><li>（可选）一个符号字符（<code>&#39;+&#39;</code> 或 <code>&#39;-&#39;</code>）</li><li>下述格式之一：<ol><li>至少一位数字，后面跟着一个点 <code>&#39;.&#39;</code></li><li>至少一位数字，后面跟着一个点 <code>&#39;.&#39;</code> ，后面再跟着至少一位数字</li><li>一个点 <code>&#39;.&#39;</code> ，后面跟着至少一位数字</li></ol></li></ol><p><strong>整数</strong>（按顺序）可以分成以下几个部分：</p><ol><li>（可选）一个符号字符（<code>&#39;+&#39;</code> 或 <code>&#39;-&#39;</code>）</li><li>至少一位数字</li></ol><p>部分有效数字列举如下：<code>[&quot;2&quot;, &quot;0089&quot;, &quot;-0.1&quot;, &quot;+3.14&quot;, &quot;4.&quot;, &quot;-.9&quot;, &quot;2e10&quot;, &quot;-90E3&quot;, &quot;3e+7&quot;, &quot;+6e-1&quot;, &quot;53.5e93&quot;, &quot;-123.456e789&quot;]</code></p><p>部分无效数字列举如下：<code>[&quot;abc&quot;, &quot;1a&quot;, &quot;1e&quot;, &quot;e3&quot;, &quot;99e2.5&quot;, &quot;--6&quot;, &quot;-+3&quot;, &quot;95a54e53&quot;]</code></p><p>给你一个字符串 <code>s</code> ，如果 <code>s</code> 是一个 有效数字 ，请返回 <code>true</code>。</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;0&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;e&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>示例 3</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;.&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 20</code></li><li><code>s</code> 仅含英文字母（大写和小写），数字（<code>0-9</code>），加号 <code>&#39;+&#39;</code> ，减号 <code>&#39;-&#39;</code> ，或者点 <code>&#39;.&#39;</code> 。</li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinimumPathSum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">minPathSum</span><span class="params">(<span class="number">_</span> grid: [[Int]])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> grid.<span class="built_in">count</span> != <span class="number">0</span> &amp;&amp; grid[<span class="number">0</span>].<span class="built_in">count</span> != <span class="number">0</span> <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">let</span> m = grid.<span class="built_in">count</span>, n = grid[<span class="number">0</span>].<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">var</span> dp = <span class="type">Array</span>(repeating: <span class="type">Array</span>(repeating: <span class="number">0</span>, <span class="built_in">count</span>: n), <span class="built_in">count</span>: m)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;m &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;n &#123;</span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>&#123;</span><br><span class="line">                    dp[i][j] = grid[i][j]</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">1</span>] + grid[i][j]</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> j == <span class="number">0</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] + grid[i][j]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j]) + grid[i][j]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：遍历字符串并分别处理点、指数、数字和符号用例。</li><li>时间复杂度： O(n)</li><li>空间复杂度： O(1)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode-cn.com/problems/valid-number/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 64 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：困难&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 64 最小路径和（Top 100）</title>
    <link href="https://fanbaoying.github.io/LeetCode-64-%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C%EF%BC%88Top-100%EF%BC%89/"/>
    <id>https://fanbaoying.github.io/LeetCode-64-最小路径和（Top-100）/</id>
    <published>2022-07-06T10:59:51.000Z</published>
    <updated>2022-07-06T11:02:49.145Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本题为 LeetCode 前 100 高频题</strong></p><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 63 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：中等</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>给定一个包含非负整数的 <code>m x n</code> 网格 <code>grid</code> ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p><p><strong>说明：</strong> 每次只能向下或者向右移动一步。</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[1,3,1],[1,5,1],[4,2,1]]</span><br><span class="line">输出：7</span><br><span class="line">解释：因为路径 1→3→1→1→1 的总和最小。</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[1,2,3],[4,5,6]]</span><br><span class="line">输出：12</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 200</code></li><li><code>0 &lt;= grid[i][j] &lt;= 100</code></li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinimumPathSum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">minPathSum</span><span class="params">(<span class="number">_</span> grid: [[Int]])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> grid.<span class="built_in">count</span> != <span class="number">0</span> &amp;&amp; grid[<span class="number">0</span>].<span class="built_in">count</span> != <span class="number">0</span> <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">let</span> m = grid.<span class="built_in">count</span>, n = grid[<span class="number">0</span>].<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">var</span> dp = <span class="type">Array</span>(repeating: <span class="type">Array</span>(repeating: <span class="number">0</span>, <span class="built_in">count</span>: n), <span class="built_in">count</span>: m)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;m &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;n &#123;</span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>&#123;</span><br><span class="line">                    dp[i][j] = grid[i][j]</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">1</span>] + grid[i][j]</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> j == <span class="number">0</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] + grid[i][j]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j]) + grid[i][j]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：经典的二维动态规划。</li><li>时间复杂度： O(mn)</li><li>空间复杂度： O(mn)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/minimum-path-sum/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本题为 LeetCode 前 100 高频题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 63 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：中等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 63 不同路径 II</title>
    <link href="https://fanbaoying.github.io/LeetCode-63-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84-II/"/>
    <id>https://fanbaoying.github.io/LeetCode-63-不同路径-II/</id>
    <published>2022-07-06T10:59:30.000Z</published>
    <updated>2022-07-06T11:02:31.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 62 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：中等</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>一个机器人位于一个 <code>m x n</code> 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish”）。</p><p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p><p>网格中的障碍物和空位置分别用 <code>1</code> 和 <code>0</code> 来表示。</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]</span><br><span class="line">输出：2</span><br><span class="line">解释：3x3 网格的正中间有一个障碍物。</span><br><span class="line">从左上角到右下角一共有 2 条不同的路径：</span><br><span class="line">1. 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</span><br><span class="line">2. 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：obstacleGrid = [[0,1],[0,0]]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>m == obstacleGrid.length</code></li><li><code>n == obstacleGrid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 100</code></li><li><code>obstacleGrid[i][j]</code> 为 <code>0</code> 或 <code>1</code></li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UniquePathsII</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="number">_</span> obstacleGrid: [[Int]])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> m = obstacleGrid.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">guard</span> m &gt; <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> n = obstacleGrid[<span class="number">0</span>].<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">guard</span> n &gt; <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">var</span> dp = <span class="type">Array</span>(repeating: <span class="type">Array</span>(repeating: -<span class="number">1</span>, <span class="built_in">count</span>: n), <span class="built_in">count</span>: m)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> help(m - <span class="number">1</span>, n - <span class="number">1</span>, &amp;dp, obstacleGrid)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">help</span><span class="params">(<span class="number">_</span> m: Int, <span class="number">_</span> n: Int, <span class="number">_</span> dp: <span class="keyword">inout</span> [[Int]], <span class="number">_</span> obstacleGrid: [[Int]])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> m &lt; <span class="number">0</span> || n &lt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> obstacleGrid[m][n] == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> m == <span class="number">0</span> &amp;&amp; n == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dp[m][n] != -<span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[m][n]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dp[m][n] = help(m - <span class="number">1</span>, n, &amp;dp, obstacleGrid) + help(m, n - <span class="number">1</span>, &amp;dp, obstacleGrid)</span><br><span class="line">        <span class="keyword">return</span> dp[m][n]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：2D动态编程，使用2D数组作为缓存来存储计算数据。</li><li>时间复杂度： O(mn)</li><li>空间复杂度： O(mn)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/unique-paths-ii/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 62 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：中等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 62 不同路径（Top 100）</title>
    <link href="https://fanbaoying.github.io/LeetCode-62-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84%EF%BC%88Top-100%EF%BC%89/"/>
    <id>https://fanbaoying.github.io/LeetCode-62-不同路径（Top-100）/</id>
    <published>2022-07-06T10:59:10.000Z</published>
    <updated>2022-07-06T11:02:09.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>本题为 LeetCode 前 100 高频题</strong></p><p>我们社区陆续会将顾毅（<strong>Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。</strong>）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。</p><p>LeetCode 算法到目前我们已经更新了 62 期，我们会保持更新时间和进度（<strong>周一、周三、周五早上 9:00 发布</strong>），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。</p><p>不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。<strong>如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。</strong></p><blockquote><p>难度水平：中等</p></blockquote><a id="more"></a><h2 id="1-描述"><a href="#1-描述" class="headerlink" title="1. 描述"></a>1. 描述</h2><p>一个机器人位于一个 <code>m x n</code> 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p><p>问总共有多少条不同的路径？</p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h2><p><strong>示例 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m = 3, n = 7</span><br><span class="line">输出：28</span><br></pre></td></tr></table></figure><p><strong>示例 2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：m = 3, n = 2</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">从左上角开始，总共有 3 条路径可以到达右下角。</span><br><span class="line">1. 向右 -&gt; 向下 -&gt; 向下</span><br><span class="line">2. 向下 -&gt; 向下 -&gt; 向右</span><br><span class="line">3. 向下 -&gt; 向右 -&gt; 向下</span><br></pre></td></tr></table></figure><p><strong>示例 3</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m = 7, n = 3</span><br><span class="line">输出：28</span><br></pre></td></tr></table></figure><p><strong>示例 4</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m = 3, n = 3</span><br><span class="line">输出：6</span><br></pre></td></tr></table></figure><p><strong>约束条件：</strong></p><ul><li><code>1 &lt;= m, n &lt;= 100</code></li><li>题目数据保证答案小于等于 <code>2 * 10^9</code></li></ul><h2 id="3-答案"><a href="#3-答案" class="headerlink" title="3. 答案"></a>3. 答案</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UniquePaths</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">uniquePaths</span><span class="params">(m: Int, <span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> pathNums = <span class="type">Array</span>(<span class="built_in">count</span>: m, repeatedValue: <span class="type">Array</span>(<span class="built_in">count</span>: n, repeatedValue: <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> _helper(&amp;pathNums, m - <span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">_helper</span><span class="params">(<span class="keyword">inout</span> pathNums: [[Int]], <span class="number">_</span> m: Int, <span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> m &lt; <span class="number">0</span> || n &lt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> m == <span class="number">0</span> || n == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> pathNums[m][n] != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> pathNums[m][n]</span><br><span class="line">        &#125;</span><br><span class="line">        pathNums[m][n] = _helper(&amp;pathNums, m - <span class="number">1</span>, n) + _helper(&amp;pathNums, m, n - <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> pathNums[m][n]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主要思想：2D动态编程，使用2D数组作为缓存来存储计算数据。</li><li>时间复杂度： O(mn)</li><li>空间复杂度： O(mn)</li></ul><p>该算法题解的仓库：<a href="https://github.com/soapyigu/LeetCode-Swift" title="LeetCode-Swift" target="_blank" rel="noopener">LeetCode-Swift</a></p><p>点击前往 <a href="https://leetcode.com/problems/unique-paths/" title="LeetCode" target="_blank" rel="noopener">LeetCode</a> 练习</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>我们是由 Swift 爱好者共同维护，我们会分享以 Swift 实战、SwiftUI、Swift 基础为核心的技术内容，也整理收集优秀的学习资料。</p><p>后续还会翻译大量资料到我们公众号，有感兴趣的朋友，可以加入我们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本题为 LeetCode 前 100 高频题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们社区陆续会将顾毅（&lt;strong&gt;Netflix 增长黑客，《iOS 面试之道》作者，ACE 职业健身教练。&lt;/strong&gt;）的 Swift 算法题题解整理为文字版以方便大家学习与阅读。&lt;/p&gt;
&lt;p&gt;LeetCode 算法到目前我们已经更新了 62 期，我们会保持更新时间和进度（&lt;strong&gt;周一、周三、周五早上 9:00 发布&lt;/strong&gt;），每期的内容不多，我们希望大家可以在上班路上阅读，长久积累会有很大提升。&lt;/p&gt;
&lt;p&gt;不积跬步，无以至千里；不积小流，无以成江海，Swift社区 伴你前行。&lt;strong&gt;如果大家有建议和意见欢迎在文末留言，我们会尽力满足大家的需求。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;难度水平：中等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode-Swift" scheme="https://fanbaoying.github.io/categories/LeetCode-Swift/"/>
    
    
      <category term="LeetCode" scheme="https://fanbaoying.github.io/tags/LeetCode/"/>
    
  </entry>
  
</feed>
